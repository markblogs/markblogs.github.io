<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>202007_刷题</title>
    <url>/2020/07/05/202007-%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h4 id="找出数组中重复的数字。"><a href="#找出数组中重复的数字。" class="headerlink" title="找出数组中重复的数字。"></a>找出数组中重复的数字。</h4><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">真题网址</a></p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<span id="more"></span>

<p><strong>示例 1：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></table></figure>

<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  	<span class="comment">// 思路1，运用set不可重复特性实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(num))&#123;</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 思路2：利用排序后进行对比</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; nums.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="二维数组查找"><a href="#二维数组查找" class="headerlink" title="二维数组查找"></a>二维数组查找</h4><p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">真题网址</a></p>
<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>示例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">现有矩阵 matrix 如下：</span><br><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line">给定 target = 5，返回 true。</span><br><span class="line">给定 target = 20，返回 false。</span><br></pre></td></tr></table></figure>

<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == matrix || matrix.length == <span class="number">0</span> || <span class="keyword">null</span> == matrix[<span class="number">0</span>] || matrix[<span class="number">0</span>].length == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> height = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> width = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> j = width - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( i&lt;height &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &gt; target)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<hr>
<h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h4><p><a href="https://leetcode-cn.com/problems/two-sum/">真题网址</a></p>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p>示例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<p>解答：</p>
<ul>
<li><p>暴力法，双层for循环</p>
</li>
<li><p>hash法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> needNum = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(needNum)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(needNum), i&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p><a href="https://leetcode-cn.com/problems/remove-element/">真题网址</a></p>
<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例1:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>



<p>示例2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解答:</p>
<p>双指针法，一个快指针，一个慢指针。如果快指针碰见符合条件变量，将其赋值到满指针所在位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == nums || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[j] = nums[i];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="从头到尾打印链表"><a href="#从头到尾打印链表" class="headerlink" title="从头到尾打印链表"></a>从头到尾打印链表</h4><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">真题网址</a></p>
<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<p> </p>
<p>示例 1：</p>
<p>输入：head = [1,3,2]<br>输出：[2,3,1]</p>
<p>限制：</p>
<p>0 &lt;= 链表长度 &lt;= 10000</p>
<p>解答：运用 Stack 栈的特点，后进先出来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br><span class="line">        Stack&lt;ListNode&gt; queue = <span class="keyword">new</span> Stack&lt;ListNode&gt;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">L</span></span><br><span class="line"><span class="function">        <span class="title">while</span> <span class="params">(<span class="keyword">null</span> != head.next)</span></span>&#123;</span><br><span class="line">            ListNode temp = head.next;</span><br><span class="line">            queue.offer(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h4><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">真题网址</a></p>
<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<p> </p>
<p>示例 1：</p>
<p>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p>
<p>限制：</p>
<p>0 &lt;= s 的长度 &lt;= 10000</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            Character c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot; &quot;</span> == c.toString()) &#123;</span><br><span class="line">                str.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h4><p><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">真题网址</a></p>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>
<p>示例 1：</p>
<p>输入：<br>[“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[3],[],[]]<br>输出：[null,null,3,-1]</p>
<p>示例 2：</p>
<p>输入：</p>
<p>[“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[],[5],[2],[],[]]<br>输出：[null,-1,null,null,5,2]</p>
<p>限制：</p>
<p>1 &lt;= values &lt;= 10000</p>
<p>最多会对 appendTail、deleteHead 进行 10000 次调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1;</span><br><span class="line">    Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> stack2.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>LeetCode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>202008-刷题</title>
    <url>/2020/08/03/202008-%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h4 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">重建二叉树</a></h4><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<span id="more"></span>

<p>示例1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">前序遍历 preorder = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">中序遍历 inorder = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>返回如下的二叉树：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure>

<p><strong>限制：</strong></p>
<p><code>0 &lt;= 节点个数 &lt;= 5000</code></p>
<p>解答</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (preorder == <span class="keyword">null</span> || preorder.length == <span class="number">0</span> )&#123; <span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">       Map&lt;Integer,Integer&gt; indexMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;preorder.length-<span class="number">1</span> ;i++) &#123;</span><br><span class="line">           indexMap.put(inorder[i],i);</span><br><span class="line">       &#125;</span><br><span class="line">       TreeNode root = buildTree(preorder, <span class="number">0</span>, preorder.length-<span class="number">1</span>, inorder, <span class="number">0</span>,preorder.length-<span class="number">1</span>,indexMap);</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> preorderStart, <span class="keyword">int</span> preorderEnd, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> inorderStart, <span class="keyword">int</span> inorderEnd, Map&lt;Integer, Integer&gt; indexMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorderStart &gt; preorderEnd)&#123; <span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rootVal = preorder[preorderStart];</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preorderStart == preorderEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rootIndex = indexMap.get(rootVal);</span><br><span class="line">            <span class="keyword">int</span> leftNodes = rootIndex - inorderStart;</span><br><span class="line">            <span class="keyword">int</span> rightNodes = inorderEnd - rootIndex;</span><br><span class="line">            root.left = buildTree(preorder, preorderStart+<span class="number">1</span>, preorderStart+leftNodes , inorder, inorderStart, rootIndex-<span class="number">1</span>, indexMap);</span><br><span class="line">            root.right = buildTree(preorder, preorderEnd-rightNodes+<span class="number">1</span>, preorderEnd , inorder, rootIndex+<span class="number">1</span>, inorderEnd, indexMap);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">斐波那契数列</a></h3><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p>
<p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p>
<p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 100</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 动态规划</span></span><br><span class="line"><span class="comment"> * 优点 空间复杂度最低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n ;i++)&#123;</span><br><span class="line">            sum = (a+b)%<span class="number">1000000007</span>;</span><br><span class="line">            a=b;</span><br><span class="line">            b=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>LeetCode刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-1事件</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-1%E5%90%AF%E5%8A%A8%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="启动事件分为三种类型"><a href="#启动事件分为三种类型" class="headerlink" title="启动事件分为三种类型"></a>启动事件分为三种类型</h4><ul>
<li>空启动事件 </li>
<li>定时启动事件</li>
<li>异常启动事件</li>
<li>消息启动事件</li>
</ul>
<hr>
<h4 id="空启动事件"><a href="#空启动事件" class="headerlink" title="空启动事件"></a>空启动事件</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Start Event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--空启动事件的属性 </span></span><br><span class="line"><span class="comment">	1：activiti:formKey		可以用来指定空启动事件关联的表单文件</span></span><br><span class="line"><span class="comment">	2：activiti:initiator		可以用来记录启动流程人的Id，也可以是用户的名称，启动流程之后此属性指定的变量就会自动设置为当前人的名称。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">activiti:formKey</span>=<span class="string">&quot;apply.form&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">activiti:initiator</span>=<span class="string">&quot;startUserId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="定时启动事件"><a href="#定时启动事件" class="headerlink" title="定时启动事件"></a>定时启动事件</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;timerStartEvent&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Timer start event for report process&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">timerEventDefinition</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">timeCycle</span>&gt;</span>R1/2012-02-01T00:00/PMIM<span class="tag">&lt;/<span class="name">timeCycle</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">timerEventDefinition</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定时启动事件的定时属性 </span></span><br><span class="line"><span class="comment">	1：timeDate		一次性定时启动，具体到一个日期，用 ISO 860 格式设定		&lt;timeDate&gt;2012-12-12T00:00:00&lt;/timeDate&gt;</span></span><br><span class="line"><span class="comment">	2：timeDuration	设置多长时间后启动	&lt;timeDuration&gt;PT10M&lt;/timeDuration&gt;  上个任务完成10分钟后启动</span></span><br><span class="line"><span class="comment">	3：timeCycle	周期性启动，设置循环间隔，用 ISO 860 格式设定	&lt;timeCycle&gt;R3/PT10M&lt;/timeCycle&gt;  循环3次，每次间隔10小时--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>异常启动事件</p>
<hr>
<p>消息启动事件</p>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-1事件</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-1%E7%BB%93%E6%9D%9F%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="结束事件分为三种类型"><a href="#结束事件分为三种类型" class="headerlink" title="结束事件分为三种类型"></a>结束事件分为三种类型</h4><ul>
<li><p>空结束事件</p>
</li>
<li><p>异常结束事件</p>
</li>
<li><p>终止结束事件</p>
</li>
<li><p>取消结束事件</p>
</li>
</ul>
<hr>
<h4 id="空结束事件"><a href="#空结束事件" class="headerlink" title="空结束事件"></a>空结束事件</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my end event&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--空启动事件的属性 </span></span><br><span class="line"><span class="comment">	空结束事件不抛出任何结果</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="异常结束事件"><a href="#异常结束事件" class="headerlink" title="异常结束事件"></a>异常结束事件</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my end event&quot;</span>/&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">errorEventDefinition</span> <span class="attr">errorRef</span>=<span class="string">&quot;AIA-001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">errorEventDefinition</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--异常结束事件 </span></span><br><span class="line"><span class="comment">	异常结束事件可以定义需要抛出的错误代码</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="终止结束事件"><a href="#终止结束事件" class="headerlink" title="终止结束事件"></a>终止结束事件</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my end event&quot;</span>/&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">terminateEventDefinition</span>&gt;</span><span class="tag">&lt;/<span class="name">terminateEventDefinition</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--终止结束事件 </span></span><br><span class="line"><span class="comment">	终止一个流程实例的执行，结束整个流程实例</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="取消结束事件"><a href="#取消结束事件" class="headerlink" title="取消结束事件"></a>取消结束事件</h4><p>注意：可以取消一个 <strong>事务子流程</strong> 的执行，也<strong>只能在子流程</strong>中使用</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my end event&quot;</span>/&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">cancelEventDefinition</span>/&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--取消结束事件 </span></span><br><span class="line"><span class="comment">	取消结束事件，可以取消一个 事务子流程 的执行，也只能在子流程中使用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-3任务</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-3%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h4 id="顺序流分为11种类型"><a href="#顺序流分为11种类型" class="headerlink" title="顺序流分为11种类型"></a>顺序流分为11种类型</h4><ul>
<li>用户任务</li>
<li>脚本任务</li>
<li>Java Service</li>
<li>Web Service</li>
<li>业务规则任务</li>
<li>邮件任务</li>
<li>Camel任务</li>
<li>Mule任务</li>
<li>手动任务</li>
<li>接受任务</li>
<li>Shell任务</li>
</ul>
<hr>
<h4 id="用户任务"><a href="#用户任务" class="headerlink" title="用户任务"></a>用户任务</h4><p>​    用户任务需要人来参与，因为它需要被人为触发</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;leaderAudit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;领导审批&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">humanPerformer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">formalExpression</span>&gt;</span></span><br><span class="line">        user(henryyan),group(leader),manager</span><br><span class="line">      <span class="tag">&lt;/<span class="name">formalExpression</span>&gt;</span>				</span><br><span class="line">    <span class="tag">&lt;/<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">humanPerformer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">			</span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;leaderAudit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;领导审批&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">potentialOwner</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">formalExpression</span>&gt;</span></span><br><span class="line">        user(henryyan),group(leader),manager</span><br><span class="line">      <span class="tag">&lt;/<span class="name">formalExpression</span>&gt;</span>				</span><br><span class="line">    <span class="tag">&lt;/<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">potentialOwner</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用户任务的属性 </span></span><br><span class="line"><span class="comment">  	humanPerformer：标签定义表示把这个任务分配给一个人。</span></span><br><span class="line"><span class="comment">	potentialOwner：标签来描述一个潜在用户、组集合。这个用户任务同时分配给用户 henryyan、组 leader 和 组 manager</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="脚本任务"><a href="#脚本任务" class="headerlink" title="脚本任务"></a>脚本任务</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scriptTask</span>	<span class="attr">id</span>=<span class="string">&quot;initvars&quot;</span> <span class="attr">name</span>=<span class="string">&quot;初始化变量&quot;</span>  <span class="attr">scriptFormat</span>=<span class="string">&quot;groovy&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &lt;![CDATA[</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">     def name = &quot;HenryYan&quot;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">     execution.setVariable(&quot;name&quot;,&quot;name&quot;);			</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    ]]&gt;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scriptTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptTask</span>	<span class="attr">id</span>=<span class="string">&quot;printvars&quot;</span> <span class="attr">name</span>=<span class="string">&quot;输出脚本&quot;</span>  <span class="attr">scriptFormat</span>=<span class="string">&quot;groovy&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &lt;![CDATA[</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">     out:println name;		</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    ]]&gt;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scriptTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptTask</span>	<span class="attr">id</span>=<span class="string">&quot;scripttask1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;初始化变量&quot;</span>  <span class="attr">scriptFormat</span>=<span class="string">&quot;juel&quot;</span> <span class="attr">activiti:resultvariable</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">scriptTask</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 脚本任务的属性 </span></span><br><span class="line"><span class="comment">	指定的变量名称需要在脚本中预定义才能使用</span></span><br><span class="line"><span class="comment">  	scriptFormat	用来指定符合 JSR-223 规范的脚本语言的类型		</span></span><br><span class="line"><span class="comment">	activiti:resultvariable	Activiti在原BPM 2.0 规范中的脚本任务基础上进行了扩展，可以把脚本处理的结果保存到一个变量中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Java-Service-任务"><a href="#Java-Service-任务" class="headerlink" title="Java Service 任务"></a>Java Service 任务</h4><p>​    Java Service 任务允许定义一个实现了指定接口的Java类，或者执行一个表达式，还可以像脚本一样把结果保存到变量中</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;myServiceTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Learn Java Service Task&quot;</span> <span class="attr">activiti:class</span>=<span class="string">&quot;me.kafeitu.activiti.JavaServiceDelegate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">activiti:class		实现了 JavaDelegate 或 Activity_Behavior 的 Java 类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;myServiceTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Learn Java Service Task&quot;</span> <span class="attr">activiti:class</span>=<span class="string">&quot;me.kafeitu.activiti.JavaServiceDelegate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">activiti:expression	可以使用UEL定义需要执行的任务内容，例如计算公式、调用Bean对象的方法；并且在执行任务的时候可以使用流程变量作为参数。Bean实例除了可以使用new创建之外，还可以使用 Spring 代理.</span></span><br><span class="line"><span class="comment">其中 leaveService 作为一个流程变量存在，和 activiti:class 一样需要实现 JavaDelegate 接口 或 ActivityBehavior 接口，另外还实现了Java.Serializable 接口以便引擎可以序列化变量</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;myServiceTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Learn Java Service Task&quot;</span> <span class="attr">activiti:expression</span>=<span class="string">&quot;#&#123;leaveService.back()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">activiti:delegateExpression	功能和 activiti:class 类似，而且同样需要实现 JavaDelegate 接口 或 ActivityBehavior 接口,只不过这里不是指定一个具体的实现类，而是运行时动态设置。和 activiti:expression 类似，Bean 可以使用 new 创建，也可以用 spring 代理。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行此任务时引擎会从变量中查询名称为 leaveBackDelegate 的 Bean 对象，然后调用实现接口的方法。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;myServiceTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Learn Java Service Task&quot;</span> <span class="attr">activiti:delegateExpression</span>=<span class="string">&quot;#&#123;leaveBackDelegate&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">activiti:resultVariable	此属性适用于 activiti:expression 类型的 Java Service ，可以把一个表达式的执行结果保存到 resultVariable 指定的变量名称中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">把leaveService.bask() 的执行结果保存到变量 backDate 中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;myServiceTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Learn Java Service Task&quot;</span> <span class="attr">activiti:expression</span>=<span class="string">&quot;#&#123;leaveService.back()&#125;&quot;</span> <span class="attr">activiti:resultVariable</span>=<span class="string">&quot;backDate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Web-Service-任务"><a href="#Web-Service-任务" class="headerlink" title="Web Service 任务"></a>Web Service 任务</h4><p>​    通过 Web Service 任务可以调用外部的 Web Service 资源，完成调用只需要一些必须的配置。并且支持标准的 WebService 和 Rest 风格的 Service。</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;webServiceTasks&quot;</span> <span class="attr">implementation</span>=<span class="string">&quot;##WebService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ioSpecification</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataInput</span> <span class="attr">itemSubjectRef</span>=<span class="string">&quot;tns:prettyPrintCountRequestItem&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataInputOfServiceTask&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataOutput</span> <span class="attr">itemSubjectRef</span>=<span class="string">&quot;tns:prettyPrintCountResponseItem&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataOutputOfServuceTask&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inputSet</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataInputRefs</span>&gt;</span>dataInputOfServiceTask<span class="tag">&lt;/<span class="name">dataInputRefs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inputSet</span>&gt;</span>			</span><br><span class="line">        <span class="tag">&lt;<span class="name">outPutSet</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataOutputRefs</span>&gt;</span>dataOutputOfServiceTask<span class="tag">&lt;/<span class="name">dataOutputRefs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">outPutSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ioSpecification</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataInputAssociation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceRef</span>&gt;</span>PrefixVariable<span class="tag">&lt;/<span class="name">sourceRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetRef</span>&gt;</span>prefix<span class="tag">&lt;/<span class="name">targetRef</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataInputAssociation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataInputAssociation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceRef</span>&gt;</span>SuffixVariable<span class="tag">&lt;/<span class="name">sourceRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetRef</span>&gt;</span>suffix<span class="tag">&lt;/<span class="name">targetRef</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataInputAssociation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataOutputAssociation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceRef</span>&gt;</span>PrettyPrint<span class="tag">&lt;/<span class="name">sourceRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetRef</span>&gt;</span>OutputVariable<span class="tag">&lt;/<span class="name">targetRef</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataOutputAssociation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- web service任务的属性 </span></span><br><span class="line"><span class="comment">	ioSpecification 定义输入，输出参数。dataInputAssociation 中定义了数据输入的关系，dataOutputAssociation中定义了数据输出的关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="业务规则任务"><a href="#业务规则任务" class="headerlink" title="业务规则任务"></a>业务规则任务</h4><p>​    业务逻辑和规则分开维护，一旦规则有变动只需要更改预设规则即可，业务规则任务可以流程变量的值处理预设的业务规则。</p>
<p>​    支持的规则引擎 Drools，只需要把含有业务规则的 流程文件 和 规则引擎文件 “.drl” 一同打包部署到系统中。同时把Drools的jar包添加到classpath即可实现Activiti驱动规则引擎。</p>
<p>​    将业务数据交由规则引擎处理，规则引擎根据不同业务规则（各种条件的判定）计算得出最终结果，最后把结果返回给 <strong>调用者</strong>，在BPMN 2.0 中 调用者为 规则引擎（项目中为Activiti）</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">businessRuleTask</span> <span class="attr">id</span>=<span class="string">&quot;businessRuleTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Business rule task&quot;</span> <span class="attr">activiti:rules</span>=<span class="string">&quot;rule1,rule2&quot;</span> </span></span><br><span class="line"><span class="tag">			<span class="attr">acriviti:ruleVariablesInput</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span> <span class="attr">acriviti:exclude</span>=<span class="string">&quot;flase&quot;</span> <span class="attr">acriviti:resultVariableName</span>=<span class="string">&quot;rulesOutput&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">businessRuleTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 业务规则的属性 :rules</span></span><br><span class="line"><span class="comment">	activiti:rules		在规则文件中 .drl 中定义的规则名称，对个规则用逗号分隔。要执行规则文件中的全部规则，将该属性设置为空即可。	</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">businessRuleTask</span> <span class="attr">id</span>=<span class="string">&quot;businessRuleTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Business rule task&quot;</span> <span class="attr">activiti:rules</span>=<span class="string">&quot;rule1,rule2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">businessRuleTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 业务规则的属性 :ruleVariablesInput</span></span><br><span class="line"><span class="comment">	acriviti:ruleVariablesInput	业务规则执行需要的数据源，使用$&#123;fooVar&#125; 方式定义，多个规则用逗号分割</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">businessRuleTask</span> <span class="attr">id</span>=<span class="string">&quot;businessRuleTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Business rule task&quot;</span> <span class="attr">acriviti:ruleVariablesInput</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">businessRuleTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 业务规则的属性 :resultVariableName</span></span><br><span class="line"><span class="comment">	activiti:resultVariableName	规则执行结果变量，变量的值为 ruleVariablesInput 定义的变量集合 （ArrayList）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">businessRuleTask</span> <span class="attr">id</span>=<span class="string">&quot;businessRuleTasks&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Business rule task&quot;</span> <span class="attr">acriviti:resultVariableName</span>=<span class="string">&quot;rulesOutput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">businessRuleTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 业务规则的属性 :execlude	</span></span><br><span class="line"><span class="comment">	activiti:execlude		用来设置是否排除某些规则（rule），如果值为false，不排除按照acriviti:rules 规则执行；如果设置为 true，则忽略 activiti:rules</span></span><br><span class="line"><span class="comment">	指定的规则，如果设置为false的同事 acriviti:rules 值为空，则不执行任何规则</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h4><p>​    可以通过 Activiti 发送邮件</p>
<p>​    发送邮件需要配置的邮件服务信息到流程引擎中，可以在 acriviti.cfg.xml 定义的引擎属性中设置。</p>
<h5 id="配置邮件服务器的属性"><a href="#配置邮件服务器的属性" class="headerlink" title="配置邮件服务器的属性"></a>配置邮件服务器的属性</h5><ul>
<li>mailServerHost：    不是必填    邮件服务器的主机名，默认为localhost</li>
<li>mailServerPort：  必填，如果没填默认的端口        SMTP通讯端口，默认为25；如果使用SSL，则为465</li>
<li>mailServerDefaultFrom：    不必填    发件人email，如果不设置，默认为 <a href="mailto:&#x61;&#x63;&#114;&#x69;&#x76;&#x69;&#x74;&#105;&#x40;&#x61;&#99;&#114;&#x69;&#118;&#x69;&#116;&#105;&#x2e;&#x6f;&#x72;&#x67;">&#x61;&#x63;&#114;&#x69;&#x76;&#x69;&#x74;&#105;&#x40;&#x61;&#99;&#114;&#x69;&#118;&#x69;&#116;&#105;&#x2e;&#x6f;&#x72;&#x67;</a></li>
<li>mailServerUserName:    邮件服务认证账号，默认为空</li>
<li>mailServerPassword    邮件服务认证密码    </li>
</ul>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;mailTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Mail Task&quot;</span> <span class="attr">activiti:type</span>=<span class="string">&quot;mail&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;to&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;henryyan@gmail.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;yanhonglei@gmail.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;hello henryyan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;charset&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;cc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;$&#123;cc&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;bcc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;$&#123;bcc&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:expression</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      &lt;html&gt;</span><br><span class="line">       你好，我是&lt;b&gt;$&#123;userName&#125;&lt;/b&gt;。</span><br><span class="line">      &lt;/html&gt;</span><br><span class="line">      ]]&gt; <span class="tag">&lt;/<span class="name">activiti:expression</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:field</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;$&#123;text&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activiti:field</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">serviceTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">邮件任务属性</span></span><br><span class="line"><span class="comment">	to	必填	收件人，多个收件人用逗号隔开</span></span><br><span class="line"><span class="comment">	from	邮件发送人地址，如果不设置，使用引擎的 mailServerDefaultFrom 属性指定的发件人</span></span><br><span class="line"><span class="comment">	subject 发件人email，如果不设置，默认为 activiti@acriviti.org</span></span><br><span class="line"><span class="comment">	cc	抄送列表</span></span><br><span class="line"><span class="comment">	bcc	密送列表</span></span><br><span class="line"><span class="comment">	charset	邮件内容字符集</span></span><br><span class="line"><span class="comment">	text	纯文本邮件格式内容</span></span><br><span class="line"><span class="comment">	html	html格式的邮件内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-4网关</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-4%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h4 id="网关分为四种类型"><a href="#网关分为四种类型" class="headerlink" title="网关分为四种类型"></a>网关分为四种类型</h4><ul>
<li>排他网关</li>
<li>并行网关</li>
<li>包容网关</li>
<li>时间网关</li>
</ul>
<hr>
<h4 id="排他网关"><a href="#排他网关" class="headerlink" title="排他网关"></a>排他网关</h4><p>​    在图形界面定义网关条件时  必须加上 ${}</p>
<p>​    当所有的条件都不满足时，排他网关会默认执行 exclusiveGateway 的 default 属性指定的条件顺序流。</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;exclusiveGateway1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Exclusive Gateway&quot;</span> <span class="attr">default</span>=<span class="string">&quot;flow2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">//任务定义</span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;任务一&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;任务二&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;任务三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">//顺序流  开始 -&gt; 网关		</span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startevent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;exclusivegateway1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//顺序流 网关 -&gt; 任务1(条件 type==1)</span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;type==1&#125;&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;exclusiveGateway1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line">			$&#123; TYPE == 1&#125;</span><br><span class="line">			]]&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//顺序流 网关 -&gt; 任务1(条件 type==2)</span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;type==2&#125;&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;exclusiveGateway1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line">			$&#123; TYPE == 2&#125;</span><br><span class="line">			]]&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//顺序流 网关 -&gt; 任务1(条件 type==3)</span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;type==3&#125;&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;exclusiveGateway1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask3&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line">			$&#123; TYPE == 3&#125;</span><br><span class="line">			]]&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="并行网关"><a href="#并行网关" class="headerlink" title="并行网关"></a>并行网关</h4><p>​    并行网关用来对并发的任务进行流程建模，它能把单条线路任务拆分成多个路径并行执行或将多条线路合并。</p>
<p>并行网关的功能取决于输入、输出顺序流    </p>
<p>​    拆分：并行执行所有的输出顺序流，并且为每一条顺序流创建一个并行执行的线路<br>​    合并：所有从并行网关拆分并执行完成的线路均在此等候，直到所有的线路都执行完成才继续向下执行    </p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;fork&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Parallel Gateway Fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>案例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//启动事件</span><br><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Start Event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">//结束事件</span><br><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;endEvent&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my end event&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">//并行网关定义</span><br><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;fork&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Parallel Gateway Fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;join&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Parallel Gateway Join&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//任务定义</span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假申请&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门领导审批&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事审批&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;考勤归档&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//顺序流定义</span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow3&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;fork&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow4&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;fork&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow5&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;join&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow6&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;join&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow7&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;join&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow8&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask4&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;endEvent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">开始 -&gt;请假申请 -&gt; fork网关 =》部门领导审批/人事审批 =》join网关 -&gt;考勤归档 -&gt; 结束</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="包容网关"><a href="#包容网关" class="headerlink" title="包容网关"></a>包容网关</h4><p>​    包容网关融合了排他网关和并行网关的新特性，排他网关允许在每条线路上设置条件，并行网关可以同时执行多条线路，包容网关既可以同时执行多条线路，又允许在网关上设置条件。</p>
<p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;inclusiveGateway1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Inclusive Gateway Fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>案例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//启动事件</span><br><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Start Event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">//结束事件</span><br><span class="line"><span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;endEvent&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my end event&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">//包容网关定义</span><br><span class="line"><span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;isFork&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Inclusive Gateway Fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;isJoin&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Inclusive Gateway Join&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//任务定义</span><br><span class="line">//任务定义</span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假申请&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门领导审批&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事审批&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;usertask4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;考勤归档&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//顺序流定义</span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;isFork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow3&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;需要部门领导审批？&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;isFork&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">$&#123; leader == true&#125;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow4&quot;</span>   <span class="attr">name</span>=<span class="string">&quot;需要人事审批？&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;isFork&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">$&#123; hr == true&#125;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow5&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask2&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;join&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow6&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask3&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;join&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow7&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;join&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;usertask4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">squenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow8&quot;</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;usertask4&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;endEvent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">squenceFlow</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-5子流程</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-5%E5%AD%90%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-6边界事件</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-6%E8%BE%B9%E7%95%8C%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-2顺序流</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-2%E9%A1%BA%E5%BA%8F%E6%B5%81/</url>
    <content><![CDATA[<h4 id="顺序流分为两种类型"><a href="#顺序流分为两种类型" class="headerlink" title="顺序流分为两种类型"></a>顺序流分为两种类型</h4><ul>
<li>标准顺序流</li>
<li>条件顺序流</li>
</ul>
<hr>
<h4 id="标准顺序流"><a href="#标准顺序流" class="headerlink" title="标准顺序流"></a>标准顺序流</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow&quot;</span> <span class="attr">sourceRef</span>=<span class="string">“startEvent”</span> <span class="attr">targetRef</span>=<span class="string">“userTask”</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标准顺序流的属性 </span></span><br><span class="line"><span class="comment">  sequenceFlow：表示一个顺序流</span></span><br><span class="line"><span class="comment">  sourceRef：指的是顺序流的源</span></span><br><span class="line"><span class="comment">  targetRef：指的是顺序流的目的模型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="条件顺序流"><a href="#条件顺序流" class="headerlink" title="条件顺序流"></a>条件顺序流</h4><p>对应XML描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow&quot;</span> <span class="attr">sourceRef</span>=<span class="string">“startEvent”</span> <span class="attr">targetRef</span>=<span class="string">“userTask”</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[$&#123;PASS == true&#125;]]&gt;	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 条件顺序流的属性 </span></span><br><span class="line"><span class="comment">	conditionExpression： 定义一个条件表达式</span></span><br><span class="line"><span class="comment">	xsi:type：指定表达式的类型为 tFormalExpression</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-基础2-7监听器</title>
    <url>/2020/08/12/Activiti-BMP%E8%A7%84%E8%8C%83-7%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-FormService</title>
    <url>/2020/08/12/Activiti-Service-FormService/</url>
    <content><![CDATA[<h4 id="FormService"><a href="#FormService" class="headerlink" title="FormService"></a>FormService</h4><p>​    表单服务，读取和流程、任务相关的表单数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检索呈现表单以启动新流程实例所需的所有数据。</span></span><br><span class="line"><span class="function">StartFormData <span class="title">getStartFormData</span><span class="params">(String processDefinitionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由默认内置表单引擎生成的呈现表单，用于启动新流程实例。</span></span><br><span class="line"><span class="function">Object <span class="title">getRenderedStartForm</span><span class="params">(String processDefinitionId)</span></span>;	</span><br><span class="line"><span class="function">Object <span class="title">getRenderedStartForm</span><span class="params">(String processDefinitionId, String formEngineName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用在启动表单中作为属性输入的用户数据启动新流程实例。</span></span><br><span class="line"><span class="function">ProcessInstance <span class="title">submitStartFormData</span><span class="params">(String processDefinitionId, Map&lt;String, String&gt; properties)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">submitStartFormData</span><span class="params">(String processDefinitionId, String businessKey, Map&lt;String, String&gt; properties)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索呈现表单以完成任务所需的所有数据。</span></span><br><span class="line"><span class="function">TaskFormData <span class="title">getTaskFormData</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由默认内置表单引擎生成的呈现表单，用于完成任务。</span></span><br><span class="line"><span class="function">Object <span class="title">getRenderedTaskForm</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getRenderedTaskForm</span><span class="params">(String taskId, String formEngineName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用在任务表单中作为属性输入的用户数据完成任务。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitTaskFormData</span><span class="params">(String taskId, Map&lt;String, String&gt; properties)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入为属性的数据保存在任务表单中。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveFormData</span><span class="params">(String taskId, Map&lt;String, String&gt; properties)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索用户定义的对开始表单的引用。</span></span><br><span class="line"><span class="function">String <span class="title">getStartFormKey</span><span class="params">(String processDefinitionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索用户定义的对任务表单的引用。</span></span><br><span class="line"><span class="function">String <span class="title">getTaskFormKey</span><span class="params">(String processDefinitionId, String taskDefinitionKey)</span></span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-HistoryService</title>
    <url>/2020/08/12/Activiti-Service-HistoryService/</url>
    <content><![CDATA[<h4 id="HistoryService"><a href="#HistoryService" class="headerlink" title="HistoryService"></a>HistoryService</h4><p>​    历史服务，管理所有历史数据    </p>
<ul>
<li><p>创建查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的编程查询来搜索&#123;@link HistoricProcessInstance&#125;。</span></span><br><span class="line"><span class="function">HistoricProcessInstanceQuery <span class="title">createHistoricProcessInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的编程查询来搜索&#123;@link HistoricActivityInstance&#125;。</span></span><br><span class="line"><span class="function">HistoricActivityInstanceQuery <span class="title">createHistoricActivityInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的编程查询来搜索&#123;@link HistoricTaskInstance&#125;。</span></span><br><span class="line"><span class="function">HistoricTaskInstanceQuery <span class="title">createHistoricTaskInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的编程查询来搜索&#123;@link HistoricDetail&#125;。</span></span><br><span class="line"><span class="function">HistoricDetailQuery <span class="title">createHistoricDetailQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个新的&#123;@link org. engine.query.NativeQuery &#125;过程定义。。</span></span><br><span class="line"><span class="function">NativeHistoricDetailQuery <span class="title">createNativeHistoricDetailQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的编程查询来搜索&#123;@link HistoricVariableInstance&#125;。</span></span><br><span class="line"><span class="function">HistoricVariableInstanceQuery <span class="title">createHistoricVariableInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个新的&#123;@link org. engine.query.NativeQuery &#125;过程定义。</span></span><br><span class="line"><span class="function">NativeHistoricVariableInstanceQuery <span class="title">createNativeHistoricVariableInstanceQuery</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除历史任务实例。这对于那些动态创建的&#123;@link TaskService#newTask() dynamically created&#125;和&#123;@link TaskService#complete(String) completed&#125;的任务很有用。如果历史任务实例不存在，则不会抛出异常，方法返回正常。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteHistoricTaskInstance</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除历史流程实例。</span></span><br><span class="line">所有历史活动、历史任务和历史细节(变量更新、表单属性)也会被删除。</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteHistoricProcessInstance</span><span class="params">(String processInstanceId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>创建原生查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个原生查询，以通过SQL搜索&#123;@link HistoricProcessInstance&#125;。</span></span><br><span class="line"><span class="function">NativeHistoricProcessInstanceQuery <span class="title">createNativeHistoricProcessInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个原生查询，以通过SQL搜索&#123;@link HistoricTaskInstance&#125;。</span></span><br><span class="line"><span class="function">NativeHistoricTaskInstanceQuery <span class="title">createNativeHistoricTaskInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个原生查询，以通过SQL搜索&#123;@link HistoricActivityInstance&#125;</span></span><br><span class="line"><span class="function">NativeHistoricActivityInstanceQuery <span class="title">createNativeHistoricActivityInstanceQuery</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>检索</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检索与给定任务相关联的&#123;@link histordentitylink&#125;。这样的&#123;@link IdentityLink&#125;通知了一个特定的标识(如组或用户)与某个任务相关联(如作为候选人、受让人等)，即使任务已经完成，而不是只存在于活动任务的&#123;@link IdentityLink&#125;。</span></span><br><span class="line"><span class="function">List&lt;HistoricIdentityLink&gt; <span class="title">getHistoricIdentityLinksForTask</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索与给定流程实例相关联的&#123;@link histordentitylink&#125;。这样的&#123;@link IdentityLink&#125;通知了一个特定的标识(如组或用户)与某个流程实例相关联，即使该实例已完成，而不是只存在于活动实例的&#123;@link IdentityLink&#125;。</span></span><br><span class="line"><span class="function">List&lt;HistoricIdentityLink&gt; <span class="title">getHistoricIdentityLinksForProcessInstance</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许为一个流程实例检索&#123;@link ProcessInstanceHistoryLog&#125;。</span></span><br><span class="line"><span class="function">ProcessInstanceHistoryLogQuery <span class="title">createProcessInstanceHistoryLogQuery</span><span class="params">(String processInstanceId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-IdentityService</title>
    <url>/2020/08/12/Activiti-Service-IdentityService/</url>
    <content><![CDATA[<h4 id="IdentityService"><a href="#IdentityService" class="headerlink" title="IdentityService"></a>IdentityService</h4><p>​    身份服务，管理用户、组及其关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定用户id创建一个用户</span></span><br><span class="line"><span class="function">User <span class="title">newUser</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存新创建的用户</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询用户</span></span><br><span class="line"><span class="comment">/*	</span></span><br><span class="line"><span class="comment">		identityService.createUserQuery()			//返回用户查询</span></span><br><span class="line"><span class="comment">		        .userId(String var1)					//根据用户编号查询</span></span><br><span class="line"><span class="comment">		        .userFirstName(String var1)			//用户名称查询</span></span><br><span class="line"><span class="comment">		        .userFirstNameLike(String var1)			//用户名称模糊查询</span></span><br><span class="line"><span class="comment">		        .userLastName(String var1)			//用户姓氏查询</span></span><br><span class="line"><span class="comment">		        .userLastNameLike(String var1)			//用户姓氏模糊查询</span></span><br><span class="line"><span class="comment">		        .userFullNameLike(String var1)			//用户全名模糊查询</span></span><br><span class="line"><span class="comment">		        .userEmail(String var1)				//用户邮箱查询</span></span><br><span class="line"><span class="comment">		        .userEmailLike(String var1)			//用户邮箱模糊查询</span></span><br><span class="line"><span class="comment">		        .memberOfGroup(String var1)			//根据用户组查询用户</span></span><br><span class="line"><span class="comment">		        .potentialStarter(String var1)			//</span></span><br><span class="line"><span class="comment">		        .orderByUserId()					//根据用户编号排序</span></span><br><span class="line"><span class="comment">		        .orderByUserFirstName()				//根据用户名称排序</span></span><br><span class="line"><span class="comment">		        .orderByUserLastName()				//根据用户姓氏排序</span></span><br><span class="line"><span class="comment">		        .orderByUserEmail()				//根据用户邮箱排序</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="function">UserQuery <span class="title">createUserQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		可以自定义查询语句</span></span><br><span class="line"><span class="comment">		.sql(&quot;select * from ACT_ID_USER&quot;) 只能映射ACT_ID_USER的数据，返回结果集无法映射其他查询</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="function">NativeUserQuery <span class="title">createNativeUserQuery</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="comment">//创建用户组</span></span><br><span class="line"><span class="function">Group <span class="title">newGroup</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="comment">//创建用户组查询</span></span><br><span class="line"><span class="function">GroupQuery <span class="title">createGroupQuery</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		可以自定义查询语句</span></span><br><span class="line"><span class="comment">		.sql(&quot;select * from ACT_ID_GROUP&quot;) 只能映射 ACT_ID_GROUP 的数据，返回结果集无法映射其他查询</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="function">NativeGroupQuery <span class="title">createNativeGroupQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveGroup</span><span class="params">(Group var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除用户组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteGroup</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建用户和用户组关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMembership</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除用户和用户组关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteMembership</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证用户密码</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkPassword</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户的id</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAuthenticatedUserId</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为用户设置图片，头像</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setUserPicture</span><span class="params">(String var1, Picture var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户头像</span></span><br><span class="line"><span class="function">Picture <span class="title">getUserPicture</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setUserInfo</span><span class="params">(String var1, String var2, String var3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"><span class="function">String <span class="title">getUserInfo</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过userId获取用户拓展信息</span></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getUserInfoKeys</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除用户自定义信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteUserInfo</span><span class="params">(String var1, String var2)</span></span>;</span><br></pre></td></tr></table></figure>



<p>案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUserAndGroupMemership</span><span class="params">()</span></span>&#123;</span><br><span class="line">   IdentityService identityService = activitiRule.getIdentityService();</span><br><span class="line">   <span class="comment">//删除用户和组关联</span></span><br><span class="line">   identityService.deleteMembership(<span class="string">&quot;henryyan&quot;</span>,<span class="string">&quot;deptLeader&quot;</span>);</span><br><span class="line">   <span class="comment">//删除组</span></span><br><span class="line">   identityService.deleteGroup(<span class="string">&quot;deptLeader&quot;</span>);</span><br><span class="line">   <span class="comment">//删除用户</span></span><br><span class="line">   identityService.deleteUser(<span class="string">&quot;henryyan&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userAndGroupMemership</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   <span class="comment">//获取IdentityService</span></span><br><span class="line">   IdentityService identityService = activitiRule.getIdentityService();</span><br><span class="line">   <span class="comment">//创建组</span></span><br><span class="line">   Group group = identityService.newGroup(<span class="string">&quot;deptLeader&quot;</span>);</span><br><span class="line">   group.setName(<span class="string">&quot;部门领导&quot;</span>);</span><br><span class="line">   group.setType(<span class="string">&quot;assignment&quot;</span>);</span><br><span class="line">   <span class="comment">//保存组</span></span><br><span class="line">   identityService.saveGroup(group);</span><br><span class="line">   <span class="comment">//创建用户</span></span><br><span class="line">   User user = identityService.newUser(<span class="string">&quot;henryyan&quot;</span>);</span><br><span class="line">   user.setFirstName(<span class="string">&quot;Henry&quot;</span>);</span><br><span class="line">   user.setLastName(<span class="string">&quot;Yan&quot;</span>);</span><br><span class="line">   user.setEmail(<span class="string">&quot;henryyan@qq.com&quot;</span>);</span><br><span class="line">   <span class="comment">//保存用户</span></span><br><span class="line">   identityService.saveUser(user);</span><br><span class="line">   <span class="comment">//用户和组建立关联</span></span><br><span class="line">   identityService.createMembership(<span class="string">&quot;henryyan&quot;</span>,<span class="string">&quot;deptLeader&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-ManagementService</title>
    <url>/2020/08/12/Activiti-Service-ManagementService/</url>
    <content><![CDATA[<h4 id="ManagementService"><a href="#ManagementService" class="headerlink" title="ManagementService"></a>ManagementService</h4><p>​    引擎管理服务，和具体业务无关，管理引擎。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取包含了Activiti数据库模式的&#123;表名、行计数&#125;项的映射。</span></span><br><span class="line"><span class="function">Map&lt;String, Long&gt; <span class="title">getTableCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取诸如任务、执行之类的Activiti实体的表名(包括任何已配置的前缀)。</span></span><br><span class="line"><span class="function">String <span class="title">getTableName</span><span class="params">(Class&lt;?&gt; activitiEntityClass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个表的元数据(列名称、列类型等)。当没有表存在时，返回null。</span></span><br><span class="line"><span class="function">TableMetaData <span class="title">getTableMetaData</span><span class="params">(String tableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个&#123;@link TablePageQuery&#125;，可以用来获取包含表行数据的特定部分的&#123;@link TablePage&#125;。</span></span><br><span class="line"><span class="function">TablePageQuery <span class="title">createTablePageQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个新的JobQuery实现，该实现可用于动态查询作业。</span></span><br><span class="line"><span class="function">JobQuery <span class="title">createJobQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制同步执行某项工作(如:对于管理或测试)工作将被执行，即使流程定义和/或流程实例处于挂起状态。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeJob</span><span class="params">(String jobId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用提供的id删除作业。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteJob</span><span class="params">(String jobId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置工作已经离开的重试次数。每当JobExecutor无法执行任务时，这个值就会递减。当它达到零的时候，工作应该是死的，而不是重试。在这种情况下，这种方法可以用来增加重试次数。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setJobRetries</span><span class="params">(String jobId, <span class="keyword">int</span> retries)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回在最后执行给定id的作业时发生的异常的完整堆栈跟踪。当作业没有异常堆栈跟踪时返回null。</span></span><br><span class="line"><span class="function">String <span class="title">getJobExceptionStacktrace</span><span class="params">(String jobId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性列表。</span></span><br><span class="line"><span class="function">Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对给定连接的编程模式更新，返回关于所发生事件的反馈。</span></span><br><span class="line"><span class="function">String <span class="title">databaseSchemaUpgrade</span><span class="params">(Connection connection, String catalog, String schema)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用默认的&#123;@link CommandConfig&#125;执行给定的命令。</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">executeCommand</span><span class="params">(Command&lt;T&gt; command)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指定的&#123;@link CommandConfig&#125;执行给定的命令。</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">executeCommand</span><span class="params">(CommandConfig config, Command&lt;T&gt; command)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行&#123;@link CustomSqlExecution&#125;参数中包含的sql。</span></span><br><span class="line">&lt;MapperType, ResultType&gt; <span class="function">ResultType <span class="title">executeCustomSql</span><span class="params">(CustomSqlExecution&lt;MapperType, ResultType&gt; customSqlExecution)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回事件日志条目的列表，描述引擎处理的所有内容。注意，必须在流程引擎配置中特别启用事件日志记录。</span></span><br><span class="line"><span class="function">List&lt;EventLogEntry&gt; <span class="title">getEventLogEntries</span><span class="params">(Long startLogNr, Long pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回特定流程实例id的事件日志条目列表。注意，必须在流程引擎配置中特别启用事件日志记录。</span></span><br><span class="line"><span class="function">List&lt;EventLogEntry&gt; <span class="title">getEventLogEntriesByProcessInstanceId</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除EventLogEntry。通常只在测试中使用，因为删除日志条目会破坏保持日志的全部目的。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteEventLogEntry</span><span class="params">(<span class="keyword">long</span> logNr)</span></span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-RepositoryService</title>
    <url>/2020/08/12/Activiti-Service-RepositoryService/</url>
    <content><![CDATA[<h4 id="RepositoryService"><a href="#RepositoryService" class="headerlink" title="RepositoryService"></a>RepositoryService</h4><p>作用：流程仓库服务，管理流程仓库，比如部署、删除、读取流程资源</p>
<ul>
<li><p>创建部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">DeploymentBuilder <span class="title">createDeployment</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>删除部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除给定部署</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteDeployment</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将给定的部署和级联删除删除到流程实例、历史流程实例和作业</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteDeploymentCascade</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  将给定的部署和级联删除删除到流程实例、历史流程实例和作业</span></span><br><span class="line"><span class="comment">  var1：deploymentId</span></span><br><span class="line"><span class="comment">  var2：cascade</span></span><br><span class="line"><span class="comment">*/</span>		</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteDeployment</span><span class="params">(String var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>设置部署    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  设置部署类别</span></span><br><span class="line"><span class="comment">  可以按类别查询部署；</span></span><br><span class="line"><span class="comment">  var1：deploymentId</span></span><br><span class="line"><span class="comment">  var2：category</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDeploymentCategory</span><span class="params">(String var1, String var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>获取部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检索给定部署的部署资源列表，按字母顺序排列</span></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getDeploymentResourceNames</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过一个字节流提供对部署资源的访问。</span></span><br><span class="line"><span class="comment">// var1：deploymentId     var2：resourceName</span></span><br><span class="line"><span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实验功能</span></span><br><span class="line"><span class="comment">// 更改部署的租户标识符，以匹配给定的租户标识符。</span></span><br><span class="line"><span class="comment">// 这一变化将波及任何相关实体:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeDeploymentTenantId</span><span class="params">(String var1, String var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询过程定义	</span></span><br><span class="line"><span class="function">ProcessDefinitionQuery <span class="title">createProcessDefinitionQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为流程定义返回一个新的  org.activiti.engine.query.NativeQuery</span></span><br><span class="line"><span class="function">NativeProcessDefinitionQuery <span class="title">createNativeProcessDefinitionQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询部署。</span></span><br><span class="line"><span class="function">DeploymentQuery <span class="title">createDeploymentQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个新的部署  org.activiti.engine.query.NativeQuery</span></span><br><span class="line"><span class="function">NativeDeploymentQuery <span class="title">createNativeDeploymentQuery</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>暂停流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用给定Id暂停流程定义	</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessDefinitionById</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为给定id暂停流程定义</span></span><br><span class="line"><span class="comment">// var1：processDefinitionId	var2：suspendProcessInstances 	var3：suspensionDate</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessDefinitionById</span><span class="params">(String var1, <span class="keyword">boolean</span> var2, Date var3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的键(= id in the bpmn20.xml file)挂起所有的进程定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessDefinitionByKey</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的键(= id in the bpmn20.xml file)挂起所有的进程定义</span></span><br><span class="line"><span class="comment">// var1: processDefinitionKey	var1：suspendProcessInstances	var3：suspensionDate</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessDefinitionByKey</span><span class="params">(String var1, <span class="keyword">boolean</span> var2, Date var3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只适用于给定的租户标识符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessDefinitionByKey</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只适用于给定的租户标识符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessDefinitionByKey</span><span class="params">(String var1, <span class="keyword">boolean</span> var2, Date var3, String var4)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>激活流程    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用给定的id激活流程定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessDefinitionById</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的id激活流程定义。</span></span><br><span class="line"><span class="comment">// var1: processDefinitionId	var2：activateProcessInstances	var3：activationDate</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessDefinitionById</span><span class="params">(String var1, <span class="keyword">boolean</span> var2, Date var3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的key(=id in the bpmn20.xml file)激活流程定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessDefinitionByKey</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的key(=id in the bpmn20.xml file)激活流程定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessDefinitionByKey</span><span class="params">(String var1, <span class="keyword">boolean</span> var2, Date var3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessDefinitionByKey</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessDefinitionByKey</span><span class="params">(String var1, <span class="keyword">boolean</span> var2, Date var3, String var4)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>设置流程定义类别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置流程定义的类别。</span></span><br><span class="line"><span class="comment">// 流程定义可以查询类别:看到&#123; @link ProcessDefinitionQuery #processDefinitionCategory(String)&#125;。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setProcessDefinitionCategory</span><span class="params">(String var1, String var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>访问已部署流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提供对已部署过程模型的访问，例如，一个BPMN 2.0 XML文件，通过一个字节流。</span></span><br><span class="line"><span class="function">InputStream <span class="title">getProcessModel</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供对已部署流程图的访问，例如PNG图像，通过一个字节流。</span></span><br><span class="line"><span class="function">InputStream <span class="title">getProcessDiagram</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回&#123;@link ProcessDefinition&#125;，包括所有BPMN信息，如附加属性(如文档)。</span></span><br><span class="line"><span class="function">ProcessDefinition <span class="title">getProcessDefinition</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用提供的流程定义id返回与流程定义对应的&#123;@link BpmnModel&#125;。</span></span><br><span class="line"><span class="function">BpmnModel <span class="title">getBpmnModel</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>检测流程状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查流程定义是否被挂起。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isProcessDefinitionSuspended</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在流程关系图中提供元素的位置和维度，如&#123;@link RepositoryService#getProcessDiagram(String)&#125;所提供的</span></span><br><span class="line"><span class="function">DiagramLayout <span class="title">getProcessDiagramLayout</span><span class="params">(String var1)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>模型的增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的model，他的模型是暂时的，必须使用&#123;@link #saveModel(模型)&#125;来保存。</span></span><br><span class="line"><span class="function">Model <span class="title">newModel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存模型。</span></span><br><span class="line"><span class="comment">// 如果模型已经存在，那么模型就会被更新，否则就会创建一个新的模型。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveModel</span><span class="params">(Model var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除model</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteModel</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为模型保存模型编辑器源。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addModelEditorSource</span><span class="params">(String var1, <span class="keyword">byte</span>[] var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为模型保存模型编辑器源。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addModelEditorSourceExtra</span><span class="params">(String var1, <span class="keyword">byte</span>[] var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建查询模型</span></span><br><span class="line"><span class="function">ModelQuery <span class="title">createModelQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为流程定义返回一个新 org.activiti.engine.query.NativeQuery</span></span><br><span class="line"><span class="function">NativeModelQuery <span class="title">createNativeModelQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询Model</span></span><br><span class="line"><span class="function">Model <span class="title">getModel</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以字节数组的形式返回模型编辑器源。</span></span><br><span class="line"><span class="keyword">byte</span>[] getModelEditorSource(String var1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以字节数组的形式返回模型编辑器源。</span></span><br><span class="line"><span class="keyword">byte</span>[] getModelEditorSourceExtra(String var1);</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>授权用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权候选用户进行流程定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCandidateStarterUser</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//授权候选用户组进行流程定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCandidateStarterGroup</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除候选用户对流程定义的授权。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCandidateStarterUser</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除候选用户组对流程定义的授权。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCandidateStarterGroup</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">检索与给定进程定义关联的&#123;@link IdentityLink&#125;。</span></span><br><span class="line"><span class="comment">这样的&#123;@link IdentityLink&#125;通知了一个特定的标识(如。</span></span><br><span class="line"><span class="comment">组或用户)被授权用于特定的流程定义。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;IdentityLink&gt; <span class="title">getIdentityLinksForProcessDefinition</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据对Activiti引擎执行流程定义的规则，验证给定的流程定义。</span></span><br><span class="line"><span class="function">List&lt;ValidationError&gt; <span class="title">validateProcess</span><span class="params">(BpmnModel var1)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-RuntimeService</title>
    <url>/2020/08/12/Activiti-Service-RuntimeService/</url>
    <content><![CDATA[<h4 id="RuntimeService"><a href="#RuntimeService" class="headerlink" title="RuntimeService"></a>RuntimeService</h4><p>运行服务，处理所有正在运行态的流程实例、任务等。</p>
<ul>
<li><p>启动流程实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用给定的键在流程定义的最新版本中启动一个新的流程实例。</span></span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey, String businessKey)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey, Map&lt;String, Object&gt; variables)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey, String businessKey, Map&lt;String, Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于&#123; @link # startProcessInstanceByKey(String)&#125;,但是使用一个特定的租户标识符。</span></span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKeyAndTenantId</span><span class="params">(String processDefinitionKey, String tenantId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKeyAndTenantId</span><span class="params">(String processDefinitionKey, String businessKey, String tenantId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKeyAndTenantId</span><span class="params">(String processDefinitionKey, Map&lt;String, Object&gt; variables, String tenantId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByKeyAndTenantId</span><span class="params">(String processDefinitionKey, String businessKey, Map&lt;String, Object&gt; variables, String tenantId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用给定的id在流程定义的精确指定版本中启动一个新的流程实例。</span></span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceById</span><span class="params">(String processDefinitionId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceById</span><span class="params">(String processDefinitionId, String businessKey)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceById</span><span class="params">(String processDefinitionId, Map&lt;String, Object&gt; variables)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceById</span><span class="params">(String processDefinitionId, String businessKey, Map&lt;String, Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示接收到消息的流程引擎并启动一个新的&#123;@link ProcessInstance&#125;。</span></span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessage</span><span class="params">(String messageName)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessage</span><span class="params">(String messageName, String businessKey)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessage</span><span class="params">(String messageName, Map&lt;String, Object&gt; processVariables)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessage</span><span class="params">(String messageName, String businessKey, Map&lt;String, Object&gt; processVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于&#123; @link RuntimeService # startProcessInstanceByMessage(String)&#125;,但是有租户上下文。</span></span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessageAndTenantId</span><span class="params">(String messageName, String tenantId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessageAndTenantId</span><span class="params">(String messageName, String businessKey, String tenantId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessageAndTenantId</span><span class="params">(String messageName, Map&lt;String, Object&gt; processVariables, String tenantId)</span></span>;</span><br><span class="line"><span class="function">ProcessInstance <span class="title">startProcessInstanceByMessageAndTenantId</span><span class="params">(String messageName, String businessKey, Map&lt;String, Object&gt; processVariables, String tenantId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>删除流程实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除现有的运行时流程实例。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteProcessInstance</span><span class="params">(String processInstanceId, String deleteReason)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>查找活动id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找在活动中等待的所有执行的活动id。</span></span><br><span class="line"><span class="comment">// 这是一个列表，因为单个活动可以多次活动。</span></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getActiveActivityIds</span><span class="params">(String executionId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>添加外部触发器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将一个外部触发器发送到正在执行的活动实例中。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(String executionId, Map&lt;String, Object&gt; processVariables)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>更新业务秘钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新提供的流程实例的业务密钥。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBusinessKey</span><span class="params">(String processInstanceId, String businessKey)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>用户（用户组）的链接标识操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 涉及一个具有流程实例的用户。</span></span><br><span class="line"><span class="comment">// 身份链接的类型由给定的身份链接类型定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUserIdentityLink</span><span class="params">(String processInstanceId, String userId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 涉及一个具有流程实例的用户组。</span></span><br><span class="line"><span class="comment">// 身份链接的类型由给定的身份链接类型定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addGroupIdentityLink</span><span class="params">(String processInstanceId, String groupId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #addUserIdentityLink(String、String、String)&#125;的便利简写;有一个类型&#123; @link IdentityLinkType #候选人&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addParticipantUser</span><span class="params">(String processInstanceId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #addGroupIdentityLink(String, String, String)&#125;的遍历简写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addParticipantGroup</span><span class="params">(String processInstanceId, String groupId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #deleteUserIdentityLink(String, String, String)&#125;的遍历简写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteParticipantUser</span><span class="params">(String processInstanceId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #deleteGroupIdentityLink(String, String, String)&#125;的遍历简写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteParticipantGroup</span><span class="params">(String processInstanceId, String groupId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户与给定身份链接类型的流程实例之间的关联。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteUserIdentityLink</span><span class="params">(String processInstanceId, String userId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个组与给定的标识链接类型的流程实例之间的关联。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteGroupIdentityLink</span><span class="params">(String processInstanceId, String groupId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索与给定流程实例关联的&#123;@link IdentityLink&#125;。</span></span><br><span class="line">这样的&#123;<span class="meta">@link</span> IdentityLink&#125;通知某个用户是如何参与流程实例的。</span><br><span class="line"><span class="function">List&lt;IdentityLink&gt; <span class="title">getIdentityLinksForProcessInstance</span><span class="params">(String instanceId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>获取变量（所有变量（包含父范围的4个，不包含父范围的3个），给定变量（包含父范围的3个，不包含父范围的3个）单个变量（3个）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从给定的执行范围(包括父范围)可见的所有变量。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariables</span><span class="params">(String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从给定的执行范围(包括父范围)可见的所有变量。</span></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstances</span><span class="params">(String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从给定的执行范围(包括父范围)可见的所有变量。</span></span><br><span class="line"><span class="function">List&lt;VariableInstance&gt; <span class="title">getVariableInstancesByExecutionIds</span><span class="params">(Set&lt;String&gt; executionIds)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从给定的执行范围(包括父范围)可见的所有变量。</span></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstances</span><span class="params">(String executionId, String locale, <span class="keyword">boolean</span> withLocalizationFallback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行范围内定义的所有变量值，不考虑外部作用域。</span></span><br><span class="line"><span class="comment">// 如果您有许多任务局部变量，而且只需要一些，请考虑使用&#123;@link #getVariablesLocal(String, Collection)&#125;来获得更好的性能。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariablesLocal</span><span class="params">(String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行范围内定义的所有变量值，不考虑外部作用域。</span></span><br><span class="line"><span class="comment">// 如果您有许多任务局部变量,你只需要一些,考虑使用&#123; @link # getVariableInstancesLocal(String, Collection)&#125;获得更好的性能。</span></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstancesLocal</span><span class="params">(String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstancesLocal</span><span class="params">(String executionId, String locale, <span class="keyword">boolean</span> withLocalizationFallback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有给定变量的变量值，将所有变量都考虑在内，从给定的执行范围(包括父作用域)可以看到。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariables</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有给定变量的变量值，将所有变量都考虑在内，从给定的执行范围(包括父作用域)可以看到。</span></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstances</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有给定变量的变量值，将所有变量都考虑在内，从给定的执行范围(包括父作用域)可以看到。</span></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstances</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames, String locale, <span class="keyword">boolean</span> withLocalizationFallback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定变量的变量值只考虑给定的执行范围，而不考虑外部作用域。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariablesLocal</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定变量的变量值只考虑给定的执行范围，而不考虑外部作用域。</span></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstancesLocal</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Map&lt;String, VariableInstance&gt; <span class="title">getVariableInstancesLocal</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames, String locale, <span class="keyword">boolean</span> withLocalizationFallback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量的值。</span></span><br><span class="line"><span class="function">VariableInstance <span class="title">getVariableInstance</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量的值。</span></span><br><span class="line">搜索变量是在给定的执行(包括父范围)可见的所有范围内完成的。</span><br><span class="line">当在给定的名称或值设置为<span class="keyword">null</span>时，没有发现变量值，返回<span class="keyword">null</span>。</span><br><span class="line"><span class="function">Object <span class="title">getVariable</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出ClassCastException时，不能将变量转换为给定的类。</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getVariable</span><span class="params">(String executionId, String variableName, Class&lt;T&gt; variableClass)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>检测变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查该执行是否具有给定名称的变量集，在给定的执行(包括父作用域)可见的所有范围内搜索该变量。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasVariable</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查这个执行是否有一个带有给定名称的本地变量集。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasVariableLocal</span><span class="params">(String executionId, String variableName)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>获取执行的变量值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当变量为执行设置(而不是搜索父范围)时返回值。</span></span><br><span class="line"><span class="comment">// 当在给定的名称或值设置为null时，没有发现变量值，返回null。</span></span><br><span class="line"><span class="function">Object <span class="title">getVariableLocal</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">VariableInstance <span class="title">getVariableInstanceLocal</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">VariableInstance <span class="title">getVariableInstanceLocal</span><span class="params">(String executionId, String variableName, String locale, <span class="keyword">boolean</span> withLocalizationFallback)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getVariableLocal</span><span class="params">(String executionId, String variableName, Class&lt;T&gt; variableClass)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>变量更新创建（有更新，无创建）4个 删除4个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariable</span><span class="params">(String executionId, String variableName, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为执行更新或创建一个变量(不考虑父范围)。</span></span><br><span class="line"><span class="comment">// 如果变量不是已经存在，那么它将在给定的执行中创建。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariableLocal</span><span class="params">(String executionId, String variableName, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为执行(包括父范围)更新或创建给定的变量。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariables</span><span class="params">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为执行更新或创建给定的变量(不考虑父范围)。</span></span><br><span class="line"><span class="comment">// 如果变量不是已经存在的，那么它将在给定的执行中创建。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariablesLocal</span><span class="params">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为执行移除一个变量。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariable</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为执行移除一个变量。（不考虑父范围）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariableLocal</span><span class="params">(String executionId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariables</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariablesLocal</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>创建执行查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的&#123;@link ExecutionQuery&#125;实例，该实例可以用于查询执行和流程实例。</span></span><br><span class="line"><span class="function">ExecutionQuery <span class="title">createExecutionQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的&#123;@link NativeExecutionQuery&#125;，可以直接通过SQL查询&#123;@link Execution&#125;。</span></span><br><span class="line"><span class="function">NativeExecutionQuery <span class="title">createNativeExecutionQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的&#123;@link ProcessInstanceQuery&#125;实例，该实例可以用于查询流程实例。</span></span><br><span class="line"><span class="function">ProcessInstanceQuery <span class="title">createProcessInstanceQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的&#123;@link NativeProcessInstanceQuery &#125; &#123;@link ProcessInstance &#125;年代直接通过SQL查询</span></span><br><span class="line"><span class="function">NativeProcessInstanceQuery <span class="title">createNativeProcessInstanceQuery</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>流程实例（挂起1个，激活1个，通知11个）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用给定的id挂起流程实例。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspendProcessInstanceById</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的id激活流程实例。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateProcessInstanceById</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知流程引擎，接收到一个名为“signalName”的信号事件。</span></span><br><span class="line"><span class="comment">// 该方法将信号传递给等待信号的所有执行。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceived</span><span class="params">(String signalName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上 但有租户的上下文。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceivedWithTenantId</span><span class="params">(String signalName, String tenantId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知流程引擎，接收到一个名为“signalName”的信号事件。</span></span><br><span class="line"><span class="comment">// 该方法将信号传递给等待信号的所有执行。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceivedAsync</span><span class="params">(String signalName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上 但有租户的上下文。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceivedAsyncWithTenantId</span><span class="params">(String signalName, String tenantId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知流程引擎，接收到一个名为“signalName”的信号事件。</span></span><br><span class="line"><span class="comment">// 该方法将信号传递给等待信号的所有执行。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceived</span><span class="params">(String signalName, Map&lt;String, Object&gt; processVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上 但有租户的上下文。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceivedWithTenantId</span><span class="params">(String signalName, Map&lt;String, Object&gt; processVariables, String tenantId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知流程引擎，接收到一个名为“signalName”的信号事件。</span></span><br><span class="line"><span class="comment">// 该方法将信号传递给单个执行，即由“executionId”引用的执行。</span></span><br><span class="line"><span class="comment">// 等待执行被同步通知。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceived</span><span class="params">(String signalName, String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceived</span><span class="params">(String signalName, String executionId, Map&lt;String, Object&gt; processVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同上（异步）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signalEventReceivedAsync</span><span class="params">(String signalName, String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知流程引擎，接收到名为“messageName”的消息事件，并与id“executionId”执行关联。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">messageEventReceived</span><span class="params">(String messageName, String executionId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">messageEventReceived</span><span class="params">(String messageName, String executionId, Map&lt;String, Object&gt; processVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上异步</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">messageEventReceivedAsync</span><span class="params">(String messageName, String executionId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>监听器（添加2个，移除1个，分派1个）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个事件监听器，它将被分派器通知所有事件。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEventListener</span><span class="params">(ActivitiEventListener listenerToAdd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个事件监听器，它只会在事件发生时被通知，该事件类型在给定类型中。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEventListener</span><span class="params">(ActivitiEventListener listenerToAdd, ActivitiEventType... types)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从这个分派器中移除给定的侦听器。</span></span><br><span class="line"><span class="comment">// 侦听器将不再被通知，无论它在第一个位置注册的类型是什么。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeEventListener</span><span class="params">(ActivitiEventListener listenerToRemove)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将给定事件分派给注册的任何侦听器。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(ActivitiEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的id设置流程实例的名称。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setProcessInstanceName</span><span class="params">(String processInstanceId, String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有与给定流程实例相关的事件。</span></span><br><span class="line"><span class="function">List&lt;Event&gt; <span class="title">getProcessInstanceEvents</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个ProcessInstanceBuilder</span></span><br><span class="line"><span class="function">ProcessInstanceBuilder <span class="title">createProcessInstanceBuilder</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti-Service-TaskService</title>
    <url>/2020/08/12/Activiti-Service-TaskService/</url>
    <content><![CDATA[<h4 id="TaskService"><a href="#TaskService" class="headerlink" title="TaskService"></a>TaskService</h4><p>​    任务服务，管理（签收、办理、指派等）、查询任务。</p>
<ul>
<li><p>创建任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建与任何流程实例无关的新任务。</span></span><br><span class="line"><span class="function">Task <span class="title">newTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用用户定义的任务id创建一个新任务。</span></span><br><span class="line"><span class="function">Task <span class="title">newTask</span><span class="params">(String taskId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>存任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将给定的任务保存到持久数据存储中。</span></span><br><span class="line"><span class="comment">// 如果这个任务已经存在于持久化存储中，那么它将被更新。</span></span><br><span class="line"><span class="comment">// 在保存了新任务之后，传递给该方法的任务实例将使用新创建的任务的id进行更新。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveTask</span><span class="params">(Task task)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>删除任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除给定的任务，而不是删除与此任务相关的历史信息。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定的任务。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">(String taskId, <span class="keyword">boolean</span> cascade)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">(String taskId, String deleteReason)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定集合的所有任务，而不是删除与这些任务相关的历史信息。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTasks</span><span class="params">(Collection&lt;String&gt; taskIds)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定集合的所有任务	</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTasks</span><span class="params">(Collection&lt;String&gt; taskIds, <span class="keyword">boolean</span> cascade)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTasks</span><span class="params">(Collection&lt;String&gt; taskIds, String deleteReason)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>任务操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明对任务的责任:给定的用户被指定为任务的受让人。</span></span><br><span class="line"><span class="comment">// 不检查用户是否被标识组件所知。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">claim</span><span class="params">(String taskId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了取消任务，使用null用户的&#123;@link #claim&#125;的快捷方式。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unclaim</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当任务成功执行时调用。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将任务委托给另一个用户。</span></span><br><span class="line"><span class="comment">// 这意味着设置了assignee并将委派状态设置为&#123;@link委派状态#PENDING&#125;。</span></span><br><span class="line"><span class="comment">// 如果没有设置所有者，则所有者将被设置为任务的当前受让人。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delegateTask</span><span class="params">(String taskId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标志着受让人完成了这项任务，并可以将其发回给所有者。</span></span><br><span class="line"><span class="comment">// 只有当这个任务是&#123;@link DelegationState#PENDING&#125;委托时才能调用。</span></span><br><span class="line"><span class="comment">// 在此方法返回后，&#123;@link Task# getdelegate state()将被设置为&#123;@link DelegationState#RESOLVED&#125;。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resolveTask</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标志着受让人完成了这项任务，提供了所需的变量，并且可以将其发回给所有者。</span></span><br><span class="line"><span class="comment">// // 只有当这个任务是&#123;@link DelegationState#PENDING&#125;委托时才能调用。</span></span><br><span class="line"><span class="comment">// 在此方法返回后，&#123;@link Task# getdelegate state()将被设置为&#123;@link DelegationState#RESOLVED&#125;。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resolveTask</span><span class="params">(String taskId, Map&lt;String, Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当任务成功执行时调用，</span></span><br><span class="line"><span class="comment">// 所需的任务参数由最终用户给出。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(String taskId, Map&lt;String, Object&gt; variables)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(String taskId, Map&lt;String, Object&gt; variables, <span class="keyword">boolean</span> localScope)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将给定任务的受让人更改为给定的userId。</span></span><br><span class="line"><span class="comment">// 不检查用户是否被标识组件所知。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAssignee</span><span class="params">(String taskId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将此任务的所有权转移给另一个用户。</span></span><br><span class="line"><span class="comment">// 不检查用户是否被标识组件所知。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOwner</span><span class="params">(String taskId, String userId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>检索</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检索与给定任务关联的&#123;@link IdentityLink&#125;。</span></span><br><span class="line"><span class="comment">// 这样的&#123;@link IdentityLink&#125;通知了一个特定的标识(如。组或用户)与某个任务相关联(如作为候选人,受让人,等等)。</span></span><br><span class="line"><span class="function">List&lt;IdentityLink&gt; <span class="title">getIdentityLinksForTask</span><span class="params">(String taskId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>候选（候选组，候选用户）的操作（添加与删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;@link #addUserIdentityLink(String、String、String)&#125;的便利简写;型&#123; @link IdentityLinkType #CANDIDATE&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCandidateUser</span><span class="params">(String taskId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #addGroupIdentityLink(String、String、String)&#125;的便利简写;型&#123; @link IdentityLinkType #CANDIDATE&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCandidateGroup</span><span class="params">(String taskId, String groupId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 涉及到有任务的用户。身份链接的类型由给定的身份链接类型定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUserIdentityLink</span><span class="params">(String taskId, String userId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 涉及到一个有任务的小组。标识链接的类型由给定的标识链接定义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addGroupIdentityLink</span><span class="params">(String taskId, String groupId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #deleteUserIdentityLink(String、String、String)&#125;的便利简写;型&#123; @link IdentityLinkType #CANDIDATE&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCandidateUser</span><span class="params">(String taskId, String userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;@link #deleteGroupIdentityLink(String、String、String)&#125;的便利简写;型&#123; @link IdentityLinkType #CANDIDATE&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCandidateGroup</span><span class="params">(String taskId, String groupId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户与给定身份链接类型的任务之间的关联。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteUserIdentityLink</span><span class="params">(String taskId, String userId, String identityLinkType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个组与给定身份链接类型的任务之间的关联。	</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteGroupIdentityLink</span><span class="params">(String taskId, String groupId, String identityLinkType)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>任务修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更改任务的优先级。权限:实际所有者/业务管理员。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(String taskId, <span class="keyword">int</span> priority)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改任务的截止日期。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDueDate</span><span class="params">(String taskId, Date dueDate)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>任务查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回可用于动态查询任务的新&#123;@link TaskQuery&#125;。</span></span><br><span class="line"><span class="function">TaskQuery <span class="title">createTaskQuery</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回任务的新&#123;@link NativeQuery&#125;。</span></span><br><span class="line"><span class="function">NativeTaskQuery <span class="title">createNativeTaskQuery</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>任务变量（添加，获取，检测，移除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在任务上设置变量。如果变量不是已经存在，那么它将在最外层的范围内创建。这意味着在此任务与执行相关的情况下，流程实例。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariable</span><span class="params">(String taskId, String variableName, Object value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariables</span><span class="params">(String taskId, Map&lt;String, ? extends Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在任务上设置变量。如果变量不是已经存在，那么它将在任务中创建。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariableLocal</span><span class="params">(String taskId, String variableName, Object value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVariablesLocal</span><span class="params">(String taskId, Map&lt;String, ? extends Object&gt; variables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取任务范围内的变量和搜索，如果还有执行范围的话。</span></span><br><span class="line"><span class="function">Object <span class="title">getVariable</span><span class="params">(String taskId, String variableName)</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getVariable</span><span class="params">(String taskId, String variableName, Class&lt;T&gt; variableClass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查任务是否有定义为给定名称的变量。</span></span><br><span class="line"><span class="function">Object <span class="title">getVariableLocal</span><span class="params">(String taskId, String variableName)</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getVariableLocal</span><span class="params">(String taskId, String variableName, Class&lt;T&gt; variableClass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查任务是否具有给定名称的变量，在任务范围内，如果还有执行范围。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasVariable</span><span class="params">(String taskId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查任务是否有定义为给定名称的变量，只有本地任务范围。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasVariableLocal</span><span class="params">(String taskId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取任务范围内的所有变量和搜索，如果还有执行范围的话。如果您有很多变量，而且只需要一些变量，那么可以考虑使用&#123;@link #getVariables(String, Collection)&#125;来获得更好的性能。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariables</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有给定变量的值，并只在任务范围内搜索。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariables</span><span class="params">(String taskId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有变量并只在任务范围内搜索。如果您有许多任务局部变量，而且只需要一些，请考虑使用&#123;@link #getVariablesLocal(String, Collection)&#125;来获得更好的性能。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariablesLocal</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在任务上获取一个变量。</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getVariablesLocal</span><span class="params">(String taskId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有变量并只在任务范围内搜索。</span></span><br><span class="line"><span class="function">List&lt;VariableInstance&gt; <span class="title">getVariableInstancesLocalByTaskIds</span><span class="params">(Set&lt;String&gt; taskIds)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从任务中移除变量。当变量不存在时，什么都不会发生。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariable</span><span class="params">(String taskId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从任务中移除给定集合中的所有变量。不存在的变量名完全被忽略。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariables</span><span class="params">(String taskId, Collection&lt;String&gt; variableNames)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从任务中移除变量(不考虑父作用域)。当变量不存在时，什么都不会发生。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariableLocal</span><span class="params">(String taskId, String variableName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从任务中删除给定集合中的所有变量(不考虑父范围)。不存在的变量名完全被忽略。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeVariablesLocal</span><span class="params">(String taskId, Collection&lt;String&gt; variableNames)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向任务和/或流程实例添加注释。</span></span><br><span class="line"><span class="function">Comment <span class="title">addComment</span><span class="params">(String taskId, String processInstanceId, String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将注释添加到一个任务和/或具有自定义类型的流程实例。</span></span><br><span class="line"><span class="function">Comment <span class="title">addComment</span><span class="params">(String taskId, String processInstanceId, String type, String message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回带有给定id的单个注释。如果给定id没有注释，则返回null。</span></span><br><span class="line"><span class="function">Comment <span class="title">getComment</span><span class="params">(String commentId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从提供的任务和/或流程实例中删除所有注释。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteComments</span><span class="params">(String taskId, String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的id删除单个注释。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteComment</span><span class="params">(String commentId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与给定任务相关的注释。</span></span><br><span class="line"><span class="function">List&lt;Comment&gt; <span class="title">getTaskComments</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与给定类型的给定任务相关的注释。</span></span><br><span class="line"><span class="function">List&lt;Comment&gt; <span class="title">getTaskComments</span><span class="params">(String taskId, String type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定类型的所有注释。</span></span><br><span class="line"><span class="function">List&lt;Comment&gt; <span class="title">getCommentsByType</span><span class="params">(String type)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有与给定任务相关的Event。</span></span><br><span class="line"><span class="function">List&lt;Event&gt; <span class="title">getTaskEvents</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给定id的单个事件。如果给定id不存在事件，则返回null。</span></span><br><span class="line"><span class="function">Event <span class="title">getEvent</span><span class="params">(String eventId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与给定流程实例相关的注释。</span></span><br><span class="line"><span class="function">List&lt;Comment&gt; <span class="title">getProcessInstanceComments</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"><span class="function">List&lt;Comment&gt; <span class="title">getProcessInstanceComments</span><span class="params">(String processInstanceId, String type)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>附件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向任务和/或流程实例添加新的附件，并使用输入流提供内容。</span></span><br><span class="line"><span class="function">Attachment <span class="title">createAttachment</span><span class="params">(String attachmentType, String taskId, String processInstanceId, String attachmentName, String attachmentDescription, InputStream content)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向任务和/或流程实例添加新的附件，并使用url作为内容。</span></span><br><span class="line"><span class="function">Attachment <span class="title">createAttachment</span><span class="params">(String attachmentType, String taskId, String processInstanceId, String attachmentName, String attachmentDescription, String url)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新附件的名称和描述。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveAttachment</span><span class="params">(Attachment attachment)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索一个特定的附件</span></span><br><span class="line"><span class="function">Attachment <span class="title">getAttachment</span><span class="params">(String attachmentId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索特定附件的流内容。</span></span><br><span class="line"><span class="function">InputStream <span class="title">getAttachmentContent</span><span class="params">(String attachmentId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与任务相关的附件列表。</span></span><br><span class="line"><span class="function">List&lt;Attachment&gt; <span class="title">getTaskAttachments</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与流程实例相关联的附件列表。</span></span><br><span class="line"><span class="function">List&lt;Attachment&gt; <span class="title">getProcessInstanceAttachments</span><span class="params">(String processInstanceId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除附件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAttachment</span><span class="params">(String attachmentId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>任务列表获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父任务的子任务列表。</span></span><br><span class="line"><span class="function">List&lt;Task&gt; <span class="title">getSubTasks</span><span class="params">(String parentTaskId)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>BeyondCompare破解</title>
    <url>/2020/03/24/BeyondCompare%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<ol>
<li><p>第一种</p>
<p>修改C:\Program Files\Beyond Compare 4\BCUnrar.dll,这个文件重命名或者直接删除，则会新增30天试用期，再次打开提示还有28天试用期</p>
</li>
<li><p>第二种</p>
<p>1）、在搜索栏中输入 regedit  ，打开注册表</p>
<p>2）、删除项目：计算机\HKEY_CURRENT_USER\Software\ScooterSoftware\Beyond Compare 4\CacheId</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>DataX-2-安装</title>
    <url>/2022/03/23/DataX-2-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="DataX-安装"><a href="#DataX-安装" class="headerlink" title="DataX-安装"></a>DataX-安装</h4><h5 id="官方下载地址"><a href="#官方下载地址" class="headerlink" title="官方下载地址"></a>官方下载地址</h5><p>下载地址：<a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz">http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz</a></p>
<p>源码地址：<a href="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a></p>
<h5 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h5><ul>
<li>Linux</li>
</ul>
<p>- JDK(1.8 以上，推荐 1.8)</p>
<p>- Python(推荐 Python2.6.X)</p>
<span id="more"></span>

<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装python</span></span><br><span class="line">[root@VM-0-11-centos ~]$  yum install -y python</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将下载好的 datax.tar.gz 上传到 hadoop102 的/opt/software</span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压压 datax.tar.gz 到/opt/module</span></span><br><span class="line">[root@VM-0-11-centos ~]$ tar -zxvf datax.tar.gz </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">需要删除隐藏文件(重要)</span></span><br><span class="line">rm -rf /home/datax/plugin/*/._*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行自检脚本</span></span><br><span class="line">[root@VM-0-11-centos ~]$ cd /home/datax</span><br><span class="line">[root@VM-0-11-centos datax]$ python ./bin/datax.py ./job/job.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ETL</category>
      </categories>
      <tags>
        <tag>DataX</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/08/11/Activiti-%E5%9F%BA%E7%A1%801-%E8%A1%A8%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h4 id="Activiti表结构分析"><a href="#Activiti表结构分析" class="headerlink" title="Activiti表结构分析"></a>Activiti表结构分析</h4><p>Activiti 工作流总共包含 23 张数据表（现在是25张，新增了 ACT_EVT_LOG 和 ACT_PROCDEF_INFO ）</p>
<p>表名规则：Activiti 使用到的表都是 ACT_ 开头的。表名的第二部分用两个字母表明表的用途。</p>
<ul>
<li><code>ACT_GE_ （GE）</code> 表示 general 全局通用数据及设置，各种情况都使用的数据。</li>
<li><code>ACT_HI_ （HI）</code> 表示 history 历史数据表，包含着程执行的历史相关数据，如结束的流程实例，变量，任务，等等</li>
<li><code>ACT_ID_ （ID）</code> 表示 identity 组织机构，用户记录，流程中使用到的用户和组。这些表包含标识的信息，如用户，用户组，等等。</li>
<li><code>ACT_RE_ （RE）</code> 表示 repository 存储，包含的是静态信息，如，流程定义，流程的资源（图片，规则等）。</li>
<li><code>ACT_RU_ （RU）</code> 表示 runtime 运行时，运行时的流程变量，用户任务，变量，职责（job）等运行时的数据。Activiti 只存储实例执行期间的运行时数据，当流程实例结束时，将删除这些记录。这就保证了这些运行时的表小且快。</li>
</ul>
<hr>
<h4 id="表结构介绍及整理"><a href="#表结构介绍及整理" class="headerlink" title="表结构介绍及整理"></a>表结构介绍及整理</h4><ul>
<li><p><strong>act_ge_bytearray</strong>(二进制数据表)</p>
<p>表作用：存储二进制数据表，存储通用的流程定义和流程资源</p>
<p>表应用场景：保存流程定义图片和xml、Serializable(序列化)的变量,即保存所有二进制数据，特别注意类路径部署时候，不要把svn等隐藏文件或者其他与流程无关的文件也一起部署到该表中，会造成一些错误（可能导致流程定义无法删除）</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th>取值说明</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td>主键ID</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
<td>Version(版本)</td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
<td>部署的文件名称，如：leave.bpmn.png,leave.bpmn20.xml</td>
</tr>
<tr>
<td>DEPLOYMENT_ID_</td>
<td>部署ID</td>
<td>nvarchar(64)</td>
<td>部署表ID</td>
</tr>
<tr>
<td>BYTES_</td>
<td>部署文件</td>
<td>varbinary(max)</td>
<td>部署文件</td>
</tr>
<tr>
<td>GENERATED_</td>
<td>是否是引擎生成</td>
<td>tinyint</td>
<td>0为用户生成，1为activiti生成</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ge_property(属性数据表)</strong></p>
<p>表作用：属性数据表。存储整个流程引擎级别的数据。</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>VALUE_</td>
<td>值</td>
<td>nvarchar(300)</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_actinst(历史节点表)</strong></p>
<p>表作用：历史活动信息。这里记录流程流转过的所有节点，与HI_TASKINST不同的是，taskinst只记录usertask内容</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>ACT_ID_</td>
<td>节点ID</td>
<td>nvarchar(225)</td>
<td>节点定义ID</td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>任务实例ID</td>
<td>nvarchar(64)</td>
<td>任务实例ID 其他节点类型实例ID在这里为空</td>
</tr>
<tr>
<td>CALL_PROC_INST_ID_</td>
<td>调用外部的流程实例ID</td>
<td>nvarchar(64)</td>
<td>调用外部流程的流程实例ID</td>
</tr>
<tr>
<td>ACT_NAME_</td>
<td>节点名称</td>
<td>nvarchar(225)</td>
<td>节点定义名称</td>
</tr>
<tr>
<td>ACT_TYPE_</td>
<td>节点类型</td>
<td>nvarchar(225)</td>
<td>如startEvent、userTask</td>
</tr>
<tr>
<td>ASSIGNEE_</td>
<td>签收人</td>
<td>nvarchar(64)</td>
<td>节点签收人</td>
</tr>
<tr>
<td>START_TIME_</td>
<td>开始时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>END_TIME_</td>
<td>结束时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>DURATION_</td>
<td>耗时</td>
<td>numeric(19,0)</td>
<td>毫秒值</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_attachment(历史附件表)</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>integer</td>
</tr>
<tr>
<td>USER_ID_</td>
<td>用户ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>DESCRIPTION_</td>
<td>描述</td>
<td>nvarchar(4000)</td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>任务实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>URL_</td>
<td>附件地址</td>
<td>nvarchar(4000)</td>
</tr>
<tr>
<td>CONTENT_ID_</td>
<td>字节表的ID</td>
<td>nvarchar(64)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_comment( 历史意见表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
<td>类型：event（事件）comment（意见）</td>
</tr>
<tr>
<td>TIME_</td>
<td>时间</td>
<td>datetime</td>
<td>填写时间</td>
</tr>
<tr>
<td>USER_ID_</td>
<td>用户ID</td>
<td>nvarchar(64)</td>
<td>填写人</td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>节点任务ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>ACTION_</td>
<td>行为类型</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>MESSAGE_</td>
<td>基本内容</td>
<td>nvarchar(4000)</td>
<td>用于存放流程产生的信息，比如审批意见</td>
</tr>
<tr>
<td>FULL_MSG_</td>
<td>全部内容</td>
<td>varbinary(max)</td>
<td>附件地址</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_detail（历史详情表）</strong></p>
<p>作用：流程中产生的变量详细，包括控制流程流转的变量，业务表单中填写的流程需要用到的变量等。</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>任务实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>ACT_INST_ID_</td>
<td>节点实例ID</td>
<td>nvarchar(64)</td>
<td>CT_HI_ACTINST表的ID</td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>VAR_TYPE_</td>
<td>参数类型</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>TIME_</td>
<td>时间戳</td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td>BYTEARRAY_ID_</td>
<td>字节表ID</td>
<td>nvarchar</td>
<td>ACT_GE_BYTEARRAY表的ID</td>
</tr>
<tr>
<td>DOUBLE_</td>
<td>DOUBLE</td>
<td>double precision</td>
<td>存储变量类型为Double</td>
</tr>
<tr>
<td>LONG_</td>
<td>LONG</td>
<td>numeric</td>
<td>存储变量类型为long</td>
</tr>
<tr>
<td>TEXT_</td>
<td>TEXT</td>
<td>nvarchar</td>
<td>存储变量值类型为String</td>
</tr>
<tr>
<td>TEXT2_</td>
<td>TEXT2</td>
<td>nvarchar</td>
<td>此处存储的是JPA持久化对象时，才会有值。此值为对象ID</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_procinst(历史流程实例)</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>BUSINESS_KEY_</td>
<td>业务主键</td>
<td>nvarchar(225)</td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>START_TIME_</td>
<td>开始时间</td>
<td>datetime</td>
</tr>
<tr>
<td>END_TIME_</td>
<td>结束时间</td>
<td>datetime</td>
</tr>
<tr>
<td>DURATION_</td>
<td>耗时</td>
<td>numeric(19)</td>
</tr>
<tr>
<td>START_USER_ID_</td>
<td>开始用户</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>START_ACT_ID_</td>
<td>开始节点ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>END_ACT_ID_</td>
<td>结束节点ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>SUPER_PROCESS_INSTANCE_ID_</td>
<td>父流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>DELETE_REASON_</td>
<td>删除原因</td>
<td>nvarchar(4000)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_taskinst（历史任务实例表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>TASK_DEF_KEY_</td>
<td>节点定义ID</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>PARENT_TASK_ID_</td>
<td>父节点实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>DESCRIPTION_</td>
<td>描述</td>
<td>nvarchar(4000)</td>
<td></td>
</tr>
<tr>
<td>OWNER_</td>
<td>实际签收人 任务的拥有者</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>ASSIGNEE_</td>
<td>签收人或被委托</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>START_TIME_</td>
<td>开始时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>CLAIM_TIME_</td>
<td>提醒时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>END_TIME_</td>
<td>结束时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>DURATION_</td>
<td>耗时</td>
<td>numeric(19)</td>
<td></td>
</tr>
<tr>
<td>DELETE_REASON_</td>
<td>删除原因</td>
<td>nvarchar(4000)</td>
<td>删除原因(completed,deleted)</td>
</tr>
<tr>
<td>PRIORITY_</td>
<td>优先级别</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>DUE_DATE_</td>
<td>过期时间</td>
<td>datetime</td>
<td>过期时间，表明任务应在多长时间内完成</td>
</tr>
<tr>
<td>FORM_KEY_</td>
<td>节点定义的formkey</td>
<td>nvarchar(255)</td>
<td>desinger节点定义的form_key属性</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_varinst （历史变量表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>任务实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>VAR_TYPE_</td>
<td>参数类型</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>BYTEARRAY_ID_</td>
<td>字节表ID</td>
<td>nvarchar(400)</td>
<td>ACT_GE_BYTEARRAY表的主键</td>
</tr>
<tr>
<td>DOUBLE_</td>
<td>DOUBLE</td>
<td>double precision</td>
<td></td>
</tr>
<tr>
<td>LONG_</td>
<td>LONG</td>
<td>numeric</td>
<td></td>
</tr>
<tr>
<td>TEXT_</td>
<td></td>
<td>varchar(4000)</td>
<td></td>
</tr>
<tr>
<td>TEXT2_</td>
<td></td>
<td>varchar(4000)</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_hi_identitylink(历史流程人员表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>GROUP_ID_</td>
<td>组ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>USER_ID_</td>
<td>用户ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>节点实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
</tbody></table>
<p>​</p>
</li>
<li><p><strong>act_id_group（用户组信息）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>D_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_id_info（用户扩展信息表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
</tr>
<tr>
<td>USER_ID_</td>
<td>用户ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td></td>
</tr>
<tr>
<td>KEY_</td>
<td></td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>VALUE_</td>
<td></td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>PASSWORD_</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Image</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PARENT_ID_</td>
<td></td>
<td>nvarchar(255)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_id_membership( 用户与分组对应信息表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>USER_ID</td>
<td>用户ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>GROUP_ID</td>
<td>用户组ID</td>
<td>nvarchar(64)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_id_user（用户信息表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
</tr>
<tr>
<td>FIRST_</td>
<td>姓</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>LAST_</td>
<td>名</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>EMAIL_</td>
<td>EMAIL_</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>PWD_</td>
<td>密码</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>PICTURE_ID_</td>
<td>图片ID</td>
<td>nvarchar(64)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_re_deployment（部署信息表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>NAME_</td>
<td>部署名称</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>CATEGORY_</td>
<td>分类</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>DEPLOY_TIME_</td>
<td>部署时间</td>
<td>datetime</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_re_model( 流程设计模型部署表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>乐观锁</td>
<td></td>
<td></td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>KEY_</td>
<td>KEY_</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>CATEGORY_</td>
<td>分类</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>CREATE_TIME_</td>
<td>创建时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>LAST_UPDATE_TIME_</td>
<td>最新修改时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>VERSION_</td>
<td>版本</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>META_INFO_</td>
<td></td>
<td>nvarchar(255)</td>
<td>以json格式保存流程定义的信息</td>
</tr>
<tr>
<td>DEPLOYMENT_ID_</td>
<td>部署ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>EDITOR_SOURCE_VALUE_ID_</td>
<td></td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>EDITOR_SOURCE_EXTRA_VALUE_ID_</td>
<td></td>
<td>nvarchar(64)</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_re_procdef (流程定义数据表 )</strong></p>
<p>作用：业务流程定义数据表。</p>
<p>数据关联：</p>
<p>​    此表和 ACT_RE_DEPLOYMENT 是多对一的关系，即，一个部署的bar包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在 ACT_REPROCDEF 表内，每个流程定义的数据，都会对于 ACT_GE_BYTEARRAY 表内的一个资源文件和 PNG 图片文件。</p>
<p>​    和 ACT_GE_BYTEARRAY 的关联是通过程序用ACT_GE_BYTEARRAY.NAME 与 ACT_RE_PROCDEF.NAME 完成的，在数据库表结构中没有体现。</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>乐观锁</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>CATEGORY_</td>
<td>分类</td>
<td>nvarchar(255)</td>
<td>流程定义的Namespace就是类别</td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>KEY_</td>
<td>定义的KEY</td>
<td>nvarchar(255)</td>
<td>流程定义ID</td>
</tr>
<tr>
<td>VERSION_</td>
<td>版本</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>DEPLOYMENT_ID_</td>
<td>部署表ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>RESOURCE_NAME_</td>
<td>bpmn文件名称</td>
<td>nvarchar(4000)</td>
<td>流程bpmn文件名称</td>
</tr>
<tr>
<td>DGRM_RESOURCE_NAME_</td>
<td>png图片名称</td>
<td>nvarchar(4000)</td>
<td>流程图片名称</td>
</tr>
<tr>
<td>DESCRIPTION_</td>
<td>描述</td>
<td>nvarchar(4000)</td>
<td></td>
</tr>
<tr>
<td>HAS_START_FORM_KEY_</td>
<td>是否存在开始节点formKey</td>
<td>tinyint</td>
<td>start节点是否存在formKey 0否 1是</td>
</tr>
<tr>
<td>SUSPENSION_STATE_</td>
<td>是否挂起</td>
<td>tinyint</td>
<td>1 激活 2挂起</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ru_event_subscr（事件表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>事件ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>EVENT_TYPE_</td>
<td>事件类型</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>EVENT_NAME_</td>
<td>事件名称</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>ACTIVITY_ID_</td>
<td>活动实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>CONFIGURATION_</td>
<td>配置</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>CREATED_</td>
<td>是否创建</td>
<td>datetime</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ru_execution( 运行时流程执行实例表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>乐观锁</td>
<td>int</td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>BUSINESS_KEY_</td>
<td>业务主键ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>PARENT_ID_</td>
<td>父节点实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>SUPER_EXEC_</td>
<td>SUPER_EXEC_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>ACT_ID_</td>
<td>节点实例ID</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>IS_ACTIVE_</td>
<td>是否存活</td>
<td>tinyint</td>
</tr>
<tr>
<td>IS_CONCURRENT_</td>
<td>是否并行</td>
<td>tinyint</td>
</tr>
<tr>
<td>IS_SCOPE_</td>
<td>IS_SCOPE_</td>
<td>tinyint</td>
</tr>
<tr>
<td>IS_EVENT_SCOPE_</td>
<td>IS_EVENT_SCOPE_</td>
<td>tinyint</td>
</tr>
<tr>
<td>SUSPENSION_STATE_</td>
<td>是否挂起</td>
<td>tinyint</td>
</tr>
<tr>
<td>CACHED_ENT_STATE_</td>
<td></td>
<td>int</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ru_identitylink( 运行时流程人员表 )</strong></p>
<p>作用：任务参与者数据表。主要存储当前节点参与者的信息。</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>乐观锁</td>
<td>int</td>
</tr>
<tr>
<td>GROUP_ID_</td>
<td>组ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>USER_ID_</td>
<td>用户ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>节点实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(255)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ru_job( 运行时定时任务数据表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>标识</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>REV_</td>
<td>版本</td>
<td>int</td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>LOCK_EXP_TIME_</td>
<td>锁定释放时间</td>
<td>datetime</td>
</tr>
<tr>
<td>LOCK_OWNER_</td>
<td>挂起者</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>EXCLUSIVE_</td>
<td></td>
<td>bit</td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROCESS_INSTANCE_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>RETRIES_</td>
<td></td>
<td>int</td>
</tr>
<tr>
<td>EXCEPTION_STACK_ID_</td>
<td>异常信息ID</td>
<td>nvarchar(64)</td>
</tr>
<tr>
<td>EXCEPTION_MSG_</td>
<td>异常信息</td>
<td>nvarchar(4000)</td>
</tr>
<tr>
<td>DUEDATE_</td>
<td>到期时间</td>
<td>datetime</td>
</tr>
<tr>
<td>REPEAT_</td>
<td>重复</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>HANDLER_TYPE_</td>
<td>处理类型</td>
<td>nvarchar(255)</td>
</tr>
<tr>
<td>HANDLER_CFG_</td>
<td></td>
<td>nvarchar(4000)</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ru_task( 运行时任务节点表）</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>乐观锁</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_DEF_ID_</td>
<td>流程定义ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>NAME_</td>
<td>节点定义名称</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>PARENT_TASK_ID_</td>
<td>父节点实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>DESCRIPTION_</td>
<td>节点定义描述</td>
<td>nvarchar(4000)</td>
<td></td>
</tr>
<tr>
<td>TASK_DEF_KEY_</td>
<td>节点定义的KEY</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>OWNER_</td>
<td>实际签收人</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>ASSIGNEE_</td>
<td>签收人或委托人</td>
<td>nvarchar(255)</td>
<td>拥有者（一般情况下为空，只有在委托时才有值）</td>
</tr>
<tr>
<td>DELEGATION_</td>
<td>委托类型</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PRIORITY_</td>
<td>优先级别</td>
<td>int</td>
<td>优先级别，默认为：50</td>
</tr>
<tr>
<td>CREATE_TIME_</td>
<td>创建时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>DUE_DATE_</td>
<td>过期时间</td>
<td>datetime</td>
<td></td>
</tr>
<tr>
<td>SUSPENSION_STATE_</td>
<td>是否挂起</td>
<td>int</td>
<td>1代表激活 2代表挂起</td>
</tr>
</tbody></table>
</li>
<li><p><strong>act_ru_variable( 运行时流程变量数据表 )</strong></p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段描述</th>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ID_</td>
<td>ID_</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>REV_</td>
<td>乐观锁</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>TYPE_</td>
<td>类型</td>
<td>nvarchar(255)</td>
<td></td>
</tr>
<tr>
<td>NAME_</td>
<td>名称</td>
<td>nvarchar(255)</td>
<td>变量名称</td>
</tr>
<tr>
<td>EXECUTION_ID_</td>
<td>执行实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>PROC_INST_ID_</td>
<td>流程实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>TASK_ID_</td>
<td>节点实例ID</td>
<td>nvarchar(64)</td>
<td></td>
</tr>
<tr>
<td>BYTEARRAY_ID_</td>
<td>字节表ID</td>
<td>nvarchar(64)</td>
<td>字节表的ID（ACT_GE_BYTEARRAY）</td>
</tr>
<tr>
<td>DOUBLE_</td>
<td></td>
<td>float</td>
<td></td>
</tr>
<tr>
<td>LONG_</td>
<td></td>
<td>numeric(19)</td>
<td></td>
</tr>
<tr>
<td>TEXT_</td>
<td></td>
<td>nvarchar(4000)</td>
<td></td>
</tr>
<tr>
<td>TEXT2_</td>
<td></td>
<td>nvarchar(4000)</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>ACT_PROCDEF_INFO</p>
</li>
<li><p>ACT_EVT_LOG</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>DataX-web-3-安装</title>
    <url>/2022/03/25/DataX-web-3-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="DataX-安装"><a href="#DataX-安装" class="headerlink" title="DataX-安装"></a>DataX-安装</h4><h5 id="官方下载地址-点击下载-提取码：cpsk"><a href="#官方下载地址-点击下载-提取码：cpsk" class="headerlink" title="官方下载地址:点击下载 提取码：cpsk"></a>官方下载地址:<a href="https://pan.baidu.com/s/13yoqhGpD00I82K4lOYtQhg">点击下载</a> 提取码：cpsk</h5><h4 id="1）基础软件安装"><a href="#1）基础软件安装" class="headerlink" title="1）基础软件安装"></a>1）基础软件安装</h4><ul>
<li>MySQL (5.5+) 必选，对应客户端可以选装, Linux服务上若安装mysql的客户端可以通过部署脚本快速初始化数据库</li>
<li>JDK (1.8.0_xxx) 必选</li>
<li>Maven (3.6.1+) 必选</li>
<li>DataX 必选</li>
<li>Python (2.x) (支持Python3需要修改替换datax/bin下面的三个python文件，替换文件在doc/datax-web/datax-python3下) 必选，主要用于调度执行底层DataX的启动脚本，默认的方式是以Java子进程方式执行DataX，用户可以选择以Python方式来做自定义的改造</li>
</ul>
<span id="more"></span>

<h4 id="2）-编译打包（官方提供的tar包跳过）"><a href="#2）-编译打包（官方提供的tar包跳过）" class="headerlink" title="2） 编译打包（官方提供的tar包跳过）"></a>2） 编译打包（官方提供的tar包跳过）</h4><p>直接从Git上面获得源代码，在项目的根目录下执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行成功后将会在工程的build目录下生成安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build/datax-web-&#123;VERSION&#125;.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><h4 id="1）解压安装包"><a href="#1）解压安装包" class="headerlink" title="1）解压安装包"></a>1）解压安装包</h4><p>在选定的安装目录，解压安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf datax-web-&#123;VERSION&#125;.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2）执行一键安装脚本"><a href="#2）执行一键安装脚本" class="headerlink" title="2）执行一键安装脚本"></a>2）执行一键安装脚本</h4><p>进入解压后的目录，找到bin目录下面的install.sh文件，如果选择交互式的安装，则直接执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在交互模式下，对各个模块的package压缩包的解压以及configure配置脚本的调用，都会请求用户确认,可根据提示查看是否安装成功，如果没有安装成功，可以重复尝试； 如果不想使用交互模式，跳过确认过程，则执行以下命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/install.sh --force</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3）数据库初始化"><a href="#3）数据库初始化" class="headerlink" title="3）数据库初始化"></a>3）数据库初始化</h4><p>如果你的服务上安装有mysql命令，在执行安装脚本的过程中则会出现以下提醒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scan out mysql command, so begin to initalize the database</span><br><span class="line">Do you want to initalize database with sql: [&#123;INSTALL_PATH&#125;/bin/db/datax-web.sql]? (Y/N)y</span><br><span class="line">Please input the db host(default: 127.0.0.1): </span><br><span class="line">Please input the db port(default: 3306): </span><br><span class="line">Please input the db username(default: root): </span><br><span class="line">Please input the db password(default: ): </span><br><span class="line">Please input the db name(default: exchangis)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按照提示输入数据库地址，端口号，用户名，密码以及数据库名称，大部分情况下即可快速完成初始化。 如果服务上并没有安装mysql命令，则可以取用目录下/bin/db/datax-web.sql脚本去手动执行，完成后修改相关配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ./modules/datax-admin/conf/bootstrap.properties</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Database</span><br><span class="line">#DB_HOST=</span><br><span class="line">#DB_PORT=</span><br><span class="line">#DB_USERNAME=</span><br><span class="line">#DB_PASSWORD=</span><br><span class="line">#DB_DATABASE=</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按照具体情况配置对应的值即可。</p>
<h4 id="4-配置"><a href="#4-配置" class="headerlink" title="4) 配置"></a>4) 配置</h4><p>安装完成之后，</p>
<p>在项目目录： /modules/datax-admin/bin/env.properties 配置邮件服务(可跳过)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAIL_USERNAME=&quot;&quot;</span><br><span class="line">MAIL_PASSWORD=&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此文件中包括一些默认配置参数，例如：server.port，具体请查看文件。</p>
<p>在项目目录下/modules/datax-execute/bin/env.properties 指定PYTHON_PATH的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ./modules/&#123;module_name&#125;/bin/env.properties</span><br><span class="line"></span><br><span class="line">### 执行datax的python脚本地址</span><br><span class="line">PYTHON_PATH=</span><br><span class="line"></span><br><span class="line">### 保持和datax-admin服务的端口一致；默认是9527，如果没改datax-admin的端口，可以忽略</span><br><span class="line">DATAX_ADMIN_PORT=</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此文件中包括一些默认配置参数，例如：executor.port,json.path,data.path等，具体请查看文件。</p>
<h4 id="5）启动服务"><a href="#5）启动服务" class="headerlink" title="5）启动服务"></a>5）启动服务</h4><h5 id="一键启动所有服务"><a href="#一键启动所有服务" class="headerlink" title="- 一键启动所有服务"></a>- 一键启动所有服务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/start-all.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>中途可能发生部分模块启动失败或者卡住，可以退出重复执行，如果需要改变某一模块服务端口号，则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ./modules/&#123;module_name&#125;/bin/env.properties</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>找到SERVER_PORT配置项，改变它的值即可。 当然也可以单一地启动某一模块服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/start.sh -m &#123;module_name&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="一键取消所有服务"><a href="#一键取消所有服务" class="headerlink" title="- 一键取消所有服务"></a>- 一键取消所有服务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/stop-all.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然也可以单一地停止某一模块服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/stop.sh -m &#123;module_name&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6）查看服务（注意！注意！）"><a href="#6）查看服务（注意！注意！）" class="headerlink" title="6）查看服务（注意！注意！）"></a>6）查看服务（注意！注意！）</h4><p>在Linux环境下使用JPS命令，查看是否出现DataXAdminApplication和DataXExecutorApplication进程，如果存在这表示项目运行成功</p>
<h4 id="如果项目启动失败，请检查启动日志：modules-datax-admin-bin-console-out或者modules-datax-executor-bin-console-out"><a href="#如果项目启动失败，请检查启动日志：modules-datax-admin-bin-console-out或者modules-datax-executor-bin-console-out" class="headerlink" title="如果项目启动失败，请检查启动日志：modules/datax-admin/bin/console.out或者modules/datax-executor/bin/console.out"></a>如果项目启动失败，请检查启动日志：modules/datax-admin/bin/console.out或者modules/datax-executor/bin/console.out</h4><hr>
<p>Tips: 脚本使用的都是bash指令集，如若使用sh调用脚本，可能会有未知的错误</p>
<h4 id="7）运行"><a href="#7）运行" class="headerlink" title="7）运行"></a>7）运行</h4><p>部署完成后，在浏览器中输入 <a href="http://ip:port/index.html">http://ip:port/index.html</a> 就可以访问对应的主界面（ip为datax-admin部署所在服务器ip,port为为datax-admin 指定的运行端口）</p>
<p>输入用户名 admin 密码 123456 就可以直接访问系统</p>
<h3 id="8-运行日志"><a href="#8-运行日志" class="headerlink" title="8) 运行日志"></a>8) 运行日志</h3><p>部署完成之后，在modules/对应的项目/data/applogs下(用户也可以自己指定日志，修改application.yml 中的logpath地址即可)，用户可以根据此日志跟踪项目实际启动情况</p>
<p>如果执行器启动比admin快，执行器会连接失败，日志报”拒绝连接”的错误，一般是先启动admin,再启动executor,30秒之后会重连，如果成功请忽略这个异常。</p>
<h3 id="9）集群部署"><a href="#9）集群部署" class="headerlink" title="9）集群部署"></a>9）集群部署</h3><p>修改modules/datax-executor/conf/application.yml文件下admin.addresses地址。 为了方便单机版部署，项目目前没有将ip部分配置到env.properties，部署多节点时可以将整个地址作为变量配置到env文件。</p>
<p>将官方提供的tar包或者编译打包的tar包上传到服务节点，按照步骤5中介绍的方式单一地启动某一模块服务即可。例如执行器需要部署多个节点，仅需启动执行器项目，执行 <code>./bin/start.sh -m datax-executor</code></p>
<p>调度中心、执行器支持集群部署，提升调度系统容灾和可用性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 1.调度中心集群：</span><br><span class="line">   </span><br><span class="line">    DB配置保持一致；&lt;br&gt;</span><br><span class="line">    集群机器时钟保持一致（单机集群忽视）；&lt;br&gt;</span><br><span class="line">    </span><br><span class="line">* 2.执行器集群:</span><br><span class="line"></span><br><span class="line">    执行器回调地址(admin.addresses）需要保持一致；执行器根据该配置进行执行器自动注册等操作。</span><br><span class="line">    </span><br><span class="line">    同一个执行器集群内AppName（executor.appname）需要保持一致；调度中心根据该配置动态发现不同集群的在线执行器列表。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ETL</category>
      </categories>
      <tags>
        <tag>DataX</tag>
      </tags>
  </entry>
  <entry>
    <title>DataX-3-使用</title>
    <url>/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="DataX-3-使用"><a href="#DataX-3-使用" class="headerlink" title="DataX-3-使用"></a>DataX-3-使用</h4><ul>
<li><h5 id="登录："><a href="#登录：" class="headerlink" title="登录："></a>登录：</h5><ul>
<li><p>用户名：admin</p>
</li>
<li><p>密码：123456</p>
<p><img src="/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%99%BB%E5%BD%95.png" alt="登录"></p>
<span id="more"></span></li>
</ul>
</li>
</ul>
<ul>
<li><h5 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h5><p>​    <img src="/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE.png" alt="添加项目"></p>
</li>
<li><h5 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h5><p>​    <img src="/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E6%BA%90.png" alt="添加数据源"></p>
</li>
<li><h5 id="添加Datax任务模板"><a href="#添加Datax任务模板" class="headerlink" title="添加Datax任务模板"></a>添加Datax任务模板</h5><p>​    <img src="/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%B7%BB%E5%8A%A0Datax%E4%BB%BB%E5%8A%A1%E6%A8%A1%E6%9D%BF.png" alt="添加Datax任务模板"></p>
</li>
<li><h5 id="任务构建"><a href="#任务构建" class="headerlink" title="任务构建"></a>任务构建</h5><p>​    <img src="/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/%E7%AC%AC%E4%BA%94%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%9E%84%E5%BB%BA.png" alt="任务构建"></p>
</li>
<li><h5 id="任务执行及日志查看"><a href="#任务执行及日志查看" class="headerlink" title="任务执行及日志查看"></a>任务执行及日志查看</h5><p>​    <img src="/2022/03/26/DataX-web-4-%E4%BD%BF%E7%94%A8/%E7%AC%AC%E5%85%AD%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%8F%8A%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B" alt="任务执行及日志查看"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ETL</category>
      </categories>
      <tags>
        <tag>DataX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker_基础1_简介</title>
    <url>/2020/06/27/Docker-%E5%9F%BA%E7%A1%801-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h4><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上，也可以实现虚拟化。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318">沙箱</a>机制，相互之间不会有任何接口</p>
<p>​    <strong>docker理念：</strong>一次封装到处运行</p>
<p>​    <strong>docker包含两方面技术    ：</strong>镜像技术、容器虚拟技术 </p>
<span id="more"></span>

<hr>
<h4 id="docker优势"><a href="#docker优势" class="headerlink" title="docker优势"></a>docker优势</h4><table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody><tr>
<td>启动</td>
<td>秒级</td>
<td>分钟</td>
</tr>
<tr>
<td>磁盘使用</td>
<td>一般为 MB</td>
<td>一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般为几十个</td>
</tr>
</tbody></table>
<ul>
<li>更高效的利用资源：docker容器不需要像虚拟机运行完整的系统造成额外的开销。</li>
<li>更快速的启动时间：对比虚拟机的服务，docker容器启动更快。</li>
<li>一致的运行环境：通过镜像技术，可以达到 开发、测试、生产等环境的一致性</li>
</ul>
<hr>
<h4 id="docker三要素"><a href="#docker三要素" class="headerlink" title="docker三要素"></a>docker三要素</h4><ul>
<li>镜像（Images）</li>
<li>容器（container）</li>
<li>仓库（repository）</li>
</ul>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker_基础2_安装</title>
    <url>/2020/06/27/Docker-%E5%9F%BA%E7%A1%802-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="docker文档地址"><a href="#docker文档地址" class="headerlink" title="docker文档地址"></a>docker文档地址</h4><p><a href="https://docs.docker.com/engine/install/centos/">docker文档地址</a></p>
<span id="more"></span>

<hr>
<h4 id="CentOS6-8-安装步骤"><a href="#CentOS6-8-安装步骤" class="headerlink" title="CentOS6.8 安装步骤"></a>CentOS6.8 安装步骤</h4><ul>
<li>yml install -y epel-release</li>
<li>yml install -y docker-io</li>
<li>安装后的配置文件：/etc/sysconfig/docker</li>
<li>启动docker服务：service docker start</li>
<li>docker验证：docker version</li>
</ul>
<hr>
<h4 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h4><ul>
<li><p>卸载老的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line"><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">                  docker-client-latest \</span></span><br><span class="line"><span class="bash">                  docker-common \</span></span><br><span class="line"><span class="bash">                  docker-latest \</span></span><br><span class="line"><span class="bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-engine</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装<strong>yum-utils</strong>软件包（提供<strong>yum-config-manager</strong> 实用程序）并设置<strong>稳定的</strong>存储库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装docker引擎</p>
<ul>
<li><p>安装<em>最新版本</em>的Docker Engine和容器，或转到下一步以安装特定版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure></li>
<li><p>要安装<em>特定版本</em>的Docker Engine，请在存储库中列出可用版本，然后选择并安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>

<p>返回的列表取决于启用了哪些存储库，并且特定于您的CentOS版本（<code>.el7</code>在本示例中以后缀表示）。</p>
<p>b。通过其完全合格的软件包名称安装特定版本，该软件包名称是软件包名称（<code>docker-ce</code>）加上版本字符串（第二列），从第一个冒号（<code>:</code>）到第一个连字符，以连字符（<code>-</code>）分隔。例如，<code>docker-ce-18.09.1</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure></li>
<li><p>docker验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h4><ul>
<li><p>阿里云搜索 <strong>容器镜像服务</strong>  -》 镜像中心 -》镜像加速器</p>
</li>
<li><p>按照操作文档配置镜像加速，您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://zjdr3k55.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker_基础3_基础命令</title>
    <url>/2020/06/27/Docker-%E5%9F%BA%E7%A1%803-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><ul>
<li>查看版本：<ul>
<li>docker version</li>
</ul>
</li>
<li>docker信息：<ul>
<li>docker info</li>
</ul>
</li>
<li>docker命令帮助：<ul>
<li>docker –help</li>
</ul>
</li>
</ul>
<span id="more"></span>

<hr>
<h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><ul>
<li>列出本机所有镜像：<ul>
<li>docker images [options]<ul>
<li>-a：列出本地所有的镜像（含中间映像层）    </li>
<li>-q：只显示镜像ID</li>
<li>–digests：显示镜像的摘要信息</li>
<li>–no-trunc：显示完整的镜像信息</li>
</ul>
</li>
</ul>
</li>
<li>仓库中检索镜像：<ul>
<li>docker search [options]<ul>
<li>–no-trunc：显示完整镜像描述</li>
<li>-s：列出收藏数不小于指定值的镜像</li>
<li>–automated：只列出 automated build（自动构建）类型的镜像</li>
</ul>
</li>
</ul>
</li>
<li>拉取镜像：<ul>
<li>docker pull ImageName:tag</li>
</ul>
</li>
<li>移除镜像：<ul>
<li>docker rmi ImageName</li>
<li>移除所有镜像：docker rmi -f $(docker images -qa)</li>
</ul>
</li>
</ul>
<hr>
<h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ul>
<li><p>新建并启动容器</p>
<ul>
<li><p>docker run [options] image [command] </p>
<ul>
<li>–name：容器名称</li>
<li>-d：后台运行，并返回容器id</li>
<li>-i：交互模式运行容器，通常与 -t 同时使用</li>
<li>-t：为容器重新分配一个伪输入终断</li>
<li>-P：随机端口映射</li>
<li>-p：指定端口映射</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查看所有正在运行的容器</p>
<ul>
<li>docker ps</li>
</ul>
</li>
<li><p>退出容器</p>
<ul>
<li>exit：停止并退出容器</li>
<li>ctrl+p+q：容器不停止退出</li>
</ul>
</li>
<li><p>启动容器</p>
<ul>
<li>docker start 容器id或者容器名</li>
</ul>
</li>
<li><p>重启容器</p>
<ul>
<li>docker restart 容器id或者容器名</li>
</ul>
</li>
<li><p>停止容器</p>
<ul>
<li>docker stop 容器id或者容器名</li>
</ul>
</li>
<li><p>强制停止容器</p>
<ul>
<li>docker kill 容器id或者容器名</li>
</ul>
</li>
<li><p>删除已经停止的容器</p>
<ul>
<li>docker rm 容器id</li>
<li>docker rm $(docker ps -aq)</li>
</ul>
</li>
<li><p>查看容器日志</p>
<ul>
<li>docker logs -f -t –tail 容器id<ul>
<li>-t：加入时间戳</li>
<li>-f：跟随最新的日志打印</li>
<li>–tail 数字：显示最后多少条</li>
</ul>
</li>
</ul>
</li>
<li><p>查看容器内运行的进程</p>
<ul>
<li>docker top 容器id</li>
</ul>
</li>
<li><p>查看容器内部细节（）</p>
<ul>
<li>docker inspect 容器id</li>
</ul>
</li>
<li><p>进入正在运行的容器并以命令交互</p>
<ul>
<li>docker exec -it 容器id bashShell （容器中打开新的终端，不会的启动新的进程）</li>
<li>重新进入：docker attch ring器id（直接进入容器启动命令的终端，不会启动新的进程）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach mysql</span><br><span class="line">docker exec -it 容器id ls -l /temp  </span><br></pre></td></tr></table></figure></li>
<li><p>从容器内拷贝文件到主机上</p>
<ul>
<li><p>docker cp 容器id:容器内路径  目的主机路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//从主机上拷贝文件到容器内(a96783aeb2d8为容器id）</span><br><span class="line">docker cp /home/xs/test.tar.gz a96783aeb2d8:/home</span><br><span class="line">//从容器拷贝文件到主机</span><br><span class="line">docker cp a96783aeb2d8:/home/test.tar.gz /home/xs</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-基础4-镜像commit</title>
    <url>/2020/06/28/Docker-%E5%9F%BA%E7%A1%804-%E9%95%9C%E5%83%8Fcommit/</url>
    <content><![CDATA[<h4 id="提交定制容器"><a href="#提交定制容器" class="headerlink" title="提交定制容器"></a>提交定制容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo docker commit 镜像ID 容器名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo docker commit -m=<span class="string">&quot;A new custom image&quot;</span> --author=<span class="string">&quot;mark&quot;</span> 87ea023e7c05 ubuntu/Second:webserver</span></span><br><span class="line">	参数说明</span><br><span class="line">		-a, --author 作者</span><br><span class="line">		-m, --message 提交描述</span><br><span class="line">		-p, --pause      提交期间暂停容器</span><br></pre></td></tr></table></figure>

<hr>
<p>本地镜像提交到云服务</p>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker_基础5_容器数据卷</title>
    <url>/2020/06/30/Docker-%E5%9F%BA%E7%A1%805-%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    <content><![CDATA[<h4 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h4><p>​    卷就是目录或文件，存在一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System 提供一些用于持续存储或共享数据的特性：</p>
<p>​    卷的设计目的就是数据持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p>
<p>​    主要目的：数据持久化、容器之间数据共享、宿主机和容器之间数据共享</p>
<span id="more"></span>

<hr>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>数据卷可在容器之间共享或重用数据</li>
<li>卷中的更改可以直接生效</li>
<li>数据卷中的更改不会包含在镜像更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<hr>
<h4 id="数据卷添加两种方式"><a href="#数据卷添加两种方式" class="headerlink" title="数据卷添加两种方式"></a>数据卷添加两种方式</h4><ol>
<li><p>命令添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加数据卷</span></span><br><span class="line">docker run -it -v /宿主机绝对路径目录：/容器内目录  镜像名  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看数据卷是否挂载成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HostConfig 节点，查看容器绑定文件夹 binds</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Volumes 节点 查看容器绑定文件夹 和 主机文件夹绑定关系</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VolumesRW 说明可以读写的文件夹</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令带权限</span></span><br><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro  镜像名  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>DockerFile添加</p>
</li>
</ol>
<hr>
<h4 id="容器继承"><a href="#容器继承" class="headerlink" title="容器继承"></a>容器继承</h4><p>容器继承可以使 子容器 共享 父容器 的容器卷，达到数据共享的目的</p>
<p>volumes-from 继承容器，达到容器卷共享</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mytomcat02 --volumes-from mytomcat01 mytomcat</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-基础6-DockerFile示例</title>
    <url>/2020/07/04/Docker-%E5%9F%BA%E7%A1%806-DockerFile%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>示例需求：</p>
<ul>
<li>进入容器 /temp为路镜</li>
<li>能运行vim命令</li>
<li>能运行ifconfig命令</li>
<li>暴露80端口</li>
</ul>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步：编写 Dockerfile 文件</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">ENV mypath /temp</span><br><span class="line">WORKDIR $mypath</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：构建build</span></span><br><span class="line">docker build -f /root/DockerFile/centos_dockerfile  -t mydockerfile_centos .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步：运行镜像</span></span><br><span class="line">docker run mydockerfile_centos</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四步：列出镜像变更历史</span></span><br><span class="line">docker history mydockerfile_centos</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><p>示例需求：</p>
<ul>
<li>自定义tomcat9</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步：编写docker</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER markXu&lt;1390420504@qq.com&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">把宿主机当前上下文的文件拷贝到容器/usr/<span class="built_in">local</span>/路径下</span></span><br><span class="line"><span class="meta">#</span><span class="bash">COPY c.txt /usr/<span class="built_in">local</span>/cincontainer.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">把java 与 tomcat 添加到容器内</span></span><br><span class="line">ADD jdk-8u251-linux-i586.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-8.5.56.tar.gz /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash">安装vim编辑器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">RUN yum -y install vim</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置工作访问的 WORKDIR路径，登录落脚点</span></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"><span class="meta">#</span><span class="bash">配置java与tomcat环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_251</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.56</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-8.5.56</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="meta">#</span><span class="bash">容器运行时监听端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="meta">#</span><span class="bash">启动时运行tomcat容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ENTRYPOINT [<span class="string">&quot;/usr/local/apache-tomcat-8.5.56/bin/startup.sh&quot;</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD [<span class="string">&quot;usr/local/apache-tomcat-8.5.56/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span></span><br><span class="line">CMD  /usr/local/apache-tomcat-8.5.56/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.5.56/logs/catalina.out</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：构建</span></span><br><span class="line">docker build -f /root/DockerFile/tomcat8_jdk8_dockerfile -t jdk8_tomcat8 .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步：运行</span></span><br><span class="line">docker run jdk8_tomcat8</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-基础7-安装案例</title>
    <url>/2020/07/05/Docker-%E5%9F%BA%E7%A1%807-%E5%AE%89%E8%A3%85%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步：拉取镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：运行镜像</span></span><br><span class="line">docker run -d -p 8080:8080 -v /root/docker_v/tomcat/webapps:/webapps -v /root/docker_v/tomcat/logs:/logs --name mytomcat tomcat</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<hr>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:latest</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看本地镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行镜像生成容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span></span><br><span class="line">参数说明：</span><br><span class="line">*-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。</span><br><span class="line">*MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span><br><span class="line">docker exec -it mysql bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">登录mysql</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456!&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加远程登录用户,最新版本需要添加，5.7版本mysql无需添加</span></span><br><span class="line">CREATE USER &#x27;liaozesong&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Lzslov123!&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;liaozesong&#x27;@&#x27;%&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">映射地址</span></span><br><span class="line">docker run -p 3306:3306 --name mysql -v /root/docker_v/mysql/conf:/etc/mysql/conf.d -v /root/docker_v/mysql/logs:/logs -v /root/docker_v/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步 拉取镜像</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：运行镜像</span></span><br><span class="line">docker run -p 6379:6379 -v /root/docker_v/redis/data:/data -v /root/docker_v/redis/redis.conf/:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步：进入容器：</span></span><br><span class="line">docker exec -it f0b393b02732 redis-cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四步：尝试设置值</span></span><br><span class="line">set key  key</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装-elasticsearch"><a href="#安装-elasticsearch" class="headerlink" title="安装 elasticsearch"></a>安装 elasticsearch</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步：拉取镜像</span></span><br><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:6.3.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：运行容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ElasticSearch 的默认端口是9200，我们把宿主环境9200端口映射到 Docker 容器中的9200端口，就可以访问到 Docker 容器中的 ElasticSearch 服务了，同时我们把这个容器命名为 es</span> </span><br><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.3.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步：配置容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于要进行配置，因此需要进入容器当中修改相应的配置信息。</span></span><br><span class="line">docker exec -it es /bin/bash</span><br><span class="line"><span class="meta">		</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示文件</span></span><br><span class="line">示例结果如下</span><br><span class="line">LICENSE.txt 	README.textile 		config 	lib 	</span><br><span class="line">modules 	NOTICE.txt 	bin 	data 	</span><br><span class="line">ogs 		plugins</span><br><span class="line"><span class="meta">		</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入配置文件夹</span></span><br><span class="line">cd 	config</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示文件</span></span><br><span class="line">ls</span><br><span class="line">结果如下:</span><br><span class="line">elasticsearch.keystore 	ingest-geoip 	log4j2.properties 	roles.yml </span><br><span class="line">users_roles 	elasticsearch.yml 	jvm.options 	role_mapping.yml </span><br><span class="line">users</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vi 	elasticsearch.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入跨域配置</span></span><br><span class="line">http.cors.enabled: true </span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四步：重启容器</span></span><br><span class="line">docker restart es</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第五步：Docker 部署 ElasticSearch-Head</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为什么要安装ElasticSearch-Head呢，原因是需要有一个管理界面进行查看ElasticSearch相关信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像 https://www.jianshu.com/p/e3f7bf6277f9</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行elasticsearch-head 容器</span></span><br><span class="line">docker run -d --name es_admin -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>

<p>可能出现的失败</p>
<p>1、Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=’Cannot allocate memory’ (errno=12)</p>
<p>​    原因：由于elasticsearch5.0默认分配jvm空间大小为2g，修改jvm空间分配</p>
<p>vim config/jvm.options</p>
<p>​       -Xms2g</p>
<p>​       -Xmx2g</p>
<p>​    修改为</p>
<p>​    -Xms512m</p>
<p>​            -Xmx512m</p>
<hr>
<p>安装 Oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.拉取镜像:</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.创建容器</span> </span><br><span class="line">docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br><span class="line"></span><br><span class="line">3.进入镜像配置</span><br><span class="line">docker exec -it oracle11g bash</span><br><span class="line">su root;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">密码:helowin</span></span><br><span class="line"></span><br><span class="line">4.编辑环境变量:</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">写入最后</span></span><br><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">5.创建软连接</span><br><span class="line">ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">6.登录sqlplus–修改sys、system用户密码–创建用户</span><br><span class="line"><span class="meta">#</span><span class="bash">6.1</span></span><br><span class="line">su - oracle</span><br><span class="line"><span class="meta">#</span><span class="bash">6.2</span></span><br><span class="line">sqlplus /nolog</span><br><span class="line"><span class="meta">#</span><span class="bash">6.3</span></span><br><span class="line">conn /as sysdba</span><br><span class="line"></span><br><span class="line">7.修改密码：</span><br><span class="line">alter user system identified by system;</span><br><span class="line">alter user sys identified by sys;</span><br><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class="line"></span><br><span class="line">8.创建用户</span><br><span class="line">create user test identified by test;</span><br><span class="line"></span><br><span class="line">9.并给用户赋予权限</span><br><span class="line">grant connect,resource,dba to test;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Elaticsearch核心概念</title>
    <url>/2020/08/13/ElesticSearch-%E5%9F%BA%E7%A1%802-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<ul>
<li><h4 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h4><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索 引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这 个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索 引。 </p>
<span id="more"></span></li>
<li><h4 id="类型-type"><a href="#类型-type" class="headerlink" title="类型 type"></a>类型 type</h4><p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来 定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数 据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可 以为评论数据定义另一个类型。 </p>
</li>
<li><h4 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h4><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识 </p>
</li>
<li><h4 id="映射-mapping"><a href="#映射-mapping" class="headerlink" title="映射 mapping"></a>映射 mapping</h4><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等， 这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据 对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好</p>
</li>
<li><h4 id="文档-document"><a href="#文档-document" class="headerlink" title="文档 document"></a>文档 document</h4><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然， 也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存 在的互联网数据交互格式。<br>在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须 被索引/赋予一个索引的type。 </p>
</li>
<li><h4 id="接近实时-NRT"><a href="#接近实时-NRT" class="headerlink" title="接近实时 NRT"></a>接近实时 NRT</h4><p>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延 迟（通常是1秒以内） </p>
</li>
<li><h4 id="集群-cluster"><a href="#集群-cluster" class="headerlink" title="集群 cluster"></a>集群 cluster</h4><p>Relational DB ‐&gt; Databases ‐&gt; Tables ‐&gt; Rows ‐&gt; Columns Elasticsearch ‐&gt; Indices   ‐&gt; Types  ‐&gt; Documents ‐&gt; Fields<br>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由 一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集 群的名字，来加入这个集群 </p>
</li>
<li><h4 id="节点-node"><a href="#节点-node" class="headerlink" title="节点 node"></a>节点 node</h4><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一 个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的 时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对 应于Elasticsearch集群中的哪些节点。<br>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫 做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此， 它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。<br>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点， 这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。 </p>
</li>
<li><h4 id="分片和复制-shards-amp-replicas"><a href="#分片和复制-shards-amp-replicas" class="headerlink" title="分片和复制 shards&amp;replicas"></a>分片和复制 shards&amp;replicas</h4><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任 一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供 了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每 个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主 要有两方面的原因： 1）允许你水平分割/扩展你的内容容量。 2）允许你在分片（潜在地，位于多个节点上）之上 进行分布式的、并行的操作，进而提高性能/吞吐量。 至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说， 这些都是透明的。<br>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因 消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分 片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。<br>复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分 片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以 在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制） 或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分 片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你 事后不能改变分片的数量。<br>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节 点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>es入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Elaticsearch安装</title>
    <url>/2020/08/13/ElesticSearch-%E5%9F%BA%E7%A1%801-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="安装es"><a href="#安装es" class="headerlink" title="安装es"></a>安装es</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装JDK环境</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载es</span></span><br><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xvf elasticsearch-7.13.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 root 用户启动，修改 bin/elasticsearch 加上ES_JAVA_OPTS属性：</span></span><br><span class="line">ES_JAVA_OPTS=&quot;-Des.insecure.allow.root=true&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 es 允许跨域访问，elasticsearch.yml，加入以下代码</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意开启es对应的防火墙端口</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 es 用户组和用户</span></span><br><span class="line">groupadd esgroup</span><br><span class="line">useradd esuser -g esgroup -p espassword</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改elasticsearch文件夹及内部文件的所属用户及组</span></span><br><span class="line">chown -R esuser:esgroup elasticsearch-6.2.4</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换 esuser 并启动 es</span></span><br><span class="line">su esuser</span><br><span class="line">cd elasticsearch-7.13.0/bin</span><br><span class="line">./elasticsearch</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调整JVM的内存大小：</span></span><br><span class="line">vi bin/elasticsearch</span><br><span class="line">ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用接口查看本地es是否启动</span> </span><br><span class="line">curl 127.0.0.1:9200</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动多个实例</span></span><br><span class="line">./elasticsearch -Epath.data=data2 -Epath.logs=log2</span><br><span class="line">./elasticsearch -Epath.data=data3 -Epath.logs=log3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群健康查询</span></span><br><span class="line">curl -X GET &quot;localhost:9200/_cat/health?v&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有节点</span></span><br><span class="line">curl -X GET &quot;localhost:9200/_cat/nodes?v&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有索引</span></span><br><span class="line">curl -X GET &quot;localhost:9200/_cat/indices?v&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="安装Head插件"><a href="#安装Head插件" class="headerlink" title="安装Head插件"></a>安装Head插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> elasticsearch-head 需要用到 grunt，而grunt需要npm包管理器，所以nodejs是必须要安装的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先要安装node</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、安装 grunt，安装elasticsearch-head依赖包</span></span><br><span class="line">npm install ‐g grunt‐cli</span><br><span class="line">cd /usr/local/elasticsearch-head/</span><br><span class="line">cnpm install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改Gruntfile.js</span></span><br><span class="line">cd /usr/local/elasticsearch-head/</span><br><span class="line">vi Gruntfile.js</span><br><span class="line"><span class="meta">#</span><span class="bash">在connect--&gt;server--&gt;options下面添加：hostname:’*’，允许所有IP可以访问</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、修改elasticsearch-head默认连接地址</span></span><br><span class="line"> cd /usr/local/elasticsearch-head/_site/</span><br><span class="line"> vi app.js</span><br><span class="line"> 将this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://localhost:9200&quot;;中的localhost修改成你es的服务器地址</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、下载Kibana  https://www.elastic.co/downloads/kibana</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、把下载好的压缩包拷贝到/soft目录下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、解压缩，并把解压后的目录移动到/user/<span class="built_in">local</span>/kibana</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、编辑kibana配置文件</span></span><br><span class="line">	vi /usr/local/kibana/config/kibana.yml</span><br><span class="line"><span class="meta">	#</span><span class="bash">server.host,elasticsearch.url 修改为自己的ip地址</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、开启kibana端口，kibana端口 /usr/<span class="built_in">local</span>/kibana/config/kibana.yml 文件中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、下载中文分词器  https://github.com/medcl/elasticsearch-analysis-ik</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、解压分词器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、进入elasticsearch-analysis-ik-master，编译源码</span></span><br><span class="line">	mvn clean install -Dmaven.test.skip=true </span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、在es的plugins文件夹下创建目录ik</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、将编译后生成的elasticsearch-analysis-ik-版本.zip移动到ik下，并解压</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、解压后的内容移动到ik目录下</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="配置Elasticsearch"><a href="#配置Elasticsearch" class="headerlink" title="配置Elasticsearch"></a>配置Elasticsearch</h4><p>es有三个配置文件($ES_HOME/config  目录)：</p>
<ul>
<li>elasticsearch.yml  用于配置Elasticsearch</li>
<li>jvm.options 用于配置 Elasticsearch JVM设置</li>
<li>log4j2.properties 用于配置 Elasticsearch 日志记录</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>es入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-基础6-DockerFile</title>
    <url>/2020/07/04/Docker-%E5%9F%BA%E7%A1%806-DockerFile/</url>
    <content><![CDATA[<h4 id="Docker-执行-DockerFile-的大致流程"><a href="#Docker-执行-DockerFile-的大致流程" class="headerlink" title="Docker 执行 DockerFile 的大致流程"></a>Docker 执行 DockerFile 的大致流程</h4><ul>
<li>docker 从基础镜像运行一个容器</li>
<li>执行一条指令并对容器做出修改</li>
<li>执行类似 docker commit 的操作提交一个新的镜像层</li>
<li>docker 再基于刚提交的镜像运行一个新容器</li>
<li>执行 dockerfile 中的下一条指令直到所有指令都执行完成</li>
</ul>
<p>DockerFile 面向开发，Docker镜像称为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p>
<span id="more"></span>

<hr>
<h4 id="Docker-File-保留字指令"><a href="#Docker-File-保留字指令" class="headerlink" title="Docker File 保留字指令"></a>Docker File 保留字指令</h4><ul>
<li><strong>FROM</strong> ：基础镜像，当前新镜像基于那个镜像</li>
<li><strong>MAINTAINER</strong>：镜像维护者的姓名和邮箱地址</li>
<li><strong>RUN</strong>：容器构建时需要运行的命令</li>
<li><strong>EXPOSE</strong>：当前容器对外暴露出的端口</li>
<li><strong>WORKDIR</strong>：指定在创建容器后，终端默认登录进来的工作目录</li>
<li><strong>ENV</strong>：用于在构建过程中设置的环境变量</li>
<li><strong>ADD</strong>：将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理URL和解压tar压缩包</li>
<li><strong>COPY</strong>：<ul>
<li>类似ADD 拷贝文件和目录到镜像中</li>
<li>将从构建上下文目录中 &lt;源路径的文件&gt;/目录复制到新的一层的镜像内的 &lt;目录路径位置&gt;</li>
</ul>
</li>
<li><strong>VOLUME</strong>：容器数据卷，用于数据保存和持久化工作</li>
<li><strong>CMD</strong>：<ul>
<li>指定一个容器启动时要运行的命令</li>
<li>DockerFile 中可以有多个CMD 命令，但只有最后一个生效，CMD会被docker run 之后的参数替换</li>
</ul>
</li>
<li><strong>ENTRYPOINT</strong><ul>
<li>指定一个容器启动时要运行的命令</li>
<li>ENRTYPOINT 的目的和CMD 一样，都是在指定容器启动程序及参数</li>
</ul>
</li>
<li><strong>ONBUILD</strong>：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后，父镜像的onbuild被触发。</li>
</ul>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Elaticsearch文档操作</title>
    <url>/2020/08/13/ElesticSearch-%E5%9F%BA%E7%A1%804-%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="修改文档document"><a href="#修改文档document" class="headerlink" title="修改文档document"></a>修改文档document</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#  POST	localhost:<span class="number">9200</span>/blog1/article/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">	<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;【修改】ElasticSearch是一个基于Lucene的搜索服务器&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;【修改】它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<hr>
<h4 id="删除文档document"><a href="#删除文档document" class="headerlink" title="删除文档document"></a>删除文档document</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#  DELETE	localhost:<span class="number">9200</span>/blog1/article/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="查询文档-根据id查询"><a href="#查询文档-根据id查询" class="headerlink" title="查询文档-根据id查询"></a>查询文档-根据id查询</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># GET	localhost:<span class="number">9200</span>/blog1/article/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="查询文档-querystring查询"><a href="#查询文档-querystring查询" class="headerlink" title="查询文档-querystring查询"></a>查询文档-querystring查询</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># POST	localhost:<span class="number">9200</span>/blog1/article/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query_string&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;default_field&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;搜索服务器&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="查询文档-term查询"><a href="#查询文档-term查询" class="headerlink" title="查询文档-term查询"></a>查询文档-term查询</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># POST	localhost:<span class="number">9200</span>/blog1/article/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;搜索&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="根据分词器查看分词效果"><a href="#根据分词器查看分词效果" class="headerlink" title="根据分词器查看分词效果"></a>根据分词器查看分词效果</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># http:<span class="comment">//127.0.0.1:9200/_analyze?analyzer=standard&amp;pretty=true&amp;text=我是程序员</span></span><br><span class="line"># ik 最小切分模式 http:<span class="comment">//127.0.0.1:9200/_analyze?analyzer=ik_smart&amp;pretty=true&amp;text=我是程序员</span></span><br><span class="line"># ik 最细切分模式 http:<span class="comment">//127.0.0.1:9200/_analyze?analyzer=ik_max_word&amp;pretty=true&amp;text=我是程序员</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>es入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Elaticsearch文档操作</title>
    <url>/2020/08/13/ElesticSearch-%E5%9F%BA%E7%A1%805-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>修改elasticsearch-cluster\node*\config\elasticsearch.yml配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">节点1的配置信息：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">集群名称，保证唯一</span></span><br><span class="line">cluster.name: my-elasticsearch</span><br><span class="line"><span class="meta">#</span><span class="bash">节点名称，必须不一样</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta">#</span><span class="bash">必须为本机的ip地址</span></span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash">服务端口号，在同一机器下必须不一样</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta">#</span><span class="bash">集群间通信端口号，在同一机器下必须不一样</span></span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line"><span class="meta">#</span><span class="bash">设置集群自动发现机器ip集合</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1:9300&quot;,&quot;127.0.0.1:9301&quot;,&quot;127.0.0.1:9302&quot;]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>es入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Elaticsearch索引操作</title>
    <url>/2020/08/13/ElesticSearch-%E5%9F%BA%E7%A1%803-%E7%B4%A2%E5%BC%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#  PUT localhost:<span class="number">9200</span>/blog1</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<hr>
<h4 id="创建索引index和映射mapping"><a href="#创建索引index和映射mapping" class="headerlink" title="创建索引index和映射mapping"></a>创建索引index和映射mapping</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#  PUT localhost:<span class="number">9200</span>/blog1</span><br><span class="line">     </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;article&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">                	<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>, <span class="comment">//是否存储</span></span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;not_analyzed&quot;</span> <span class="comment">//是否创建索引</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">                	<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="string">&quot;analyzed&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span> <span class="comment">//标准分词器</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">                	<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="comment">// 字段类型</span></span><br><span class="line">                    <span class="attr">&quot;store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">&quot;index&quot;</span>:<span class="literal">true</span>, <span class="comment">//是否创建索引</span></span><br><span class="line">                    <span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span> <span class="comment">//ik分词器</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="创建索引后设置Mapping"><a href="#创建索引后设置Mapping" class="headerlink" title="创建索引后设置Mapping"></a>创建索引后设置Mapping</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># POST	http:<span class="comment">//127.0.0.1:9200/blog2/hello/_mapping</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;hello&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:&#123;</span><br><span class="line">                	<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;long&quot;</span>,</span><br><span class="line">                	<span class="attr">&quot;store&quot;</span>:<span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">                	<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                	<span class="attr">&quot;store&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                	<span class="attr">&quot;index&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                	<span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">                	<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                	<span class="attr">&quot;store&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                	<span class="attr">&quot;index&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                	<span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># DELETE		localhost:<span class="number">9200</span>/blog1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>es入门</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-原子类-AtomicInter</title>
    <url>/2020/04/23/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BB-AtomicBoolean/</url>
    <content><![CDATA[<h4 id="AtomicBoolean简介"><a href="#AtomicBoolean简介" class="headerlink" title="AtomicBoolean简介"></a>AtomicBoolean简介</h4><p>用原子的方式更新 boolean 值。</p>
<p>高并发时候只有一个线程能够访问这个属性。</p>
<hr>
<span id="more"></span>

<h4 id="AtomicBoolean初始化"><a href="#AtomicBoolean初始化" class="headerlink" title="AtomicBoolean初始化"></a>AtomicBoolean初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicBoolean</span><span class="params">(<span class="keyword">boolean</span> initialValue)</span> </span>&#123;</span><br><span class="line">  value = initialValue ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicBoolean</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">private</span> AtomicBoolean flag = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="AtomicBoolean类中方法"><a href="#AtomicBoolean类中方法" class="headerlink" title="AtomicBoolean类中方法"></a>AtomicBoolean类中方法</h4><ul>
<li><p>**compareAndSet(boolean expect, boolean update)**如果当前值<code>==</code>期望值，则将该值原子设置为给定的更新值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">boolean</span> expect, <span class="keyword">boolean</span> update)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>**get()**返回当前值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>**getAndSet(boolean newValue)**将原子设置为给定值并返回上一个值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>**lazySet(int newValue)**最终设定为给定值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>**set(boolean newValue)**无条件地设置为给定的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>**toString()**返回当前值的<code>String</code>表示形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>**weakCompareAndSet(boolean expect, boolean update)**如果当前值<code>==</code>期望值，则将该值原子设置为给定的更新值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">boolean</span> expect, <span class="keyword">boolean</span> update)</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="使用环境："><a href="#使用环境：" class="headerlink" title="使用环境："></a>使用环境：</h4><p><strong>高并发的情况下，</strong>多个线程可能都读到该变量的值是符合条件的，然后都去修改了变量的值；其实只需要一个线程执行就可以了，主要的原因就是因为if判断和set值是两个操作，这里面存在线程安全的问题；</p>
<hr>
<h4 id="模拟高并发测试"><a href="#模拟高并发测试" class="headerlink" title="模拟高并发测试"></a>模拟高并发测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高并发错误使用 boolean 场景</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarWorker</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            exists = <span class="keyword">true</span>;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:enter&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:leave&quot;</span>);</span><br><span class="line">            exists = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:give up&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BarWorker bar1 = <span class="keyword">new</span> BarWorker(<span class="string">&quot;bar1&quot;</span>);</span><br><span class="line">        BarWorker bar2 = <span class="keyword">new</span> BarWorker(<span class="string">&quot;bar2&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(bar1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(bar2).start();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">bar1:enter</span><br><span class="line">bar2:enter</span><br><span class="line">bar1:leave</span><br><span class="line">bar2:leave</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="并发使用AtomicBoolean"><a href="#并发使用AtomicBoolean" class="headerlink" title="并发使用AtomicBoolean"></a>并发使用AtomicBoolean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomaticTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicBoolean exists = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomaticTest</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exists.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:enter&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:leave&quot;</span>);</span><br><span class="line">            exists.set(<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(name +<span class="string">&quot;:give up&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomaticTest atomatic1 = <span class="keyword">new</span> AtomaticTest(<span class="string">&quot;bar1&quot;</span>);</span><br><span class="line">        AtomaticTest atomatic2 = <span class="keyword">new</span> AtomaticTest(<span class="string">&quot;bar2&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(atomatic1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(atomatic2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">bar2:enter</span><br><span class="line">bar1:give up</span><br><span class="line">bar2:leave</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>es检索语法</title>
    <url>/2020/08/13/ElesticSearch%E6%A3%80%E7%B4%A2%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>es入门</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-原子类-AtomicInteger</title>
    <url>/2020/04/23/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BB-AtomicInteger/</url>
    <content><![CDATA[<h4 id="AtomicInteger简介"><a href="#AtomicInteger简介" class="headerlink" title="AtomicInteger简介"></a>AtomicInteger简介</h4><p>支持原子操作的Integer类</p>
<p>主要在高并发环境下高效程序处理。使用非阻塞算法来实现并发控制</p>
<hr>
<span id="more"></span>

<h4 id="AtomicInteger初始化"><a href="#AtomicInteger初始化" class="headerlink" title="AtomicInteger初始化"></a>AtomicInteger初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">(<span class="keyword">int</span> initialValue)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="AtomicInteger类中方法"><a href="#AtomicInteger类中方法" class="headerlink" title="AtomicInteger类中方法"></a>AtomicInteger类中方法</h4><ul>
<li><p>**get()**获取当前值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> value;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**set(int value)**设置值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;value = newValue;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>lazySet(int newValue)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lazySet延时设置变量值，这个等价于set()方法，但是由于字段是</span></span><br><span class="line"><span class="comment">//volatile类型的，因此次字段的修改会比普通字段（非volatile</span></span><br><span class="line"><span class="comment">//字段）有稍微的性能延时（尽管可以忽略），所以如果不是</span></span><br><span class="line"><span class="comment">//想立即读取设置的新值，允许在“后台”修改值，那么此方法就很有用。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">    unsafe.putOrderedInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**getAndSet(int newValue)**设定新数据,返回旧数据compareAndSet(int expect,int update)比较并设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**compareAndSet(int expect,int update)**比较并设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用unsafe的native方法，实现高效的硬件级别CAS</span></span><br><span class="line"><span class="comment">//native方法</span></span><br><span class="line">	<span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**weakCompareAndSet(int expect,int update)**比较并设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**getAndIncrement()**以原子方式将当前值加 1，相当于线程安全的i++操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> current = get();</span><br><span class="line">            <span class="keyword">int</span> next = current + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**incrementAndGet( )**以原子方式将当前值加 1， 相当于线程安全的++i操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**getAndDecrement( )**以原子方式将当前值减 1， 相当于线程安全的i–操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**decrementAndGet ( )**以原子方式将当前值减 1，相当于线程安全的–i操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">decrementAndGet</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**addAndGet( )**以原子方式将给定值与当前值相加， 实际上就是等于线程安全的i =i+delta操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>**getAndAdd( )**以原子方式将给定值与当前值相加， 相当于线程安全的t=i;i+=delta;return t;操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="使用环境："><a href="#使用环境：" class="headerlink" title="使用环境："></a>使用环境：</h4><p><strong>高并发的情况下，<code>i++</code>无法保证原子性，往往会出现问题，所以引入<code>AtomicInteger</code>类。</strong></p>
<hr>
<h4 id="模拟高并发测试"><a href="#模拟高并发测试" class="headerlink" title="模拟高并发测试"></a>模拟高并发测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomicInteger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADS_COUNT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> countVolatile = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        countVolatile++;</span><br><span class="line">        atomicInteger.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[THREADS_COUNT];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; <span class="number">1000</span>; i1++) &#123;</span><br><span class="line">                    increase();</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        System.out.println(countVolatile);</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output1</span></span><br><span class="line"><span class="number">9977</span></span><br><span class="line"><span class="number">9977</span></span><br><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="comment">//output2</span></span><br><span class="line"><span class="number">9988</span></span><br><span class="line"><span class="number">9991</span></span><br><span class="line"><span class="number">10000</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-原子类-AtomicInter</title>
    <url>/2020/04/23/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<h4 id="JUC原子类"><a href="#JUC原子类" class="headerlink" title="JUC原子类"></a>JUC原子类</h4><p>原子类存在的作用：对应数据进行原子操作；原子操作（操作过程不会被中断，保证数据操作是以原子方式进行的）</p>
<hr>
<span id="more"></span>

<p>根据原子类的数据类型，可以将JUC包中的原子操作类分为4类</p>
<ul>
<li>基本数据类型：AtomicInteger, AtomicLong, AtomicBoolean ;</li>
<li>引用数据类型：AtomicReference, AtomicStampedRerence, AtomicMarkableReference ;</li>
<li>数组类型：AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray ;</li>
<li>对象属性修改类型：AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater ；</li>
</ul>
]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-异常处理-受检-非受检</title>
    <url>/2020/07/05/Java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-%E5%8F%97%E6%A3%80-%E9%9D%9E%E5%8F%97%E6%A3%80/</url>
    <content><![CDATA[<h4 id="异常的结构"><a href="#异常的结构" class="headerlink" title="异常的结构"></a>异常的结构</h4><p>所有异常都有共同的祖先 <strong>Throwable</strong> (可抛出)，</p>
<p>Throwable：有两个重要的子类：<strong>Exception</strong>（异常） 和 <strong>Error</strong>（异常），二者都是 Java 异常处理的重要子类，各自都包含大量的子类，异常和错误的区别是：异常能被程序本身处理，错误无法处理</p>
<hr>
<span id="more"></span>

<h4 id="受检异常和非受检异常"><a href="#受检异常和非受检异常" class="headerlink" title="受检异常和非受检异常"></a>受检异常和非受检异常</h4><ul>
<li><p>受检异常（checked Exception）</p>
<p>runtimeException以外的异常，都属于checkedException，它们都在java.lang库内部定义。Java编译器要求程序必须捕获或声明抛出这种异常。</p>
<ul>
<li>Java.lang.ClassNotFoundException<br>Java.lang.CloneNotSupportedException<br>Java.lang.IllegalAccessException<br>Java.lang.InterruptedException<br>Java.lang.NoSuchFieldException<br>Java.lang.NoSuchMetodException</li>
</ul>
</li>
<li><p>非受检异常（unchecked Exception）</p>
<p>非受检异常指的是java.lang.RuntimeException和java.lang.Error类及其子类</p>
<ul>
<li>Java.lang.ArithmeticException<br>Java.lang.ArrayStoreExcetpion<br>Java.lang.ClassCastException<br>Java.lang.EnumConstantNotPresentException<br>Java.lang.NumberFormatException<br>Java.lang.IndexOutOfBoundsException<br>Java.lang.ArrayIndexOutOfBoundsException<br>Java.lang.StringIndexOutOfBoundsException<br>Java.lang.NullPointerException<br>Java.lang.SecurityException<br>​</li>
</ul>
</li>
</ul>
<hr>
<h4 id="受检异常和非受检异常优缺点"><a href="#受检异常和非受检异常优缺点" class="headerlink" title="受检异常和非受检异常优缺点"></a>受检异常和非受检异常优缺点</h4><p>​    <strong>受检异常</strong>的特点在于它强制要求开发人员在代码中进行显式的声明和捕获，否则就会产生编译错误。这种限制从好的方面来说，可以防止开发人员意外地忽略某些出错的情况，因为编译器不允许出现未被处理的受检异常；从不好的方面来说，受检异常对程序中的设计提出了更高的要求。不恰当地使用受检异常，会使代码中充斥着大量没有实际作用、只是为了通过编译而添加的代码。而非受检异常的特点是，如果不捕获异常，不会产生编译错误，异常会在运行时刻才被抛出。<br>　　<strong>非受检异常</strong>的好处是可以去掉一些不需要的异常处理代码，而不好之处是开发人员可能忽略某些应该处理的异常。一个典型的例子是把字符串转换成数字时会发生java.lang.NumberFormatException异常，忽略该异常可能导致一个错误的输入就造成整个程序退出。</p>
]]></content>
      <categories>
        <category>Java异常</category>
      </categories>
      <tags>
        <tag>Java异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-泛型</title>
    <url>/2020/04/22/Java-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="什么是泛型？"><a href="#什么是泛型？" class="headerlink" title="什么是泛型？"></a>什么是泛型？</h4><p>泛型，即 “参数化类型”。一提到参数 ，我们都知道有 形参 和 实参。</p>
<ul>
<li>形参：定义方法时的参数，例如 function(String a)  其中的 String  a 就为 形参。</li>
<li>实参：调用方法时传入的参数，例如 function(‘hello’) 其中的 ‘hello’  是真实传入到 function 方法的 实参。</li>
</ul>
<p>参数化类型：<strong>就是将类型由原来的具体的类型参数化</strong> </p>
<p>泛型的<strong>本质是为了参数化类型</strong>（在不创建新的类型情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型的使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口、方法，分别被称为 <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p>
<hr>
<span id="more"></span>

<h4 id="泛型的约束和局限性"><a href="#泛型的约束和局限性" class="headerlink" title="泛型的约束和局限性"></a>泛型的约束和局限性</h4><ul>
<li><p>不能用基本类型实例化类型参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有</span></span><br><span class="line">Generic&lt;<span class="keyword">double</span>&gt;</span><br><span class="line"><span class="comment">//正确使用</span></span><br><span class="line">Generic&lt;Double&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>运行时类型查询只适用于原始类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无效案例1</span></span><br><span class="line"><span class="keyword">if</span>( a <span class="keyword">instanceof</span> Generic&lt;String&gt;)</span><br><span class="line"><span class="comment">//无效案例2</span></span><br><span class="line"><span class="keyword">if</span>( a <span class="keyword">instanceof</span> Generic&lt;T&gt;)</span><br><span class="line"><span class="comment">//无效案例3(编译会警告，但可能运行没有错误，具体看 a 的类型情况)</span></span><br><span class="line">Generic&lt;String&gt; p = (Generic&lt;String&gt;) a</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确案例</span></span><br><span class="line">Generic&lt;String&gt; stringGeneric = <span class="string">&quot;&quot;</span>；</span><br><span class="line">Generic&lt;User&gt; user = ...;</span><br><span class="line"><span class="keyword">if</span>( stringGeneric.getClass() == user.getClass() ) <span class="comment">// output  true</span></span><br></pre></td></tr></table></figure></li>
<li><p>不能创建参数化类型数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无效案例</span></span><br><span class="line">Generic&lt;String&gt;[] table = <span class="keyword">new</span> Generic&lt;String&gt;[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过声明通配符数组然后进行类型转换</span></span><br><span class="line">Generic&lt;String&gt;[] table = (Generic&lt;String&gt;) <span class="keyword">new</span> Generic&lt;?&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></li>
<li><p>不能实例化类型变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误案例</span></span><br><span class="line">first = <span class="keyword">new</span> T();</span><br><span class="line">second = <span class="keyword">new</span> T();</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确案例，设计一个API来得到一个Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//key这个成员变量的类型为T,T的类型由外部指定  </span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span></span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span></span><br><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的实参类型需与泛型的类型参数类型相同，即为String.</span></span><br></pre></td></tr></table></figure></li>
<li><p>不能构造泛型数组</p>
</li>
<li><p>泛型类静态上下文中类型变量无效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class="line"><span class="comment">    * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class="line"><span class="comment">    * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class="line"><span class="comment">      &quot;StaticGenerator cannot be refrenced from static context&quot;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>不能抛出或捕获泛型类实例</p>
</li>
</ul>
<hr>
<h4 id="创建泛型类"><a href="#创建泛型类" class="headerlink" title="创建泛型类"></a>创建泛型类</h4><p>​    泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//key这个成员变量的类型为T,T的类型由外部指定  </span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span></span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="创建泛型接口"><a href="#创建泛型接口" class="headerlink" title="创建泛型接口"></a>创建泛型接口</h4><p>​    泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中</span></span><br><span class="line"><span class="comment"> * 即：class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;&#123;</span></span><br><span class="line"><span class="comment"> * 如果不声明泛型，如：class FruitGenerator implements Generator&lt;T&gt;，编译器会报错：&quot;Unknown class&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入泛型实参时：</span></span><br><span class="line"><span class="comment"> * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。</span></span><br><span class="line"><span class="comment"> * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型</span></span><br><span class="line"><span class="comment"> * 即：Generator&lt;T&gt;，public T next();中的的T都要替换成传入的String类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] fruits = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Pear&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> fruits[rand.nextInt(<span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>​    泛型类，是在实例化类的时候知名泛型的具体类型；泛型方法，实在调用方法时候知名泛型的具体类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法的基本介绍</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tClass 传入的泛型实参</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T 返回值为T类型</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</span></span><br><span class="line"><span class="comment"> *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</span></span><br><span class="line"><span class="comment"> *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</span></span><br><span class="line"><span class="comment"> *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">genericMethod</span><span class="params">(Class&lt;T&gt; tClass)</span><span class="keyword">throws</span> InstantiationException ,</span></span><br><span class="line"><span class="function">  IllegalAccessException</span>&#123;</span><br><span class="line">        T instance = tClass.newInstance();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T,K&gt; <span class="function">K <span class="title">showKeyName</span><span class="params">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Object obj = genericMethod(Class.forName(<span class="string">&quot;com.test.test&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//非泛型方法</span></span><br><span class="line"><span class="comment">//虽然在方法中使用了泛型，但是这并不是一个泛型方法。</span></span><br><span class="line"><span class="comment">//这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。所以在这个方法中才可以继续使用 T 这个泛型。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这也不是一个泛型方法，这就是一个普通的方法，只是使用了Generic&lt;Number&gt;这个泛型类做形参而已。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;Number&gt; obj)</span></span>&#123;</span><br><span class="line">  Log.d(<span class="string">&quot;泛型测试&quot;</span>,<span class="string">&quot;key value is &quot;</span> + obj.getKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h4><p>​    我们知道<code>Ingeter</code>是<code>Number</code>的一个子类，同时在特性章节中我们也验证过<code>Generic&lt;Ingeter&gt;</code>与<code>Generic&lt;Number&gt;</code>实际上是相同的一种基本类型。那么问题来了，在使用<code>Generic&lt;Number&gt;</code>作为形参的方法中，能否使用<code>Generic&lt;Ingeter&gt;</code>的实例传入呢？在逻辑上类似于<code>Generic&lt;Number&gt;</code>和<code>Generic&lt;Ingeter&gt;</code>是否可以看成具有父子关系的泛型类型呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue</span><span class="params">(Generic&lt;Number&gt; obj)</span></span>&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;泛型测试&quot;</span>,<span class="string">&quot;key value is &quot;</span> + obj.getKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Generic&lt;Integer&gt; gInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123</span>);</span><br><span class="line">Generic&lt;Number&gt; gNumber = <span class="keyword">new</span> Generic&lt;Number&gt;(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">showKeyValue(gInteger);</span><br><span class="line"><span class="comment">// showKeyValue这个方法编译器会为我们报错：Generic&lt;java.lang.Integer&gt; </span></span><br><span class="line"><span class="comment">// cannot be applied to Generic&lt;java.lang.Number&gt;</span></span><br><span class="line"><span class="comment">// showKeyValue(gInteger);</span></span><br></pre></td></tr></table></figure>

<p>​    如何解决上面的问题？总不能为了定义一个新的方法来处理<code>Generic&lt;Integer&gt;</code>类型的类，这显然与java中的多台理念相违背。因此我们需要一个在逻辑上可以表示同时是<code>Generic&lt;Integer&gt;</code>和<code>Generic&lt;Number&gt;</code>父类的引用类型。由此类型通配符应运而生</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue</span><span class="params">(Generic&lt;?&gt; obj)</span></span>&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;泛型测试&quot;</span>,<span class="string">&quot;key value is &quot;</span> + obj.getKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="泛型的简单使用"><a href="#泛型的简单使用" class="headerlink" title="泛型的简单使用"></a>泛型的简单使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericFruit</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;fruit&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Person&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenerateTest</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_1</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。</span></span><br><span class="line">        <span class="comment">//由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。</span></span><br><span class="line">        <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_3</span><span class="params">(E t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_2</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        GenerateTest&lt;Fruit&gt; generateTest = <span class="keyword">new</span> GenerateTest&lt;Fruit&gt;();</span><br><span class="line">        <span class="comment">//apple是Fruit的子类，所以这里可以</span></span><br><span class="line">        generateTest.show_1(apple);</span><br><span class="line">        <span class="comment">//编译器会报错，因为泛型类型实参指定的是Fruit，而传入的实参类是Person</span></span><br><span class="line">        <span class="comment">//generateTest.show_1(person);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用这两个方法都可以成功</span></span><br><span class="line">        generateTest.show_2(apple);</span><br><span class="line">        generateTest.show_2(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用这两个方法也都可以成功</span></span><br><span class="line">        generateTest.show_3(apple);</span><br><span class="line">        generateTest.show_3(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="泛型中的可变参数"><a href="#泛型中的可变参数" class="headerlink" title="泛型中的可变参数"></a>泛型中的可变参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printMsg</span><span class="params">( T... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(T t : args)&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;泛型测试&quot;</span>,<span class="string">&quot;t is &quot;</span> + t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">printMsg(<span class="string">&quot;111&quot;</span>,<span class="number">222</span>,<span class="string">&quot;aaaa&quot;</span>,<span class="string">&quot;2323.4&quot;</span>,<span class="number">55.55</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java泛型</category>
      </categories>
      <tags>
        <tag>Java-泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Collectors收集器简单方法</title>
    <url>/2020/04/19/Java8-Collectors%E6%94%B6%E9%9B%86%E5%99%A8%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>案例变量：</p>
<p>menu为一个菜单列表（list），内含有name（名字）、calories（热量）、type（类型）属性。</p>
<h4 id="toList"><a href="#toList" class="headerlink" title="toList()"></a>toList()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//List&lt;T&gt;  将流中所有的项目收集到一个List</span></span><br><span class="line">List&lt;Dish&gt; dishes = menuStream.collect(toList());</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="toSet"><a href="#toSet" class="headerlink" title="toSet()"></a>toSet()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set&lt;T&gt;   将流中所有项目收集到一个Set，删除重复项</span></span><br><span class="line">Set&lt;Dish&gt; dishes = menuStream.collect(toSet());</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="toCollection"><a href="#toCollection" class="headerlink" title="toCollection()"></a>toCollection()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Collection&lt;T&gt;   将流中所有项目收集到给定的供应源创建的集合</span></span><br><span class="line">Collection&lt;Dish&gt; dishes = menuStream.collect(toCollection(),ArrayList::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="counting"><a href="#counting" class="headerlink" title="counting()"></a>counting()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Long        计算流中元素个数</span></span><br><span class="line"><span class="keyword">long</span> howManyDishes = menuStream.collect(counting());</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="summingInt"><a href="#summingInt" class="headerlink" title="summingInt()"></a>summingInt()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Integer     对流中项目的一个整数属性求和</span></span><br><span class="line"><span class="keyword">int</span> totalCalories = menuStream.collect(sumingInt(Dish::getCalories))</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="averagingInt"><a href="#averagingInt" class="headerlink" title="averagingInt()"></a>averagingInt()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Double      计算流中项目Integer属性的平均值 </span><br><span class="line">double avgCalories = menuStream.collect(averagingInt(Dish::getCalories));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="summarizingInt"><a href="#summarizingInt" class="headerlink" title="summarizingInt()"></a>summarizingInt()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IntSummaryStatistics     收集关于流中项目Integer 属性的统计值，例如最大、最小、总和与平均值</span></span><br><span class="line">IntSummaryStatistics = menuStream.collect(summarizingInt(Dish::getColories));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String   连接对流中每个项目调用toString方法所生成的字符串</span></span><br><span class="line">String shortMenu = menuStream.map(Dish::getName).collect(joining(<span class="string">&quot;,&quot;</span>));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="maxBy"><a href="#maxBy" class="headerlink" title="maxBy()"></a>maxBy()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Optional&lt;T&gt;   一个包裹了流中按照给定比较器选出的最大元素的Optional，或如果流为空则Optional.empty()</span></span><br><span class="line">Optional&lt;Dish&gt;  fattest = menuStream.collect(maxBy(comparingInt(Dish::getCalories)));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="minxBy"><a href="#minxBy" class="headerlink" title="minxBy()"></a>minxBy()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Optional&lt;T&gt; 一个包裹了流中按照给定比较器选出的最x小元素的Optional，或如果流为空则为Optional.empty()</span></span><br><span class="line">Optional&lt;Dish&gt;  fattest = menuStream.collect(minBy(comparingInt(Dish::getCalories)));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="reducing"><a href="#reducing" class="headerlink" title="reducing()"></a>reducing()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归约操作产生的类型 从一个座位累加器的初始值开始，利用BinaryOperator 与流中元素租个结合，从而将流归约为单个值。</span></span><br><span class="line"><span class="keyword">int</span> totalCalories = menuStream.collect(reducing(<span class="number">0</span>,Dish::getCalories,Integer::sum));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="collectingAndThen"><a href="#collectingAndThen" class="headerlink" title="collectingAndThen()"></a>collectingAndThen()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转换函数返回类型   包裹另一个收集器，对其结果应用转换函数</span></span><br><span class="line"><span class="keyword">int</span> howManyDishes = menuStream.collect(collectingAndThen(toList(),List::size));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="groupingBy"><a href="#groupingBy" class="headerlink" title="groupingBy()"></a>groupingBy()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map&lt;K,List&lt;T&gt;&gt;  根据项目的一个属性的值对流中的项目作分组，并将属性值作为结果Map的键</span></span><br><span class="line">Map&lt;Dish.Type,List&lt;Dish&gt;&gt; dishesByType = menuStream.collect(groupingBy(Dish::getType));</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="partitioningBy"><a href="#partitioningBy" class="headerlink" title="partitioningBy()"></a>partitioningBy()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map&lt;Boolean,List&lt;Dish&gt;&gt;    根据对流中每个项目应用谓词的结果来对项目进行分区</span></span><br><span class="line">Map&lt;Boolean,List&lt;Dish&gt;&gt; vegetarianDishes = menuStream.collect(partitioningBy(Dish::isVegetarian));</span><br></pre></td></tr></table></figure>
<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Stream流的简单应用</title>
    <url>/2020/04/19/Java8-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h4 id="流的简介"><a href="#流的简介" class="headerlink" title="流的简介"></a>流的简介</h4><p>简短的定义：从支持数据处理操作的源生成的元素序列</p>
<p>剖析这个定义</p>
<p>​        元素序列：像集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值，因为集合是数据结构，所以他的主要目的是以特定的时间/空间复杂度存储和访问元素，但流的目的在于表达计算。集合讲的是数据，流讲的是计算。</p>
<p>​        源：流会使用一个提供数据的源，如集合、数组或输入/输出资源。请注意，从有序集合生成流时会保留原有的顺序。由列表生成的流，其元素序列与列表一致。</p>
<p>​       数据处理操作：流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中的常用操作，如filter、map、reduce、find、match、sort等。流操作可以顺序执行也可以并发执行。</p>
<p>​         流水线：很多流操作本身会返回一个流，这样多个操作就可以链接起来，形成一个流水线。</p>
<p>​        内部迭代：与使用迭代器显示迭代的集合不同，流的迭代操作是在背后进行的。</p>
<hr>
<span id="more"></span>

<h4 id="java8-Stream（流）常见的操作主要有以下几个方面"><a href="#java8-Stream（流）常见的操作主要有以下几个方面" class="headerlink" title="java8 Stream（流）常见的操作主要有以下几个方面"></a>java8 Stream（流）常见的操作主要有以下几个方面</h4><p>1）过滤筛选：filter</p>
<p>​    stream 接口支持filter方法，该操作接收一个谓词Predicate（一个返回bollean的函数）作为参数，并返回一个所有符合谓词元素的流。</p>
<p>2）排序：sort</p>
<p>3）去重：distinct</p>
<p>4）映射：map</p>
<p>​    map方法，它会接收一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素。</p>
<p>5）查找匹配：anyMatch、allMatch、noneMatch、findFirst、findAny</p>
<p>​    anyMatch：流中是否有一个元素能匹配给定的谓词。</p>
<p>​    allMath：流中所有元素是否能匹配给定的谓词。</p>
<p>​    noneMath:可以确保流中没有任何元素与给定的谓词匹配。</p>
<p>​    findAny:返回当前流中的任意元素。</p>
<p>​    findFirst：返回流中的第一个元素。</p>
<p>​    findAny 和 findFirst 有什么区别？</p>
<p>​        答案是并行，找到一个元素在并行上限制有很多，如果不关心返回的那个元素，请使用findAny，因为它在使用并行流时限制很少。</p>
<p>6）归约和汇总：reduce、groupingBy</p>
<p>​    reduce:接收两个参数,归约函数</p>
<p>​            1)一个初始值，</p>
<p>​            2）一个 BinaryOperator<T> 来将两个元素结合起来产生一个新值， </T></p>
<p>​                    求和用lambda    (a,b) -&gt;a+b</p>
<p>​                    求积用lambda    (a,b) -&gt;a*b</p>
<p>​    groupingBy:对流按照元素进行分组</p>
<p>​        Map&lt;Currency,List<Transaction>&gt;  transactionByCurrencies =</Transaction></p>
<p>​                    transactions.stream().collect(groupingBy(Transaction::getCurrency));</p>
<p>7）截断流</p>
<p>​    流支持limit(n),该方法返回一个不超过给定长度的流，所需长度作为常数传递给limit。如果流是有序的，则最多返回前n个元素。请注意，limit也可以用在无序流上，比如源是一个set，这种情况，limit的结果不会以任何顺序排列。</p>
<p>8)跳过元素</p>
<p>​    流支持ship(n)方法，返回一个扔掉前n个元素的流，如果流中元素不足n个，怎返回一个空流，注意 limit 和 ship 是互补的。</p>
<p>9）流的扁平化（稍后会有专门的一篇文章来讲解流的扁平化）</p>
<p>​    flatMap方法，可以将生成的单个流合并起来，即扁平化一个流。</p>
<p>几种类型的实际应用案例（以下几个案例是比较常见的stream操作，认真琢磨思考）</p>
<p>案例：<strong>执行交易的交易员。你的经理让你为八个查询找到答案</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）找出2011年发生的所有交易，并且按照交易额排序（从低到高）</span><br><span class="line">2）交易员都在哪些不同城市工作过</span><br><span class="line">3）查找所有来自于剑桥的交易员，并且按照姓名排序</span><br><span class="line">4）返回所有交易员的姓名字符串，按字母排序</span><br><span class="line">5）有没有交易员是在米兰工作过？</span><br><span class="line">6）打印生活在剑桥的交易员所有交易额。</span><br><span class="line">7）所有交易中，最高的交易额是多少？</span><br><span class="line">8）找到交易额的最小的交易。</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="案例代码实现"><a href="#案例代码实现" class="headerlink" title="案例代码实现"></a>案例代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交易员</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String city;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trader</span><span class="params">(String n, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = n;</span><br><span class="line">        <span class="keyword">this</span>.city = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span>+<span class="string">&quot;Trader:&quot;</span>+<span class="keyword">this</span>.name+<span class="string">&quot;in &quot;</span> + <span class="keyword">this</span>.city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交易信息类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Trader trader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transaction</span><span class="params">(Trader trader, <span class="keyword">int</span> year, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.trader = trader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trader <span class="title">getTrader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">this</span>.trader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span>+<span class="keyword">this</span>.trader+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;year:&quot;</span>+<span class="keyword">this</span>.year+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;value:&quot;</span>+<span class="keyword">this</span>.value+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>八种查询实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试用例：执行交易的交易员。你的经理让你为八个查询找到答案</span></span><br><span class="line"><span class="comment">1）找出2011年发生的所有交易，并且按照交易额排序（从低到高）</span></span><br><span class="line"><span class="comment">2）交易员都在哪些不同城市工作过</span></span><br><span class="line"><span class="comment">3）查找所有来自于剑桥的交易员，并且按照姓名排序</span></span><br><span class="line"><span class="comment">4）返回所有交易员的姓名字符串，按字母排序</span></span><br><span class="line"><span class="comment">5）有没有交易员是在米兰工作过？</span></span><br><span class="line"><span class="comment">6）打印生活在剑桥的交易员所有交易额。</span></span><br><span class="line"><span class="comment">7）所有交易中，最高的交易额是多少？</span></span><br><span class="line"><span class="comment">8）找到交易额的最小的交易。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">learnStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span>&#123;</span><br><span class="line">        Trader raoul = <span class="keyword">new</span> Trader(<span class="string">&quot;Raoul&quot;</span>,<span class="string">&quot;Cambridge&quot;</span>);</span><br><span class="line">        Trader mario = <span class="keyword">new</span> Trader(<span class="string">&quot;Mario&quot;</span>,<span class="string">&quot;Milan&quot;</span>);</span><br><span class="line">        Trader alan = <span class="keyword">new</span> Trader(<span class="string">&quot;Alan&quot;</span>,<span class="string">&quot;Cambridge&quot;</span>);</span><br><span class="line">        Trader brian = <span class="keyword">new</span> Trader(<span class="string">&quot;Brian&quot;</span>,<span class="string">&quot;Cambridge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Transaction&gt; transactions = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Transaction(brian,<span class="number">2011</span>,<span class="number">300</span>),</span><br><span class="line">                <span class="keyword">new</span> Transaction(raoul,<span class="number">2012</span>,<span class="number">1000</span>),</span><br><span class="line">                <span class="keyword">new</span> Transaction(raoul,<span class="number">2011</span>,<span class="number">400</span>),</span><br><span class="line">                <span class="keyword">new</span> Transaction(mario,<span class="number">2012</span>,<span class="number">710</span>),</span><br><span class="line">                <span class="keyword">new</span> Transaction(mario,<span class="number">2012</span>,<span class="number">700</span>),</span><br><span class="line">                <span class="keyword">new</span> Transaction(alan,<span class="number">2012</span>,<span class="number">950</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1）找出2011年发生的所有交易，并且按照交易额排序（从低到高）</span></span><br><span class="line">        List&lt;Transaction&gt; tr2011 = transactions.stream()</span><br><span class="line">                .filter(transaction -&gt;transaction.getYear() == <span class="number">2011</span>)</span><br><span class="line">                .sorted(Comparator.comparing(Transaction::getValue))</span><br><span class="line">                .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2）交易员都在哪些不同城市工作过</span></span><br><span class="line">        List&lt;String&gt; cities = transactions.stream()</span><br><span class="line">                .map(transaction -&gt; transaction.getTrader().getCity())</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3）查找所有来自于剑桥的交易员，并且按照姓名排序</span></span><br><span class="line">        List&lt;Trader&gt; name = transactions.stream()</span><br><span class="line">               .map(transaction -&gt; transaction.getTrader())</span><br><span class="line">                .filter(trader -&gt; trader.getCity().equals(<span class="string">&quot;Cambridge&quot;</span>))</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted(Comparator.comparing(Trader::getName))</span><br><span class="line">                .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4）返回所有交易员的姓名字符串，按字母排序</span></span><br><span class="line">        String traderStr = transactions.stream()</span><br><span class="line">                .map(transaction -&gt; transaction.getTrader().getName())</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .reduce(<span class="string">&quot;&quot;</span>,(n1,n2) -&gt; n1+n2);</span><br><span class="line">        String traderStr2 = transactions.stream()</span><br><span class="line">                .map(transaction -&gt; transaction.getTrader().getName())</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(joining());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5）有没有交易员是在米兰工作过？</span></span><br><span class="line">        <span class="keyword">boolean</span> mailanBased = transactions.stream()</span><br><span class="line">                .anyMatch(transaction -&gt; transaction.getTrader().getCity().equals(<span class="string">&quot;Milan&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6）打印生活在剑桥的交易员所有交易额。</span></span><br><span class="line">        transactions.stream()</span><br><span class="line">                .filter(transaction -&gt; transaction.getTrader().getCity().equals(<span class="string">&quot;Cambridge&quot;</span>))</span><br><span class="line">                .map(Transaction::getValue)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7）所有交易中，最高的交易额是多少？</span></span><br><span class="line">        Optional&lt;Integer&gt; highestValue = transactions.stream()</span><br><span class="line">                .map(transaction -&gt; transaction.getValue())</span><br><span class="line">                .reduce(Integer::max);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8）找到交易额的最小的交易。</span></span><br><span class="line">        Optional&lt;Transaction&gt; smallestTransaction = transactions.stream()</span><br><span class="line">                .min(Comparator.comparing(Transaction::getValue));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8 Stream流的简单应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Optional使用总结</title>
    <url>/2020/04/19/Java8-Optional%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="创建Optional对象"><a href="#创建Optional对象" class="headerlink" title="创建Optional对象"></a>创建Optional对象</h4><p>在使用Optional对象之前，你首先要学会如何创建Optional对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">   <span class="comment">//1、声明一个空的Optional对象</span></span><br><span class="line">   Optional&lt;Student&gt; optStu = Optional.empty();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2、依据一个非空值创建一个Optional对象</span></span><br><span class="line">   Student student = <span class="keyword">new</span> Student(<span class="number">20</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">   Optional&lt;Student&gt; createOptByOf = Optional.of(student);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//3、可接受null的Optional</span></span><br><span class="line">   Optional&lt;Student&gt; createOptByOf = Optional.ofNullable(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="flatMap链接Optional对象"><a href="#flatMap链接Optional对象" class="headerlink" title="flatMap链接Optional对象"></a>flatMap链接Optional对象</h4><p>使用map方法，可能会遭遇一个嵌套式Optional结构：例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  	<span class="comment">//人可以没有汽车，所以用Optional修饰</span></span><br><span class="line">  	<span class="keyword">private</span> Optional&lt;Car&gt; car;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> Optional&lt;Car&gt; <span class="title">getCar</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> car;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="comment">//汽车不一定有保险，所有用Optional修饰</span></span><br><span class="line">  	<span class="keyword">private</span> Optional&lt;Incurance&gt; insurance;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> Optional&lt;Incurance&gt; <span class="title">getIncurance</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> insurance;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Incurance</span></span>&#123;</span><br><span class="line">  	<span class="comment">//保险一定有名字，所以没有使用Optional修饰</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> Optional&lt;Incurance&gt; <span class="title">getIncurance</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> insurance;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">    Optional&lt;Person&gt; optPerson = Optional.of(person);</span><br><span class="line">  	<span class="comment">//会遭遇一个嵌套式Optional结构，无法编译成功</span></span><br><span class="line">    Optional&lt;String&gt; name =</span><br><span class="line">            optPerson.map(Person:getCar)</span><br><span class="line">            .map(Car:getInsurance)</span><br><span class="line">            .map(Insurance:getName);</span><br><span class="line">    <span class="comment">//flatMap 解决Optional嵌套问题</span></span><br><span class="line">    Optional&lt;String&gt; name =</span><br><span class="line">            optPerson.flatMap(Person:getCar)</span><br><span class="line">            .flatMap(Car:getInsurance)</span><br><span class="line">            .map(Insurance:getName);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    optPerson 是 Optional<Person> 类型的对象，调用 map 方法没问题，但 getCar 返回的是一个Optional<Car> 类型对象， 这意味map操作结果集市 Optional&lt;Optional<Car>&gt; 类型的对象，此调用是非法的。此种情况采用流的扁平化 flatMap 进行操作，上述代码含有示例。</Car></Car></Person></p>
<hr>
<h4 id="Optional提供了多种方法读取Optional实例中的变量值"><a href="#Optional提供了多种方法读取Optional实例中的变量值" class="headerlink" title="Optional提供了多种方法读取Optional实例中的变量值"></a>Optional提供了多种方法读取Optional实例中的变量值</h4><ul>
<li>get()  如果变量存在，直接返回封装的变量，否则爆出一个NoSuchElementException异常。最简单最不安全的方法</li>
<li>orElse(T other)  它允许你在Optional对象不包含值时提供一个默认值</li>
<li>orElseGet(Supplier&lt;? extends X&gt; other)  只有在Optional为空时才调用，  </li>
<li>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) 和get方法类似，遭遇Optional对象为空时都会抛出一个异常，但是使用orElseThrow你可以定制希望抛出的异常类型</li>
<li>ifPresent(Consumer&lt;? Super T&gt;) 让你能再变量值存在时执行一个作为参数传入的一个方法，否则就不进行任何操作。</li>
</ul>
<hr>
<h4 id="Optional-方法应用示例"><a href="#Optional-方法应用示例" class="headerlink" title="Optional 方法应用示例"></a>Optional 方法应用示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">      Java8Tester java8Tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">      Integer value1 = <span class="keyword">null</span>;</span><br><span class="line">      Integer value2 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.ofNullable - 允许传递为 null 参数</span></span><br><span class="line">      Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span><br><span class="line">      Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line">      System.out.println(java8Tester.sum(a,b));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// Optional.isPresent - 判断值是否存在</span></span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;第一个参数值存在: &quot;</span> + a.isPresent());</span><br><span class="line">      System.out.println(<span class="string">&quot;第二个参数值存在: &quot;</span> + b.isPresent());</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span><br><span class="line">      Integer value1 = a.orElse(<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Optional.get - 获取值，值需要存在</span></span><br><span class="line">      Integer value2 = b.get();</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-函数式接口</title>
    <url>/2020/04/19/Java8-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h4 id="什么是函数式接口？"><a href="#什么是函数式接口？" class="headerlink" title="什么是函数式接口？"></a>什么是函数式接口？</h4><p>​    <strong>函数式接口定义且只定义一个抽象方法。</strong></p>
<p>​    这种类型的接口也称为SAM接口，即Single Abstract Method interfaces</p>
<p>​    Java8中引入了函数式接口新特性，使用@FunctionalInterface标识一个接口为函数式接口</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确的函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// java.lang.Object中的public方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的函数式接口(有多个抽象方法)</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestInterface2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Java-API中常见的函数式接口及使用"><a href="#Java-API中常见的函数式接口及使用" class="headerlink" title="Java API中常见的函数式接口及使用"></a>Java API中常见的函数式接口及使用</h4><ol>
<li><p><strong>Comparable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Comparable 函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Comparable的例子，定义实体类Student，实现Comparable，重写compareTo方法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age, Integer score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getName().compareTo(o.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">filterStudent</span><span class="params">(List&lt;Student&gt; inventory, Predicate&lt;Student&gt; p)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Student apple : inventory) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.test(apple)) &#123;</span><br><span class="line">                result.add(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">1</span>, <span class="number">80</span>);</span><br><span class="line">    Student student2 = <span class="keyword">new</span> Student(<span class="string">&quot;lisi&quot;</span>, <span class="number">3</span>, <span class="number">90</span>);</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(student1);</span><br><span class="line">    list.add(student2);</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    list.stream().forEach(n -&gt; System.out.println(n.toString()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">2</span>, score=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">1</span>, score=<span class="number">80</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Runnable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码示例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">1</span>, <span class="number">80</span>);</span><br><span class="line">    Student student2 = <span class="keyword">new</span> Student(<span class="string">&quot;lisi&quot;</span>, <span class="number">3</span>, <span class="number">90</span>);</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(student1);</span><br><span class="line">    list.add(student2);</span><br><span class="line">    ExecutorService service =  Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">    Runnable r1 = () -&gt; list.forEach(Student::getName);</span><br><span class="line">    service.execute(r1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Function&lt;T, R&gt;</strong></p>
<table>
<thead>
<tr>
<th>Function&lt;T,R&gt;</th>
<th>接收一个参数并返回结果的函数</th>
</tr>
</thead>
<tbody><tr>
<td>BiFunction&lt;T,U,R&gt;</td>
<td>接受两个参数并返回结果的函数</td>
</tr>
<tr>
<td>DoubleFunction<R></R></td>
<td>接收一个double类型的参数并返回结果的函数</td>
</tr>
<tr>
<td>DoubleToIntFunction</td>
<td>接收一个double类型的参数并返回int结果的函数</td>
</tr>
<tr>
<td>DoubleToLongFunction</td>
<td>接收一个double类型的参数并返回long结果的函数</td>
</tr>
<tr>
<td>IntFunction<R></R></td>
<td>接收一个int类型的参数并返回结果的函数</td>
</tr>
<tr>
<td>IntToDoubleFunction</td>
<td>接收一个int类型的参数并返回double结果的函数</td>
</tr>
<tr>
<td>IntToLongFunction</td>
<td>接收一个int类型的参数并返回long结果的函数</td>
</tr>
<tr>
<td>LongFunction<R></R></td>
<td>接收一个long类型的参数并返回结果的函数</td>
</tr>
<tr>
<td>LongToDoubleFunction</td>
<td>接收一个long类型的参数并返回double结果的函数</td>
</tr>
<tr>
<td>LongToIntFunction</td>
<td>接收一个long类型的参数并返回int结果的函数</td>
</tr>
<tr>
<td>ToDoubleBiFunction&lt;T,U&gt;</td>
<td>接收两个参数并返回double结果的函数</td>
</tr>
<tr>
<td>ToDoubleFunction<T></T></td>
<td>接收一个参数并返回double结果的函数</td>
</tr>
<tr>
<td>ToIntBiFunction&lt;T,U&gt;</td>
<td>接收两个参数并返回int结果的函数</td>
</tr>
<tr>
<td>ToIntFunction<T></T></td>
<td>接收一个参数并返回int结果的函数</td>
</tr>
<tr>
<td>ToLongBiFunction&lt;T,U&gt;</td>
<td>接收两个参数并返回long结果的函数</td>
</tr>
<tr>
<td>ToLongFunction<T></T></td>
<td>接收一个参数并返回long结果的函数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码示例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Function&lt;String, String&gt; function = a -&gt; a + <span class="string">&quot; Jack!&quot;</span>;</span><br><span class="line">    System.out.println(function.apply(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// Hello Jack!</span></span><br><span class="line"></span><br><span class="line">    LongFunction&lt;Long&gt; longFunction =  aa -&gt;aa + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> long1 = <span class="number">11111111</span>;</span><br><span class="line">    <span class="keyword">long</span> long2 = longFunction.apply(long1);</span><br><span class="line">    System.out.println(long2);<span class="comment">//11111112</span></span><br><span class="line"></span><br><span class="line">    Function&lt;Integer, Integer&gt; function1 = x -&gt; x * <span class="number">2</span>;</span><br><span class="line">    System.out.println(function1.apply(<span class="number">4</span>));<span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">    Function&lt;Integer, String&gt; function2 = x -&gt; x * <span class="number">2</span> + <span class="string">&quot;dd&quot;</span>;</span><br><span class="line">    System.out.println(function2.apply(<span class="number">4</span>));<span class="comment">//8dd</span></span><br><span class="line"></span><br><span class="line">    Function&lt;String, String&gt; strFunction1 = (str) -&gt; <span class="keyword">new</span> String(str);</span><br><span class="line">    System.out.println(strFunction1.apply(<span class="string">&quot;aa&quot;</span>));<span class="comment">//aa</span></span><br><span class="line"></span><br><span class="line">    Function&lt;String, String&gt; strFunction2 = String::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(strFunction2.apply(<span class="string">&quot;bb&quot;</span>));<span class="comment">//bb</span></span><br><span class="line"></span><br><span class="line">    Function&lt;String, Student&gt; objFunction1 = (str) -&gt; <span class="keyword">new</span> Student(str);</span><br><span class="line">    System.out.println(objFunction1.apply(<span class="string">&quot;cc&quot;</span>).getName());<span class="comment">//cc</span></span><br><span class="line"></span><br><span class="line">    Function&lt;String, Student&gt; objFunction2 = Student::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(objFunction2.apply(<span class="string">&quot;dd&quot;</span>).getName());<span class="comment">//dd</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个参数</span></span><br><span class="line">    BiFunction&lt;Integer, String, User&gt; ubf = (id, name) -&gt; <span class="keyword">new</span> User(id, name);</span><br><span class="line">    User 狂欢happy = ubf.apply(<span class="number">618</span>, <span class="string">&quot;狂欢happy&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="4">
<li><p><strong>Consumer<T></T></strong></p>
<p>  是给定义一个参数,对其进行(消费)处理,处理的方式可以是任意操作.</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(after);</span><br><span class="line">       <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//代码示例</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     List&lt;Person&gt; lisiList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     Consumer&lt;Student&gt; consumer  = x -&gt; &#123;</span><br><span class="line">       <span class="keyword">if</span> (x.getName().equals(<span class="string">&quot;lisi&quot;</span>))&#123;</span><br><span class="line">         lisiList.add(x);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     consumer = consumer.andThen(</span><br><span class="line">       x -&gt; lisiList.removeIf(y -&gt; y.getAge() &lt; <span class="number">23</span>)</span><br><span class="line">     );</span><br><span class="line">     Stream.of(</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">21</span>,<span class="string">&quot;zhangsan&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">22</span>,<span class="string">&quot;lisi&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">23</span>,<span class="string">&quot;wangwu&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">24</span>,<span class="string">&quot;wangwu&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">23</span>,<span class="string">&quot;lisi&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">26</span>,<span class="string">&quot;lisi&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> Student(<span class="number">26</span>,<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">     ).forEach(consumer);</span><br><span class="line">     lisiList.forEach(student -&gt; System.out.println(student.getName() + student.getAge()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//output</span></span><br><span class="line">   lisi23</span><br><span class="line">   lisi26</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="5">
<li><p><strong>Supplier<T></T></strong></p>
<p>这个接口是一个提供者的意思，只有一个get的抽象类，没有默认的方法以及静态的方法，传入一个泛型T的，get方法，返回一个泛型T</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码示例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Supplier&lt;String&gt; supplier = String::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(supplier.get());<span class="comment">//&quot;&quot;</span></span><br><span class="line">    Supplier&lt;Student&gt; supplierStu = Student::<span class="keyword">new</span>;</span><br><span class="line">    Student student = supplierStu.get();</span><br><span class="line">    student.setName(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    System.out.println(student.getName());<span class="comment">//dd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p><strong>Predicate<T></T></strong></p>
<p>接受一个入参，返回结果为true或者false,使用test方法进行测试并返回测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">               ? Objects::isNull</span><br><span class="line">               : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码示例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   List&lt;Student&gt; inventory = Arrays.asList(<span class="keyword">new</span> Student(<span class="number">80</span>, <span class="string">&quot;zhangsan&quot;</span>),</span><br><span class="line">                                             <span class="keyword">new</span> Student(<span class="number">155</span>, <span class="string">&quot;lisi&quot;</span>),</span><br><span class="line">                                             <span class="keyword">new</span> Student(<span class="number">120</span>, <span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line"></span><br><span class="line">   List&lt;Student&gt; filterStudentByName = Student.filterStudent(inventory,value -&gt; <span class="string">&quot;lisi&quot;</span>.equals(value.getName()));</span><br><span class="line">   filterStudentByName.forEach(fs -&gt;&#123;System.out.println(fs.getName());&#125;);</span><br><span class="line">   	</span><br><span class="line"> 	<span class="comment">//更简洁的方法</span></span><br><span class="line">   inventory.parallelStream().filter(student -&gt; <span class="string">&quot;lisi&quot;</span>.equals(student.getName())).forEach(value -&gt; System.out.println(value.getName()));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础1-基本概念</title>
    <url>/2020/04/25/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%801-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h4><pre><code> 一个程序执行多个任务，每一个任务称为一个线程。可以同时运行一个以上线程的程序称为多线程程序。
</code></pre>
<hr>
<span id="more"></span>

<h4 id="线程五种状态"><a href="#线程五种状态" class="headerlink" title="线程五种状态"></a>线程五种状态</h4><ul>
<li><strong>新建状态(New)</strong> ：线程还没有开始运行，处于新建状态。</li>
<li><strong>就绪状态(Runnable)</strong> ：可执行状态，线程对象进入新建状态后，其他线程调用了该 对象 start() 方法，从而来启动该线程。例如，thread.start() 。处于就绪状态的线程，随时可能被CPU调度</li>
<li>**运行状态(Running)**：线程获得CPU权限进行执行时。需要注意的是，线程只能从就绪状态到运行状态</li>
<li>**阻塞状态(Blocked)**：阻塞状态是因为某些原因线程放弃CPU的使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞状态分为三种<ul>
<li>等待阻塞：调用线程 wait() 方法</li>
<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为锁被其他线程占用)，它会进入阻塞状态</li>
<li>其他阻塞：调用了 sleep() / join() 方法，线程进入阻塞状态，当 sleep() 状态超时、join() 等待线程终止或者超时。或者 I/O 处理完毕时，线程重新转为就绪状态</li>
</ul>
</li>
<li>**死亡状态(Dead)**：线程执行完毕/或者异常退出，该线程结束生命周期</li>
</ul>
<hr>
<h4 id="多线程优点"><a href="#多线程优点" class="headerlink" title="多线程优点"></a>多线程优点</h4><ul>
<li>多线程可以显著提高程序效率，并行处理任务。发挥多核CPU作用</li>
<li>将占用大量时间的任务，转移给其他线程，提升响应速度，不占用主线程过多资源(时间)</li>
<li>可以通过分发，控制访问线程池的数量，使得系统始终处于健康状态，防止并发过多导致服务挂掉</li>
<li>可以随时停止线程</li>
</ul>
<hr>
<h4 id="多线程缺点"><a href="#多线程缺点" class="headerlink" title="多线程缺点"></a>多线程缺点</h4><ul>
<li>每个线程都是对资源的占用，如果线程控制不好反而会使得系统不稳定</li>
<li>线程会发生死锁，会进入较长时间等待，以及资源竞争情况</li>
<li>一些公有变量读写。线程并发时对公有变量不进行控制，可能造成脏读、幻读、增加运行的不确定性。</li>
<li>线程操作是针对单个服务的，当多服务集群时需要考虑数据线程内应用数据是否同步问题</li>
</ul>
]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础10-线程终止</title>
    <url>/2020/05/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%8010-%E7%BA%BF%E7%A8%8B%E7%BB%88%E6%AD%A2/</url>
    <content><![CDATA[<h4 id="线程终止的三种方式"><a href="#线程终止的三种方式" class="headerlink" title="线程终止的三种方式"></a>线程终止的三种方式</h4><ul>
<li>使用stop方法强制终止线程</li>
<li>使用 interrupt 终止线程</li>
<li>使用 标志位 退出线程</li>
</ul>
<p>线程终止含义：在线程处理完所操作的任务之前停止操作，放弃当前任务进入 Dead（死亡） 状态</p>
<hr>
<span id="more"></span>

<h4 id="stop-终止"><a href="#stop-终止" class="headerlink" title="stop 终止"></a>stop 终止</h4><p><strong>在此十分不建议使用 stop 方法，因为 stop 方法终止线程是不安全的，同时该方法已经被弃用了。在此不做过多说明。就是不要用。</strong></p>
<hr>
<h4 id="interrupt-终止"><a href="#interrupt-终止" class="headerlink" title="interrupt 终止"></a>interrupt 终止</h4><p>调用 interrupt() 将线程中断标记设为 true，如果线程处于阻塞状态，中断标记会被清除，同时产生一个 InterruptedException 异常。</p>
<p>通过上述描述可以知道，使用 interrupt 方法来终断线程可分为两种情况：</p>
<ul>
<li>线程处于阻塞状态，如使用了 sleep()、join()、wait() 方法</li>
<li>使用<code>while（！isInterrupted（））&#123;……&#125;</code>来判断线程是否被中断。</li>
</ul>
<p>在第一种情况下使用interrupt方法，sleep方法将抛出一个InterruptedException例外，而在第二种情况下线程将直接退出。</p>
<p><strong>注意</strong>：在Thread类中有两个方法可以判断线程是否通过interrupt方法被终止。</p>
<ul>
<li>静态的方法interrupted()</li>
<li>非静态的方法isInterrupted()</li>
</ul>
<p>这两个方法的区别是</p>
<ol>
<li>interrupted用来判断当前线是否被中断，而isInterrupted可以用来判断其他线程是否被中断。因此，while (！isInterrupted())也可以换成while (！Thread.interrupted())。</li>
<li>interrupted()除了返回中断标记之外，它还会清除中断标记(即将中断标记设为false)；而isInterrupted()仅仅返回中断标记。</li>
</ol>
<p><strong>案例分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处于 &quot;阻塞状态&quot; 调用 interrupt </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadInterrupt</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            sleep(<span class="number">50000</span>);  <span class="comment">// 延迟50秒  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            System.out.println(e.getMessage());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception  </span>&#123;  </span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadInterrupt();  </span><br><span class="line">        thread.start();  </span><br><span class="line">        System.out.println(<span class="string">&quot;在50秒之内按任意键中断线程!&quot;</span>);  </span><br><span class="line">        System.in.read();  </span><br><span class="line">        thread.interrupt();  </span><br><span class="line">        thread.join();  </span><br><span class="line">        System.out.println(<span class="string">&quot;线程已经退出!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output  在调用interrupt方法后， sleep方法抛出异常，然后输出错误信息：sleep interrupted.</span></span><br><span class="line">在<span class="number">50</span>秒之内按任意键中断线程!</span><br><span class="line">sleep interrupted</span><br><span class="line">线程已经退出!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用 isInterrupted() 方法判断线程是否结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadInterrupt</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">              <span class="comment">//do something</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;  </span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception  </span>&#123;  </span><br><span class="line">          Thread thread = <span class="keyword">new</span> ThreadInterrupt();  </span><br><span class="line">          thread.start();  </span><br><span class="line">          thread.interrupt();  </span><br><span class="line">          thread.join();  </span><br><span class="line">          System.out.println(<span class="string">&quot;线程已经退出!&quot;</span>); </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="标志位退出线程"><a href="#标志位退出线程" class="headerlink" title="标志位退出线程"></a>标志位退出线程</h4><p> 这种也是最常用的方法，就是定义一个boolean型的标志位，在线程的run方法中根据这个标志位是true还是false 来判断是否退出，这种情况一般是将任务放在run方法中的一个while循环中执行的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种 循环判断</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag= <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stopTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        <span class="comment">// 执行任务...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种 隔一段代码调用一次标志位判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadFlag</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> exit = <span class="keyword">false</span>;  </span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">          <span class="keyword">if</span> (!exit)<span class="keyword">return</span>;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">          <span class="keyword">if</span> (!exit)<span class="keyword">return</span>;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">          <span class="keyword">if</span> (!exit)<span class="keyword">return</span>;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">          <span class="keyword">if</span> (!exit)<span class="keyword">return</span>;</span><br><span class="line">      &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础11-总结(生产和消费案例)</title>
    <url>/2020/05/10/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%8011-%E6%80%BB%E7%BB%93-%E7%94%9F%E4%BA%A7%E5%92%8C%E6%B6%88%E8%B4%B9%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="生产-消费案例简介"><a href="#生产-消费案例简介" class="headerlink" title="生产/消费案例简介"></a>生产/消费案例简介</h4><p>生产/消费者问题是个非常典型的多线程问题，涉及到的对象包括“生产者”、“消费者”、“仓库”和“产品”。他们之间的关系如下：</p>
<ul>
<li>生产者仅仅在仓储未满时候生产，仓满则停止生产。</li>
<li>消费者仅仅在仓储有产品时候才能消费，仓空则等待。</li>
<li>当消费者发现仓储没产品可消费时候会通知生产者生产。</li>
<li>生产者在生产出可消费产品时候，应该通知等待的消费者去消费。</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仓库实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Depot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;   <span class="comment">// 仓库容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;       <span class="comment">// 仓库的实际数量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Depot</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// left 表示想要生产的数量</span></span><br><span class="line">            <span class="keyword">int</span> left = val;</span><br><span class="line">            <span class="keyword">while</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (size &gt;= capacity) &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 可能生产的太多，仓库容量不够，超出仓库容量则停止生产</span></span><br><span class="line">                <span class="comment">// inc表示实际生产的数量</span></span><br><span class="line">                <span class="keyword">int</span> inc = (size+left)&gt;capacity ? (capacity-size) : left;</span><br><span class="line">                size += inc;</span><br><span class="line">                left -= inc;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s produce(%3d)  --&gt;  left=%3d，inc=%3d，size=%3d\n&quot;</span>,</span><br><span class="line">                        Thread.currentThread().getName(), val, left, inc, size);</span><br><span class="line">                notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// left 表示“客户要消费数量”(有可能消费量太大，库存不够，需多此消费)</span></span><br><span class="line">            <span class="keyword">int</span> left = val;</span><br><span class="line">            <span class="keyword">while</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 库存为0时，等待“生产者”生产产品。</span></span><br><span class="line">                <span class="keyword">while</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">                    wait();</span><br><span class="line">                <span class="comment">// 如果消费太多，库存不够则取能消费的最大值</span></span><br><span class="line">                <span class="keyword">int</span> dec = (size&lt;left) ? size : left;</span><br><span class="line">                size -= dec;</span><br><span class="line">                left -= dec;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s consume(%3d) &lt;-- left=%3d, dec=%3d, size=%3d\n&quot;</span>,</span><br><span class="line">                        Thread.currentThread().getName(), val, left, dec, size);</span><br><span class="line">                notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Depot depot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Depot depot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depot = depot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费产品：新建一个线程向仓库中生产产品。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                depot.produce(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Depot depot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Depot depot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.depot = depot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费产品：新建一个线程从仓库中消费产品。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                depot.consume(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        Depot depot = <span class="keyword">new</span> Depot(<span class="number">100</span>);</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(depot);</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer(depot);</span><br><span class="line"></span><br><span class="line">        producer.produce(<span class="number">60</span>);</span><br><span class="line">        producer.produce(<span class="number">120</span>);</span><br><span class="line">        customer.consume(<span class="number">90</span>);</span><br><span class="line">        customer.consume(<span class="number">150</span>);</span><br><span class="line">        producer.produce(<span class="number">110</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">Thread-<span class="number">0</span> produce( <span class="number">60</span>)  --&gt;  left=  <span class="number">0</span>，inc= <span class="number">60</span>，size= <span class="number">60</span></span><br><span class="line">Thread-<span class="number">4</span> produce(<span class="number">110</span>)  --&gt;  left= <span class="number">70</span>，inc= <span class="number">40</span>，size=<span class="number">100</span></span><br><span class="line">Thread-<span class="number">3</span> consume(<span class="number">150</span>) &lt;-- left= <span class="number">50</span>, dec=<span class="number">100</span>, size=  <span class="number">0</span></span><br><span class="line">Thread-<span class="number">1</span> produce(<span class="number">120</span>)  --&gt;  left= <span class="number">20</span>，inc=<span class="number">100</span>，size=<span class="number">100</span></span><br><span class="line">Thread-<span class="number">2</span> consume( <span class="number">90</span>) &lt;-- left=  <span class="number">0</span>, dec= <span class="number">90</span>, size= <span class="number">10</span></span><br><span class="line">Thread-<span class="number">3</span> consume(<span class="number">150</span>) &lt;-- left= <span class="number">40</span>, dec= <span class="number">10</span>, size=  <span class="number">0</span></span><br><span class="line">Thread-<span class="number">4</span> produce(<span class="number">110</span>)  --&gt;  left=  <span class="number">0</span>，inc= <span class="number">70</span>，size= <span class="number">70</span></span><br><span class="line">Thread-<span class="number">3</span> consume(<span class="number">150</span>) &lt;-- left=  <span class="number">0</span>, dec= <span class="number">40</span>, size= <span class="number">30</span></span><br><span class="line">Thread-<span class="number">1</span> produce(<span class="number">120</span>)  --&gt;  left=  <span class="number">0</span>，inc= <span class="number">20</span>，size= <span class="number">50</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 结果说明</span></span><br><span class="line">通过同步锁，实现了对“仓库”的互斥访问。</span><br><span class="line">       对于生产方法produce()而言：当仓库满时，生产者线程等待，需要等待消费者消费产品之后，生产线程才能生产；生产者线程生产完产品之后，会通过notifyAll()唤醒同步锁上的所有线程，包括“消费者线程”，即我们所说的“通知消费者进行消费”。</span><br><span class="line">      对于消费方法consume()而言：当仓库为空时，消费者线程等待，需要等待生产者生产产品之后，消费者线程才能消费；消费者线程消费完产品之后，会通过notifyAll()唤醒同步锁上的所有线程，包括“生产者线程”，即我们所说的“通知生产者进行生产”。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础2-线程创建</title>
    <url>/2020/04/25/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%802-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="线程创建的两种方式"><a href="#线程创建的两种方式" class="headerlink" title="线程创建的两种方式"></a>线程创建的两种方式</h4><ul>
<li>继承 Thread 类</li>
<li>实现 Runnable 接口</li>
<li>在<strong>JDK5版本</strong>时，提供了一种新的多线程实现方式：<strong>Future接口+Callable接口+Executor接口</strong></li>
</ul>
<hr>
<span id="more"></span>

<h4 id="三种实现方式不同点"><a href="#三种实现方式不同点" class="headerlink" title="三种实现方式不同点"></a>三种实现方式不同点</h4><ul>
<li>Thread 是类，Runnable是接口，一个类之能继承唯一的一个类，但是可以实现多个接口</li>
<li>Runnable 可以用于 “资源共享”。即多个线程基于一个 Runnable 对象创建，他们会共享 Runnable 对象上资源。</li>
<li>Callable 有回参，可以抛出异常，可以手动取消</li>
</ul>
<hr>
<h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ThreadTest.java 源码</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123; </span><br><span class="line">              <span class="keyword">if</span>(<span class="keyword">this</span>.ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot; 卖票：ticket&quot;</span>+<span class="keyword">this</span>.ticket--);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         <span class="comment">// 启动3个线程t1,t2,t3；每个线程各卖10张票！</span></span><br><span class="line">         MyThread t1=<span class="keyword">new</span> MyThread();</span><br><span class="line">         MyThread t2=<span class="keyword">new</span> MyThread();</span><br><span class="line">         MyThread t3=<span class="keyword">new</span> MyThread();</span><br><span class="line">         t1.start();</span><br><span class="line">         t2.start();</span><br><span class="line">         t3.start();</span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果说明</span></span><br><span class="line">(<span class="number">01</span>) MyThread继承于Thread，它是自定义个线程。每个MyThread都会卖出<span class="number">10</span>张票。</span><br><span class="line">(<span class="number">02</span>) 主线程main创建并启动<span class="number">3</span>个MyThread子线程。每个子线程都各自卖出了<span class="number">10</span>张票。</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123; </span><br><span class="line">              <span class="keyword">if</span>(<span class="keyword">this</span>.ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                  System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 卖票：ticket&quot;</span>+<span class="keyword">this</span>.ticket--);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 启动3个线程t1,t2,t3(它们共用一个Runnable对象)，这3个线程一共卖10张票！</span></span><br><span class="line">         Thread t1=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">         Thread t2=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">         Thread t3=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">         t1.start();</span><br><span class="line">         t2.start();</span><br><span class="line">         t3.start();</span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果说明</span></span><br><span class="line">(<span class="number">01</span>) 和上面“MyThread继承于Thread”不同；这里的MyThread实现了Runnable接口。</span><br><span class="line">(<span class="number">02</span>) 主线程main创建并启动<span class="number">3</span>个子线程，而且这<span class="number">3</span>个子线程都是基于“mt这个Runnable对象”而创建的。运行结果是这<span class="number">3</span>个子线程一共卖出了<span class="number">10</span>张票。这说明它们是共享了Runnable接口的。</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="实现Callable接口实现线程"><a href="#实现Callable接口实现线程" class="headerlink" title="实现Callable接口实现线程"></a>实现Callable接口实现线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;自定义线程03：实现Callable接口&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hanchao 2018/3/12 8:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//注意，Callable是一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallableImpl</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(MyCallableImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;实现Callable需要重写call方法，此方法有返回值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanchao 2018/3/12 8:59</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Integer interval = RandomUtils.nextInt(<span class="number">1000</span>, <span class="number">5000</span>);</span><br><span class="line">        Thread.sleep(interval);</span><br><span class="line">        <span class="keyword">return</span> interval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;实现Callable示例&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanchao 2018/3/12 9:00</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//Future、Callable一般与Executor结合使用</span></span><br><span class="line">        <span class="comment">//Executor负责创建线程池服务</span></span><br><span class="line">        <span class="comment">//实现Callable接口形成的线程类，负责处理业务逻辑，并将处理结果返回</span></span><br><span class="line">        <span class="comment">//Future接口负责接收Callable接口返回的值</span></span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//定义一组返回值</span></span><br><span class="line">            Future&lt;Integer&gt;[] futures = <span class="keyword">new</span> Future[<span class="number">5</span>];</span><br><span class="line">            <span class="comment">//向线程池提交任务</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//注意Future的参数化类型要与Callable的参数化类型一致</span></span><br><span class="line">                futures[i] = executor.submit(<span class="keyword">new</span> MyCallableImpl());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出执行结果</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                LOGGER.info(futures[i].get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;<span class="comment">//将关闭线程池放在finally中，最大限度保证线程安全</span></span><br><span class="line">            <span class="comment">//记得关闭这个线程池</span></span><br><span class="line">            executor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">12</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">28</span> INFO  MyCallableImpl:<span class="number">50</span> - <span class="number">1564</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">12</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">30</span> INFO  MyCallableImpl:<span class="number">50</span> - <span class="number">2992</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">12</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">30</span> INFO  MyCallableImpl:<span class="number">50</span> - <span class="number">1629</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">12</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">30</span> INFO  MyCallableImpl:<span class="number">50</span> - <span class="number">1454</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">12</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">30</span> INFO  MyCallableImpl:<span class="number">50</span> - <span class="number">1941</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="Future接口的主要方法如下："><a href="#Future接口的主要方法如下：" class="headerlink" title="Future接口的主要方法如下："></a>Future接口的主要方法如下：</h5><ul>
<li>isDone()：判断任务是否完成。</li>
<li>isCancelled()：判断任务是否取消。</li>
<li>get()：获取计算结果（一致等待，直至得到结果）。</li>
<li>cancel(true)：取消任务。</li>
<li>get(long,TimeUnit)：规定时间内获取计算结果（在long时间内等待结果，如果得到则返回；如果未得到，则结束，并抛出TimeoutException异常）。第一个参数是最大超时时间，第二个是时间单位，可以通过enum TimeUnit获取。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get(long,TimeUnit):最多等待多长时间就不再等待</span></span><br><span class="line"><span class="comment">//创建单线程池</span></span><br><span class="line">ExecutorService executor2 = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//向线程池提交任务</span></span><br><span class="line">Future&lt;Integer&gt; future2 = executor2.submit(<span class="keyword">new</span> MyCallableImpl());</span><br><span class="line">Long begin2 = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;future开始执行任务...当前时间：&quot;</span> + begin2);</span><br><span class="line">    LOGGER.info(<span class="string">&quot;通过future.get(long,TimeUnit)获取任务的计算结果(5秒钟之后再获取结果)：&quot;</span> + future2.get(<span class="number">500</span>,TimeUnit.MILLISECONDS));</span><br><span class="line">    LOGGER.info(<span class="string">&quot;future结束执行任务...共计用时：&quot;</span> + (System.currentTimeMillis() - begin2) + <span class="string">&quot;ms..\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (TimeoutException e)&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;在限定时间内没有等到查询结果，不再等待..&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭任务</span></span><br><span class="line">    LOGGER.info(<span class="string">&quot;当前任务状态：future2.isDone() = &quot;</span> + future2.isDone());</span><br><span class="line">    LOGGER.info(<span class="string">&quot;当前任务状态：future2.isCancelled() = &quot;</span> + future2.isCancelled());</span><br><span class="line">    LOGGER.info(<span class="string">&quot;通过future.cancel()取消这个任务：&quot;</span>);</span><br><span class="line">    future2.cancel(<span class="keyword">true</span>);</span><br><span class="line">    LOGGER.info(<span class="string">&quot;当前任务状态：future2.isDone() = &quot;</span> + future2.isDone());</span><br><span class="line">    LOGGER.info(<span class="string">&quot;当前任务状态：future2.isCancelled() = &quot;</span> + future2.isCancelled());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭线程池</span></span><br><span class="line">    executor2.shutdown();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//意料之中的结果，无需打印日志</span></span><br><span class="line">    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础3-synchronized关键字</title>
    <url>/2020/04/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%803-synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h4 id="synchronized作用"><a href="#synchronized作用" class="headerlink" title="synchronized作用"></a>synchronized作用</h4><p>​    在并发编程中存在线程安全问题，即并发编程中 “共享数据” 的处理,多个线程操作共享数据，为系统增加了不确定性，synchronized 可以保证在同一时间，只有一个线程可以执行某个方法或者某个代码块，同时synchronized可以保证一个线程的变化可见性。</p>
<p>​    <strong>可以确保线程互斥的访问同步代码</strong></p>
<hr>
<span id="more"></span>

<h4 id="被-synchronized-修饰的对象"><a href="#被-synchronized-修饰的对象" class="headerlink" title="被 synchronized 修饰的对象"></a>被 synchronized 修饰的对象</h4><ul>
<li>修饰代码块：作用的对象是调用这个代码块的对象（方法）</li>
<li>修饰方法：称为同步方法，作用范围是整个方法，作用的对象是调用这个方法的对象</li>
<li>修饰静态的方法：作用范围是整个的静态方法，作用的对象是这个类的所有对象</li>
<li>修饰类：作用范围是synchronzied后面括起来的部分，作用的对象是这个类的所有对象。</li>
</ul>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>基于<strong>同一个对象</strong>创建的线程，共享对象的同步锁。</li>
<li>当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，<strong>其他线程仍然可以访问“该对象”的非同步代码块</strong>。</li>
<li>当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。</li>
<li>​</li>
</ul>
<hr>
<h4 id="案例一：修饰代码块"><a href="#案例一：修饰代码块" class="headerlink" title="案例一：修饰代码块"></a>案例一：修饰代码块</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;  </span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">                      System.out.println(Thread.currentThread().getName() + <span class="string">&quot; loop &quot;</span> + i);  </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">             &#125;</span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_1</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         Runnable demo = <span class="keyword">new</span> MyRunable();     <span class="comment">// 新建“Runnable对象”</span></span><br><span class="line"> </span><br><span class="line">         Thread t1 = <span class="keyword">new</span> Thread(demo, <span class="string">&quot;t1&quot;</span>);  <span class="comment">// 新建“线程t1”, t1是基于demo这个Runnable对象</span></span><br><span class="line">         Thread t2 = <span class="keyword">new</span> Thread(demo, <span class="string">&quot;t2&quot;</span>);  <span class="comment">// 新建“线程t2”, t2是基于demo这个Runnable对象</span></span><br><span class="line">         t1.start();                          <span class="comment">// 启动“线程t1”</span></span><br><span class="line">         t2.start();                          <span class="comment">// 启动“线程t2” </span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">t1 loop <span class="number">0</span></span><br><span class="line">t1 loop <span class="number">1</span></span><br><span class="line">t1 loop <span class="number">2</span></span><br><span class="line">t1 loop <span class="number">3</span></span><br><span class="line">t1 loop <span class="number">4</span></span><br><span class="line">t2 loop <span class="number">0</span></span><br><span class="line">t2 loop <span class="number">1</span></span><br><span class="line">t2 loop <span class="number">2</span></span><br><span class="line">t2 loop <span class="number">3</span></span><br><span class="line">t2 loop <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// t1 和 t2 都是根据 demo 这个对象创建的线程，调用的都是 run() 方法，因此 t1 和 t2 共享线程同步锁。所有当一个线程运行的时候，另一个线程必须等待 &quot;运行线程&quot; 释放 demo 对象的同步锁。</span></span><br></pre></td></tr></table></figure>

<hr>
<p>案例二：修饰代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 含有synchronized同步块的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;  </span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">                      System.out.println(Thread.currentThread().getName() + <span class="string">&quot; synMethod loop &quot;</span> + i);  </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">             &#125;</span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 非同步的方法</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonSynMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;  </span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                 System.out.println(Thread.currentThread().getName() + <span class="string">&quot; nonSynMethod loop &quot;</span> + i);  </span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">final</span> Count count = <span class="keyword">new</span> Count();</span><br><span class="line">         <span class="comment">// 新建t1, t1会调用“count对象”的synMethod()方法</span></span><br><span class="line">         Thread t1 = <span class="keyword">new</span> Thread(</span><br><span class="line">                 <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                         count.synMethod();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 新建t2, t2会调用“count对象”的nonSynMethod()方法</span></span><br><span class="line">         Thread t2 = <span class="keyword">new</span> Thread(</span><br><span class="line">                 <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                         count.nonSynMethod();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;, <span class="string">&quot;t2&quot;</span>);  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">         t1.start();  <span class="comment">// 启动t1</span></span><br><span class="line">         t2.start();  <span class="comment">// 启动t2</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">t1 synMethod loop <span class="number">0</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">0</span></span><br><span class="line">t1 synMethod loop <span class="number">1</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">1</span></span><br><span class="line">t1 synMethod loop <span class="number">2</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">2</span></span><br><span class="line">t1 synMethod loop <span class="number">3</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">3</span></span><br><span class="line">t1 synMethod loop <span class="number">4</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// t1 和 t2 都是根据 demo 这个对象创建的线程，调用的是不同的方法，且 synchronized 修饰的是代码块（只会阻塞 synMethod 方法，不会阻塞 nonSynMethod 方法），因此当 t2 调用  nonSynMethod 方法时不会产生阻塞。</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="案例三：修饰代码块"><a href="#案例三：修饰代码块" class="headerlink" title="案例三：修饰代码块"></a>案例三：修饰代码块</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 含有synchronized同步块的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;  </span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">                      System.out.println(Thread.currentThread().getName() + <span class="string">&quot; synMethod loop &quot;</span> + i);  </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">             &#125;</span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 也包含synchronized同步块的方法</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonSynMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;  </span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                     Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                     System.out.println(Thread.currentThread().getName() + <span class="string">&quot; nonSynMethod loop &quot;</span> + i);  </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">final</span> Count count = <span class="keyword">new</span> Count();</span><br><span class="line">         <span class="comment">// 新建t1, t1会调用“count对象”的synMethod()方法</span></span><br><span class="line">         Thread t1 = <span class="keyword">new</span> Thread(</span><br><span class="line">                 <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                         count.synMethod();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 新建t2, t2会调用“count对象”的nonSynMethod()方法</span></span><br><span class="line">         Thread t2 = <span class="keyword">new</span> Thread(</span><br><span class="line">                 <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                         count.nonSynMethod();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;, <span class="string">&quot;t2&quot;</span>);  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">         t1.start();  <span class="comment">// 启动t1</span></span><br><span class="line">         t2.start();  <span class="comment">// 启动t2</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">t1 synMethod loop <span class="number">0</span></span><br><span class="line">t1 synMethod loop <span class="number">1</span></span><br><span class="line">t1 synMethod loop <span class="number">2</span></span><br><span class="line">t1 synMethod loop <span class="number">3</span></span><br><span class="line">t1 synMethod loop <span class="number">4</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">0</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">1</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">2</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">3</span></span><br><span class="line">t2 nonSynMethod loop <span class="number">4</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础4-实例锁和全局锁</title>
    <url>/2020/04/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%804-%E5%AE%9E%E4%BE%8B%E9%94%81%E5%92%8C%E5%85%A8%E5%B1%80%E9%94%81/</url>
    <content><![CDATA[<h4 id="什么是实例锁？什么是全局锁？"><a href="#什么是实例锁？什么是全局锁？" class="headerlink" title="什么是实例锁？什么是全局锁？"></a>什么是实例锁？什么是全局锁？</h4><p><strong>实例锁</strong>– 锁在某一个实例对象上。如果该类是单例，那么该锁也具有全局锁的概念。<br>​               实例锁对应的就是synchronized关键字。<br><strong>全局锁</strong> – 该锁针对的是类，无论实例多少个对象，那么线程都共享该锁。<br>​               全局锁对应的就是static synchronized（或者是锁在该类的class或者classloader对象上）。</p>
<hr>
<span id="more"></span>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pulbic <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">isSyncA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">isSyncB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">cSyncA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">cSyncB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设，Something有两个实例x和y。分析下面4组表达式获取的锁的情况。</p>
<ul>
<li>x.isSyncA()与x.isSyncB() </li>
<li>x.isSyncA()与y.isSyncA()</li>
<li>x.cSyncA()与y.cSyncB()</li>
<li>x.isSyncA()与Something.cSyncA()</li>
</ul>
<hr>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p><strong>(01) 不能被同时访问。</strong>因为isSyncA()和isSyncB()都是访问同一个对象(对象x)的同步锁！</p>
<p><strong>(02) 可以同时被访问。</strong>因为访问的不是同一个对象的同步锁，x.isSyncA()访问的是x的同步锁，而y.isSyncA()访问的是y的同步锁。</p>
<p><strong>(03) 不能被同时访问。</strong>因为cSyncA()和cSyncB()都是static类型，x.cSyncA()相当于Something.isSyncA()，y.cSyncB()相当于Something.isSyncB()，因此它们共用一个同步锁，不能被同时反问。</p>
<p><strong>(04) 可以被同时访问。</strong>因为isSyncA()是实例方法，x.isSyncA()使用的是对象x的锁；而cSyncA()是静态方法，Something.cSyncA()可以理解对使用的是“类的锁”。因此，它们是可以被同时访问的。</p>
]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础5-start()和run()区别</title>
    <url>/2020/04/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%805-start-%E5%92%8Crun-%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="start-和-run-的区别说明"><a href="#start-和-run-的区别说明" class="headerlink" title="start() 和 run() 的区别说明"></a>start() 和 run() 的区别说明</h4><ul>
<li>start() 作用是启动一个线程，新线程会执行 run()方法。start() 不能被重复调用</li>
<li>run() 和普通方法一样，可以被重复调用。单独调用 run() 的话，会在当前线程中执行 run()，并不会启动新线程</li>
</ul>
<hr>
<span id="more"></span>

<p>案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(name);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName()+<span class="string">&quot; is running&quot;</span>);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         Thread mythread=<span class="keyword">new</span> MyThread(<span class="string">&quot;mythread&quot;</span>);</span><br><span class="line"> </span><br><span class="line">         System.out.println(Thread.currentThread().getName()+<span class="string">&quot; call mythread.run()&quot;</span>);</span><br><span class="line">         mythread.run();</span><br><span class="line"> </span><br><span class="line">         System.out.println(Thread.currentThread().getName()+<span class="string">&quot; call mythread.start()&quot;</span>);</span><br><span class="line">         mythread.start();</span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">main call mythread.run()</span><br><span class="line">main is running</span><br><span class="line">main call mythread.start()</span><br><span class="line">mythread is running</span><br></pre></td></tr></table></figure>

<p><strong>结果说明：</strong></p>
<ul>
<li>Thread.currentThread().getName()是用于获取“当前线程”的名字。当前线程是指正在cpu中调度执行的线程。</li>
<li>mythread.run()是在“主线程main”中调用的，该run()方法直接运行在“主线程main”上。</li>
<li>mythread.start()会启动“线程mythread”，“线程mythread”启动之后，会调用run()方法；此时的run()方法是运行在“线程mythread”上。</li>
</ul>
]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础6-线程等待与唤醒</title>
    <url>/2020/04/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%806-%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/</url>
    <content><![CDATA[<h4 id="wait-notify-notifyAll-方法介绍"><a href="#wait-notify-notifyAll-方法介绍" class="headerlink" title="wait()  notify()  notifyAll() 方法介绍"></a>wait()  notify()  notifyAll() 方法介绍</h4><p>Object.java中，定义了 wait() ，notify() 和 notifyAll() 等接口，wait() 的作用是让当前线程进入等待状态，同时wait() 也会让当前线程释放它所持有的锁。而 notify() 和 notifyAll() 的作用，则是唤醒当前对象上的等待线程；notify() 是唤醒单个线程，notifyAll() 是唤醒所有线程。</p>
<ul>
<li>**notify() **:唤醒在此对象监视器上等待的单个线程。</li>
<li>**notifyAll() ** :唤醒在此对象监视器上等待的所有线程。</li>
<li><strong>wait()</strong> :让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。</li>
<li>**wait(long timeout) **: 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。</li>
<li>**wait(long timeout, int nanos)  **: 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量”，当前线程被唤醒(进入“就绪状态”)。</li>
</ul>
<hr>
<h4 id><a href="#" class="headerlink" title></a><span id="more"></span></h4><h4 id="案例1-wait-和-notify"><a href="#案例1-wait-和-notify" class="headerlink" title="案例1:wait() 和 notify()"></a>案例1:wait() 和 notify()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; call notify()&quot;</span>);</span><br><span class="line">            <span class="comment">// 唤醒当前的wait线程</span></span><br><span class="line">            notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(t1) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 启动“线程t1”</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; start t1&quot;</span>);</span><br><span class="line">                t1.start();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 主线程等待t1通过notify()唤醒。</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; wait()&quot;</span>);</span><br><span class="line">                t1.wait();</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; continue&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="function">main start t1</span></span><br><span class="line"><span class="function">main <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function">t1 call <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">main <span class="keyword">continue</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 结果说明</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">01</span>)</span> “主线程”通过 new <span class="title">ThreadA</span><span class="params">(<span class="string">&quot;t1&quot;</span>)</span> 新建“线程t1”。随后通过<span class="title">synchronized</span><span class="params">(t1)</span>获取“t1对象的同步锁”。然后调用t1.<span class="title">start</span><span class="params">()</span>启动“线程t1”。</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">02</span>)</span> “主线程”执行t1.<span class="title">wait</span><span class="params">()</span> 释放“t1对象的锁”并且进入“等待<span class="params">(阻塞)</span>状态”。等待t1对象上的线程通过<span class="title">notify</span><span class="params">()</span> 或 <span class="title">notifyAll</span><span class="params">()</span>将其唤醒。</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">03</span>)</span> “线程t1”运行之后，通过<span class="title">synchronized</span><span class="params">(<span class="keyword">this</span>)</span>获取“当前对象的锁”；接着调用<span class="title">notify</span><span class="params">()</span>唤醒“当前对象上的等待线程”，也就是唤醒“主线程”。</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">04</span>)</span> “线程t1”运行完毕之后，释放“当前对象的锁”。紧接着，“主线程”获取“t1对象的锁”，然后接着运行。</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="案例2：wait-long-timeout-和notify"><a href="#案例2：wait-long-timeout-和notify" class="headerlink" title="案例2：wait(long timeout)和notify()"></a>案例2：wait(long timeout)和notify()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; run &quot;</span>);</span><br><span class="line">        <span class="comment">// 死循环，不断运行。</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTimeoutTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(t1) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 启动“线程t1”</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; start t1&quot;</span>);</span><br><span class="line">                t1.start();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 主线程等待t1通过notify()唤醒 或 notifyAll()唤醒，或超过3000ms延时；然后才被唤醒。</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; call wait &quot;</span>);</span><br><span class="line">                t1.wait(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; continue&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">main start t1</span><br><span class="line">main call wait </span><br><span class="line">t1 run                  <span class="comment">// 大约3秒之后...输出“main continue”</span></span><br><span class="line">main <span class="keyword">continue</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 结果说明</span></span><br><span class="line">(<span class="number">01</span>) 主线程main执行t1.start()启动“线程t1”。</span><br><span class="line">(<span class="number">02</span>) 主线程main执行t1.wait(<span class="number">3000</span>)，此时，主线程进入“阻塞状态”。需要“用于t1对象锁的线程通过notify() 或者 notifyAll()将其唤醒” 或者 “超时3000ms之后”，主线程main才进入到“就绪状态”，然后才可以运行。</span><br><span class="line">(<span class="number">03</span>) “线程t1”运行之后，进入了死循环，一直不断的运行。</span><br><span class="line">(<span class="number">04</span>) 超时3000ms之后，主线程main会进入到“就绪状态”，然后接着进入“运行状态”。</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="案例3：wait-和-notifyAll"><a href="#案例3：wait-和-notifyAll" class="headerlink" title="案例3：wait() 和 notifyAll()"></a>案例3：wait() 和 notifyAll()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyAllTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        ThreadA t2 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        ThreadA t3 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; sleep(3000)&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">            <span class="comment">// 主线程等待唤醒。</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; notifyAll()&quot;</span>);</span><br><span class="line">            obj.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 打印输出结果</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; wait&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 唤醒当前的wait线程</span></span><br><span class="line">                    obj.wait();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 打印输出结果</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; continue&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="function">t1 wait</span></span><br><span class="line"><span class="function">main <span class="title">sleep</span><span class="params">(<span class="number">3000</span>)</span></span></span><br><span class="line"><span class="function">t3 wait</span></span><br><span class="line"><span class="function">t2 wait</span></span><br><span class="line"><span class="function">main <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">t2 <span class="keyword">continue</span></span></span><br><span class="line"><span class="function">t3 <span class="keyword">continue</span></span></span><br><span class="line"><span class="function">t1 <span class="keyword">continue</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 结果说明</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">01</span>)</span> 主线程中新建并且启动了3个线程&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;。</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">02</span>)</span> 主线程通过<span class="title">sleep</span><span class="params">(<span class="number">3000</span>)</span>休眠3秒。在主线程休眠3秒的过程中，我们假设&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;这3个线程都运行了。以&quot;t1&quot;为例，当它运行的时候，它会执行obj.<span class="title">wait</span><span class="params">()</span>等待其它线程通过<span class="title">notify</span><span class="params">()</span>或额<span class="title">nofityAll</span><span class="params">()</span>来唤醒它；相同的道理，&quot;t2&quot;和&quot;t3&quot;也会等待其它线程通过<span class="title">nofity</span><span class="params">()</span>或<span class="title">nofityAll</span><span class="params">()</span>来唤醒它们。</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">03</span>)</span> 主线程休眠3秒之后，接着运行。执行 obj.<span class="title">notifyAll</span><span class="params">()</span> 唤醒obj上的等待线程，即唤醒&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;这3个线程。 紧接着，主线程的<span class="title">synchronized</span><span class="params">(obj)</span>运行完毕之后，主线程释放“obj锁”。这样，&quot;t1&quot;, &quot;t2&quot;和&quot;t3&quot;就可以获取“obj锁”而继续运行了！</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础7-线程让步yield</title>
    <url>/2020/04/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%807-%E7%BA%BF%E7%A8%8B%E8%AE%A9%E6%AD%A5yield/</url>
    <content><![CDATA[<h4 id="yield-介绍"><a href="#yield-介绍" class="headerlink" title="yield()介绍"></a>yield()介绍</h4><p>yield()的作用是让步。它能让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！</p>
<hr>
<span id="more"></span>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span></span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(name); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;<span class="number">10</span>; i++)&#123; </span><br><span class="line">            System.out.printf(<span class="string">&quot;%s [%d]:%d\n&quot;</span>, <span class="keyword">this</span>.getName(), <span class="keyword">this</span>.getPriority(), i); </span><br><span class="line">            <span class="comment">// i整除4时，调用yield</span></span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                Thread.yield();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldTest</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>); </span><br><span class="line">        ThreadA t2 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t2&quot;</span>); </span><br><span class="line">        t1.start(); </span><br><span class="line">        t2.start();</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">0</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">0</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">1</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">2</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">3</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">4</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">5</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">6</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">7</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">8</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">9</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">1</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">2</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">3</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">4</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">5</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">6</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">7</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">8</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">9</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 结果说明</span></span><br><span class="line">“线程t1”在能被<span class="number">4</span>整数的时候，并没有切换到“线程t2”。这表明，yield()虽然可以让线程由“运行状态”进入到“就绪状态”；但是，它不一定会让其它线程获取CPU执行权(即，其它线程进入到“运行状态”)，即使这个“其它线程”与当前调用yield()的线程具有相同的优先级。</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="yield-与-wait-的区别"><a href="#yield-与-wait-的区别" class="headerlink" title="yield() 与 wait()的区别"></a>yield() 与 wait()的区别</h4><ul>
<li>wait()是让线程由“运行状态”进入到“等待(阻塞)状态”，而不yield()是让线程由“运行状态”进入到“就绪状态”。</li>
<li>wait()是会线程释放它所持有对象的同步锁，而yield()方法不会释放锁。</li>
</ul>
<p>案例说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldLockTest</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>); </span><br><span class="line">        ThreadA t2 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t2&quot;</span>); </span><br><span class="line">        t1.start(); </span><br><span class="line">        t2.start();</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span></span>&#123; </span><br><span class="line">            <span class="keyword">super</span>(name); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">            <span class="comment">// 获取obj对象的同步锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;<span class="number">10</span>; i++)&#123; </span><br><span class="line">                    System.out.printf(<span class="string">&quot;%s [%d]:%d\n&quot;</span>, <span class="keyword">this</span>.getName(), <span class="keyword">this</span>.getPriority(), i); </span><br><span class="line">                    <span class="comment">// i整除4时，调用yield</span></span><br><span class="line">                    <span class="keyword">if</span> (i%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                        Thread.yield();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">0</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">1</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">2</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">3</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">4</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">5</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">6</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">7</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">8</span></span><br><span class="line">t1 [<span class="number">5</span>]:<span class="number">9</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">0</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">1</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">2</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">3</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">4</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">5</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">6</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">7</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">8</span></span><br><span class="line">t2 [<span class="number">5</span>]:<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果说明</span></span><br><span class="line">主线程main中启动了两个线程t1和t2。t1和t2在run()会引用同一个对象的同步锁，即<span class="keyword">synchronized</span>(obj)。在t1运行过程中，虽然它会调用Thread.yield()；但是，t2是不会获取cpu执行权的。因为，t1并没有释放“obj所持有的同步锁”！</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础8-线程休眠sleep</title>
    <url>/2020/05/01/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%808-%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0sleep/</url>
    <content><![CDATA[<h4 id="sleep-介绍"><a href="#sleep-介绍" class="headerlink" title="sleep 介绍"></a>sleep 介绍</h4><p>​    sleep() 的作用是让当前线程休眠，即当前线程会从”运行状态” 进入 ”休眠(阻塞)状态“。sleep 会指定休眠时间，线程休眠的时间会 大于/等于 该休眠时间；在线程重新被唤醒时，它会由 “阻塞状态” 变成 “就绪状态”，从而等待 cpu 调度的执行。</p>
<hr>
<span id="more"></span>

<h4 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span></span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(name); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;<span class="number">10</span>; i++)&#123; </span><br><span class="line">                System.out.printf(<span class="string">&quot;%s: %d\n&quot;</span>, <span class="keyword">this</span>.getName(), i); </span><br><span class="line">                <span class="comment">// i能被4整除时，休眠100毫秒</span></span><br><span class="line">                <span class="keyword">if</span> (i%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepTest</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>); </span><br><span class="line">        t1.start(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">t1: <span class="number">0</span></span><br><span class="line">t1: <span class="number">1</span></span><br><span class="line">t1: <span class="number">2</span></span><br><span class="line">t1: <span class="number">3</span></span><br><span class="line">t1: <span class="number">4</span></span><br><span class="line">t1: <span class="number">5</span></span><br><span class="line">t1: <span class="number">6</span></span><br><span class="line">t1: <span class="number">7</span></span><br><span class="line">t1: <span class="number">8</span></span><br><span class="line">t1: <span class="number">9</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="sleep-与-wait-的比较"><a href="#sleep-与-wait-的比较" class="headerlink" title="sleep() 与 wait()的比较"></a><strong>sleep() 与 wait()的比较</strong></h4><p>wait()会释放对象的同步锁，而sleep()则不会释放锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepLockTest</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>); </span><br><span class="line">        ThreadA t2 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t2&quot;</span>); </span><br><span class="line">        t1.start(); </span><br><span class="line">        t2.start();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span></span>&#123; </span><br><span class="line">            <span class="keyword">super</span>(name); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">            <span class="comment">// 获取obj对象的同步锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;<span class="number">10</span>; i++)&#123; </span><br><span class="line">                        System.out.printf(<span class="string">&quot;%s: %d\n&quot;</span>, <span class="keyword">this</span>.getName(), i); </span><br><span class="line">                        <span class="comment">// i能被4整除时，休眠100毫秒</span></span><br><span class="line">                        <span class="keyword">if</span> (i%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">t1: <span class="number">0</span></span><br><span class="line">t1: <span class="number">1</span></span><br><span class="line">t1: <span class="number">2</span></span><br><span class="line">t1: <span class="number">3</span></span><br><span class="line">t1: <span class="number">4</span></span><br><span class="line">t1: <span class="number">5</span></span><br><span class="line">t1: <span class="number">6</span></span><br><span class="line">t1: <span class="number">7</span></span><br><span class="line">t1: <span class="number">8</span></span><br><span class="line">t1: <span class="number">9</span></span><br><span class="line">t2: <span class="number">0</span></span><br><span class="line">t2: <span class="number">1</span></span><br><span class="line">t2: <span class="number">2</span></span><br><span class="line">t2: <span class="number">3</span></span><br><span class="line">t2: <span class="number">4</span></span><br><span class="line">t2: <span class="number">5</span></span><br><span class="line">t2: <span class="number">6</span></span><br><span class="line">t2: <span class="number">7</span></span><br><span class="line">t2: <span class="number">8</span></span><br><span class="line">t2: <span class="number">9</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 结果说明：主线程main中启动了两个线程t1和t2。t1和t2在run()会引用同一个对象的同步锁，即synchronized(obj)。在t1运行过程中，虽然它会调用Thread.sleep(100)；但是，t2是不会获取cpu执行权的。因为，t1并没有释放“obj所持有的同步锁”！</span></span><br><span class="line"><span class="comment">//注意，若我们注释掉synchronized (obj)后再次执行该程序，t1和t2是可以相互切换的。下面是注释调synchronized(obj) 之后的源码：</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepLockTest</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">        ThreadA t1 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t1&quot;</span>); </span><br><span class="line">        ThreadA t2 = <span class="keyword">new</span> ThreadA(<span class="string">&quot;t2&quot;</span>); </span><br><span class="line">        t1.start(); </span><br><span class="line">        t2.start();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name)</span></span>&#123; </span><br><span class="line">            <span class="keyword">super</span>(name); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">            <span class="comment">// 获取obj对象的同步锁</span></span><br><span class="line"><span class="comment">//            synchronized (obj) &#123;</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;<span class="number">10</span>; i++)&#123; </span><br><span class="line">                        System.out.printf(<span class="string">&quot;%s: %d\n&quot;</span>, <span class="keyword">this</span>.getName(), i); </span><br><span class="line">                        <span class="comment">// i能被4整除时，休眠100毫秒</span></span><br><span class="line">                        <span class="keyword">if</span> (i%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-基础9-join</title>
    <url>/2020/05/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%809-join/</url>
    <content><![CDATA[<h4 id="Join的作用"><a href="#Join的作用" class="headerlink" title="Join的作用"></a>Join的作用</h4><p>join的作用是：“等待该线程终止”，比如在 线程B 中的调用了 线程A 的Join()方法，知道 线程A 执行完毕后，才会继续执行 线程B。</p>
<hr>
<span id="more"></span>

<h4 id="Join-案例"><a href="#Join-案例" class="headerlink" title="Join 案例"></a>Join 案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.currentThread;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] sure)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestJoin());</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        t.start();</span><br><span class="line">        t.join(<span class="number">1000</span>);<span class="comment">//等待线程t 1000毫秒</span></span><br><span class="line">        <span class="comment">//t.join();//等待线程t 运行结束再运行</span></span><br><span class="line">        System.out.println(System.currentTimeMillis()-start);<span class="comment">//打印出时间间隔</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Main finished&quot;</span>);<span class="comment">//打印主线程结束</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// synchronized (currentThread()) &#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);<span class="comment">//睡眠5秒，循环是为了方便输出信息</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;睡眠&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;TestJoin finished&quot;</span>);<span class="comment">//t线程结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output 运行  t.join(1000);</span></span><br><span class="line"><span class="number">1001</span></span><br><span class="line">Main finished</span><br><span class="line">睡眠<span class="number">1</span></span><br><span class="line">睡眠<span class="number">2</span></span><br><span class="line">睡眠<span class="number">3</span></span><br><span class="line">睡眠<span class="number">4</span></span><br><span class="line">睡眠<span class="number">5</span></span><br><span class="line">TestJoin finished</span><br><span class="line"></span><br><span class="line"><span class="comment">// output 运行  t.join();</span></span><br><span class="line">睡眠<span class="number">1</span></span><br><span class="line">睡眠<span class="number">2</span></span><br><span class="line">睡眠<span class="number">3</span></span><br><span class="line">睡眠<span class="number">4</span></span><br><span class="line">睡眠<span class="number">5</span></span><br><span class="line">TestJoin finished</span><br><span class="line"><span class="number">5011</span></span><br><span class="line">Main finished</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例解析</span></span><br><span class="line">t.join();      <span class="comment">//调用join方法，等待线程t执行完毕,主线程才运行</span></span><br><span class="line">t.join(<span class="number">1000</span>);  <span class="comment">//等待 t 线程，等待时间是1000毫秒。1000毫秒之后主线程不管子线程是否运行都继续运行</span></span><br></pre></td></tr></table></figure>

<hr>
<p>join 源码分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                wait(delay);</span><br><span class="line">                now = System.currentTimeMillis() - base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码说明：可以看到join的方法入参为 millis（毫秒），如果 millis == 0，会进入 while (isAlive()) 循环；即子线程还存活，主线程就一直不停轮训。如果 millis &gt; 0 并且子线程还存活，采用 wait() 机制使主线程进入等待阻塞指定时间。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进阶1-Lock</title>
    <url>/2020/05/18/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B61-Lock/</url>
    <content><![CDATA[<h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><p>Lock接口提供了比synchronized更加广泛和灵活的操作。</p>
<ul>
<li>Lock接口的实现允许锁在不同的作用范围内获取和释放，并允许以任何顺序获取和释放多个锁。上例一个反应出来了。</li>
<li>synchronized是在JVM 层面上实现的，Lock是在代码层面实现的。</li>
<li>synchronized在锁定时如果方法块抛出异常，JVM 会自动将锁释放掉，不会因为出了异常没有释放锁造成线程死锁。但是 Lock 的话就享受不到 JVM 带来自动的功能，出现异常时必须在 finally 将锁释放掉，否则将会引起死锁。</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="Lock两种实现方式"><a href="#Lock两种实现方式" class="headerlink" title="Lock两种实现方式"></a>Lock两种实现方式</h4><ul>
<li>ReentrantLock：重入锁和synchronized一样，是互斥锁。比synchronized更灵活</li>
<li>ReentrantReadWriteLock：中维护了度锁和写锁，允许线程同时读取共享资源；但是如果有一个线程是写数据，那么其他线程就不能去读写该资源。即会出现三种情况：读读共享、写写互斥、读写互斥</li>
</ul>
<hr>
<h4 id="Lock源码查看"><a href="#Lock源码查看" class="headerlink" title="Lock源码查看"></a>Lock源码查看</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent.locks;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取锁，如果锁定不可用，则当前线程不再参与线程调度，并且在获取锁定之前处于休眠状态。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取锁，除非线程被中断。</span></span><br><span class="line">	<span class="comment">// 如果锁可用，立即返回</span></span><br><span class="line">	<span class="comment">// 如果锁定不可用，则当前线程不再参与线程调度，并且在获取锁定之前处于休眠状态，除非发生以下事情：</span></span><br><span class="line">	<span class="comment">// 锁被当前线程获取 / 当前线程被其他线程中断，并且锁的获取支持中断。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 锁空闲则获取锁</span></span><br><span class="line">	<span class="comment">// 锁可用，返回true</span></span><br><span class="line">	<span class="comment">// 锁不可用，返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取锁，在给定时间内，在线程未被中断时。</span></span><br><span class="line">	<span class="comment">// 可以获取：立即返回true</span></span><br><span class="line">	<span class="comment">// 不可获取：进入禁用调度状态，休眠直到以下事情发生:获取到锁/被中断/时间到</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放锁</span></span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 几种获取锁方法的比较</span></span><br><span class="line"><span class="comment">// Lock() 拿不到lock就不罢休，不然线程一直block。</span></span><br><span class="line"><span class="comment">// tryLock() 马上返回，拿到lock就返回true，不然返回false。</span></span><br><span class="line"><span class="comment">// 带时间限制的tryLock比较聪明的做法，相较于tryLock() -- 支持中断</span></span><br><span class="line"><span class="comment">// lockInterruptibly() 相较于lock() -- 支持中断</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="三种形式锁使用案例"><a href="#三种形式锁使用案例" class="headerlink" title="三种形式锁使用案例"></a>三种形式锁使用案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lock():</span></span><br><span class="line">Lock l = ...; </span><br><span class="line">l.lock（）; </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">//访问受此锁保护的资源</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	l.unlock（）; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// tryLock():</span></span><br><span class="line">Lock lock = ...;</span><br><span class="line"><span class="keyword">if</span>(lock.tryLock()) &#123;</span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="comment">//处理任务</span></span><br><span class="line">     &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">         </span><br><span class="line">     &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">         lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">     &#125; </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果不能获取锁，则直接做其他事情</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// lockInterruptibly():</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">     <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Lock方法"><a href="#Lock方法" class="headerlink" title="Lock方法"></a>Lock方法</h4><ul>
<li>int getHoldCount()： 查询当前线程保持锁的个数，也就是调用lock的次数。</li>
<li>int getQueueLength()：正等待获取此锁的个数</li>
<li>int getWaitQueueLength()：与锁定相关的给定条件Condition的线程估计数。</li>
<li>boolean hasQueuedThread()：查询指定线程是否正在等待此锁定。</li>
<li>boolean hasQueuedThreads()：查询此锁定是否被占用。</li>
<li>hasWaiters()：查询是否有线程正在等待此锁定的有关的Condition条件。</li>
</ul>
]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进阶2-Condition</title>
    <url>/2020/05/18/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B62-Condition/</url>
    <content><![CDATA[<h4 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h4><p>任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object中），主要包括wait()、wait(long timeout)、notify()以及notifyAll()方法，这些方法与synchronized同步关键字配合，可以实现等待/通知模式。Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式，但是这两者在使用方式以及功能特性上还是有差别的。Object上的监视器只有一个等待队列，但是Condition上可以有多个等待队列，每个Lock.newCondition都可以产生一个Condition对象，每个Condition对象关联到一个新的等待队列上。并且Condition支持响应中断，但是Object上的监视器不支持。</p>
<hr>
<span id="more"></span>

<h4 id="Condition源码"><a href="#Condition源码" class="headerlink" title="Condition源码"></a>Condition源码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Condition &#123;</span><br><span class="line">	// 当前线程进入等待状态，知道被通知（signal）或被中断</span><br><span class="line">    void await() throws InterruptedException;</span><br><span class="line"></span><br><span class="line">	// 不响应中断等待，知道被通知（signal）</span><br><span class="line">    void awaitUninterruptibly();</span><br><span class="line"></span><br><span class="line">	// 等待指定时长直到被通知或中断或超时</span><br><span class="line">    long awaitNanos(long nanosTimeout) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    // 等待指定时长直到被通知或中断或超时</span><br><span class="line">    boolean await(long time, TimeUnit unit) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">	// 当前线程进入等待状态直到被通知、中断或者到某个时间点。如果没有到指定时间就被通知，方法返回true，否则false</span><br><span class="line">    boolean awaitUntil(Date deadline) throws InterruptedException;</span><br><span class="line">    </span><br><span class="line">    // 唤醒一个等待在Condition上的线程，该线程从等待方法返回前必须获得与Condition相关联的锁</span><br><span class="line">    void signal();</span><br><span class="line"></span><br><span class="line">	// 唤醒所有等待在Condition上的线程，该线程从等待方法返回前必须获得与Condition相关联的锁         </span><br><span class="line">    void signalAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程 Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进阶3-ReentrantLock+Condition使用</title>
    <url>/2020/05/18/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B63-ReentrantLock+Condition%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="ReentrantLock实现同步"><a href="#ReentrantLock实现同步" class="headerlink" title="ReentrantLock实现同步"></a>ReentrantLock实现同步</h4><p>ReentrantLock是一个互斥锁，也是一个<strong>可重入锁</strong>（Reentrant就是再次进入的意思）。ReentrantLock锁在同一个时间点只能被一个线程锁持有，但是它可以被单个线程多次获取，每获取一次AQS的state就加1，每释放一次state就减1。还记得synchronized嘛，它也是可重入的，一个同步方法调用另外一个同步方法是没有问题的。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;methodA begin ThreadName=&quot;</span></span><br><span class="line">                    + Thread.currentThread().getName() +</span><br><span class="line">                    <span class="string">&quot; time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;methodA end ThreadName=&quot;</span></span><br><span class="line">                    + Thread.currentThread().getName() +</span><br><span class="line">                    <span class="string">&quot; time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;methodB begin ThreadName=&quot;</span></span><br><span class="line">                    + Thread.currentThread().getName() +</span><br><span class="line">                    <span class="string">&quot; time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;methodB end ThreadName=&quot;</span></span><br><span class="line">                    + Thread.currentThread().getName() +</span><br><span class="line">                    <span class="string">&quot; time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyService myService = <span class="keyword">new</span> MyService();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(myService);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(myService);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">methodA begin ThreadName=Thread-<span class="number">0</span> time=<span class="number">1589815754745</span></span><br><span class="line">methodA end ThreadName=Thread-<span class="number">0</span> time=<span class="number">1589815759746</span></span><br><span class="line">methodB begin ThreadName=Thread-<span class="number">1</span> time=<span class="number">1589815759746</span></span><br><span class="line">methodB end ThreadName=Thread-<span class="number">1</span> time=<span class="number">1589815764747</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Lock-Condition-实现等待通知"><a href="#Lock-Condition-实现等待通知" class="headerlink" title="Lock+Condition 实现等待通知"></a>Lock+Condition 实现等待通知</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">public</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;await 时间为&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singnal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;singnal 时间为&quot;</span> + System.currentTimeMillis());</span><br><span class="line">           condition.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyService myService = <span class="keyword">new</span> MyService();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(myService);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        myService.singnal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Lock-多个Condition实现通知部分线程"><a href="#Lock-多个Condition实现通知部分线程" class="headerlink" title="Lock+多个Condition实现通知部分线程"></a>Lock+多个Condition实现通知部分线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">public</span> Condition conditionA = lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> Condition conditionB = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">awaitA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;begin awaitA 时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">                + <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            conditionA.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;end awaitA 时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">                    + <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">awaitB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;begin awaitB 时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">                    + <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            conditionA.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;end awaitB 时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">                    + <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singnalAll_A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;begin singnalAll_A 时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">                    + <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            conditionA.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singnalAll_B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;begin singnalAll_B 时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">                    + <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            conditionA.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.awaitA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.awaitB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyService myService = <span class="keyword">new</span> MyService();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(myService);</span><br><span class="line">        threadA.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(myService);</span><br><span class="line">        threadB.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        threadB.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        myService.singnalAll_A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Lock-Condition一对一交替打印"><a href="#Lock-Condition一对一交替打印" class="headerlink" title="Lock+Condition一对一交替打印"></a>Lock+Condition一对一交替打印</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">public</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasValue = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (hasValue == <span class="keyword">true</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;打印set&quot;</span>);</span><br><span class="line">            hasValue = <span class="keyword">true</span>;</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (hasValue == <span class="keyword">false</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;打印get&quot;</span>);</span><br><span class="line">            hasValue = <span class="keyword">false</span>;</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.set();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(MyService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyService myService = <span class="keyword">new</span> MyService();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(myService);</span><br><span class="line">        threadA.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(myService);</span><br><span class="line">        threadB.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-进阶4-ReentrantReadWriteLock使用</title>
    <url>/2020/05/20/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B64-ReentrantReadWriteLock%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock：中维护了度锁和写锁，允许线程同时读取共享资源；但是如果有一个线程是写数据，那么其他线程就不能去读写该资源。即会出现三种情况：读读共享、写写互斥、读写互斥</p>
<hr>
<span id="more"></span>

<h4 id="读读共享"><a href="#读读共享" class="headerlink" title="读读共享"></a>读读共享</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.readLock().lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;获得读锁 &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.readLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        threadA.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(service);</span><br><span class="line">        threadB.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output 重复打印，但是A和B之间是异步的，没有同步，证明读锁是共享的</span></span><br><span class="line">获得读锁 A <span class="number">1589905522838</span></span><br><span class="line">获得读锁 B <span class="number">1589905522841</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="写写互斥"><a href="#写写互斥" class="headerlink" title="写写互斥"></a>写写互斥</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.writeLock().lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;获得写锁 &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.write();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.write();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        threadA.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(service);</span><br><span class="line">        threadB.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// output A和B无规律打印，但是A和B每次打印间隔十秒，证明两个写锁是同步的，互斥的不能异步进行</span></span><br><span class="line">获得写锁 A <span class="number">1589905643900</span></span><br><span class="line">获得写锁 A <span class="number">1589905653902</span></span><br><span class="line">获得写锁 A <span class="number">1589905663903</span></span><br><span class="line">获得写锁 A <span class="number">1589905673903</span></span><br><span class="line">获得写锁 A <span class="number">1589905683903</span></span><br><span class="line">获得写锁 B <span class="number">1589905693904</span></span><br><span class="line">获得写锁 B <span class="number">1589905703905</span></span><br><span class="line">获得写锁 B <span class="number">1589905713905</span></span><br><span class="line">获得写锁 A <span class="number">1589905723906</span></span><br><span class="line">获得写锁 B <span class="number">1589905733906</span></span><br><span class="line">获得写锁 B <span class="number">1589905743907</span></span><br><span class="line">获得写锁 B <span class="number">1589905753908</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="读写互斥"><a href="#读写互斥" class="headerlink" title="读写互斥"></a>读写互斥</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.readLock().lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;获得读锁 &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.readLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.writeLock().lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;获得写锁 &quot;</span> + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            service.write();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">        threadA.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line"></span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(service);</span><br><span class="line">        threadB.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output 打印的读锁和写锁没有顺序规律，但是每隔十秒打印一条语句，证明读写操作是同步执行的，</span></span><br><span class="line">获得读锁 A <span class="number">1589905917000</span></span><br><span class="line">获得写锁 B <span class="number">1589905997002</span></span><br><span class="line">获得写锁 B <span class="number">1589906007002</span></span><br><span class="line">获得写锁 B <span class="number">1589906017003</span></span><br><span class="line">获得写锁 B <span class="number">1589906027003</span></span><br><span class="line">获得读锁 A <span class="number">1589906037004</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池架构及介绍</title>
    <url>/2021/03/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B65-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h4 id="线程池架构-多线程编程分支"><a href="#线程池架构-多线程编程分支" class="headerlink" title="线程池架构 - 多线程编程分支"></a>线程池架构 - 多线程编程分支</h4><h5 id="Executor-gt-ExecutorService-gt-AbstractExecutorService-gt-ThreadPoolExecutor"><a href="#Executor-gt-ExecutorService-gt-AbstractExecutorService-gt-ThreadPoolExecutor" class="headerlink" title="Executor -&gt;  ExecutorService  -&gt;  AbstractExecutorService  -&gt; ThreadPoolExecutor"></a>Executor -&gt;  ExecutorService  -&gt;  AbstractExecutorService  -&gt; ThreadPoolExecutor</h5><ul>
<li><strong>Executor</strong>，又称为执行器，它可以执行已经提交的<strong>Runnable接口类型</strong>的<strong>任务</strong>。</li>
<li><strong>ExecutorService接口</strong>是<strong>Executor接口</strong>的一种实现，是一种更加广泛的接口（言外之意，也是方法类，只不过更完善了）。</li>
<li><strong>AbstractExecutorService</strong> 实现了 <strong>ExecutorService</strong> 定义的执行任务的方法，比如 submit，invokeAll，invokeAny 等。<strong>AbstractExecutorService</strong> 提供了一个 newTaskFor 方法用于构建 RunnableFuture 对象。执行任务方法返回的跟踪任务执行结果的对象都是通过 newTaskFor 来构建的。如果有需要可以通过自定义 newTaskFor 来构建所需的 RunnableFuture。 </li>
<li><strong>ThreadPoolExecutor类</strong>提供了一个可扩展的线程池的实现。</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="Executor-方法介绍"><a href="#Executor-方法介绍" class="headerlink" title="Executor 方法介绍"></a>Executor 方法介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Executor的主要作用：提供了一种显示创建线程的方式。</span></span><br><span class="line"><span class="comment">基于执行器的实现方式的不同，命令执行的线程也会不同。</span></span><br><span class="line"><span class="comment">命令可能执行在一个新线程中、一个线程池管理的线程中或者一个调用者本身的线程中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在将来的某个时刻，执行给定的命令</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="ExecutorService-方法介绍"><a href="#ExecutorService-方法介绍" class="headerlink" title="ExecutorService 方法介绍"></a>ExecutorService 方法介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不再接受新任务，允许之前已经提交的方法执行完毕，然后再关闭执行器。</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 阻止正在等待的任务开启，并且会试图停止正在执行的任务，然后关闭执行器  </span></span><br><span class="line">  <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果此执行程序已关闭，则返回  </span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">// 若关闭后所有任务都已完成，则返回true。注意除非首先调用shutdown或shutdownNow，否则isTerminated永不为true。返回：若关闭后所有任务都已完成，则返回true  </span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 阻塞直到关闭请求后所有任务完成执行，或者发生超时，或者当前线程被中断（以先发生者为准）。</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> var1, TimeUnit var3)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 继承自Executor的方法，用于创建和返回一个Future对象，用于 取消任务执行 或 等待任务执行完毕。  </span></span><br><span class="line">  &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; var1)</span></span>;</span><br><span class="line">  &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable var1, T var2)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于创建和返回一个Future对象，用于 取消任务执行 或 等待任务执行完毕。  </span></span><br><span class="line">  Future&lt;?&gt; submit(Runnable var1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收一个Callable集合，但是前者执行之后会返回一个Future的List，其中对应着每个Callable任务执行后的Future对象</span></span><br><span class="line">  &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1) <span class="keyword">throws</span> InterruptedException;  </span><br><span class="line">  &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, <span class="keyword">long</span> var2, TimeUnit var4) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法接收的是一个Callable的集合，执行这个方法不会返回Future，但是会返回所有Callable任务中其中一个任务的执行结果。这个方法也无法保证返回的是哪个任务的执行结果，反正是其中的某一个。  </span></span><br><span class="line">  &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; var1)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">  &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, <span class="keyword">long</span> var2, TimeUnit var4)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="AbstractExecutorService"><a href="#AbstractExecutorService" class="headerlink" title="AbstractExecutorService"></a>AbstractExecutorService</h4><p><strong>AbstractExecutorService 是 JDK 线程池 ThreadPoolExecutor，ForkJoinPool 等的父类，提供了许多非常有用的功能。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建用于跟踪任务执行结果的对象。</span></span><br><span class="line"><span class="comment"> * 如果有需要可以重写该方法自定义跟踪任务结果对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> runnable 可执行任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 任务执行结果类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 任务执行结果的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 任务执行结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(runnable, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(callable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="comment">// 校验任务，如果是空对象则抛出空指针异常</span></span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 构建一个 RunnableFuture 对象。RunnableFuture 本身表示一个任务（extends Runnable），同时也表示一个任务执行结果(extends Future)。</span></span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="comment">// 将 RunnableFuture 对象返回</span></span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RejectedExecutionException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException       &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task, result);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RejectedExecutionException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException       &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行批量任务中的任一任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">doInvokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="comment">// 如果任务是空对象抛出空指针异常</span></span><br><span class="line">    <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> ntasks = tasks.size();</span><br><span class="line">    <span class="comment">// 如果任务集合是空集合抛出参数不合法异常</span></span><br><span class="line">    <span class="keyword">if</span> (ntasks == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="comment">// 构建计算结果集合</span></span><br><span class="line">    ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(ntasks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务提交和消费的生产者消费者工具</span></span><br><span class="line">    ExecutorCompletionService&lt;T&gt; ecs =</span><br><span class="line">        <span class="keyword">new</span> ExecutorCompletionService&lt;T&gt;(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次提交前都先检查一下是否有完成的任务，如果完成则直接返回完成任务的计算结果，否则继续提交剩余任务</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//异常信息。用于最后一次获取的异常信息。如果任务没有正常结束，将该异常信息抛出。</span></span><br><span class="line">        ExecutionException ee = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 等待时间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> deadline = timed ? System.nanoTime() + nanos : <span class="number">0L</span>;</span><br><span class="line">        Iterator&lt;? extends Callable&lt;T&gt;&gt; it = tasks.iterator();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 先提交一个任务，以后再循环时先检查是否有任务已经完成。</span></span><br><span class="line">       <span class="comment">// 利用生产者消费者工具提交任务。任务如果结束后，会将计算结果存入到工具的阻塞队列中。</span></span><br><span class="line">        futures.add(ecs.submit(it.next()));</span><br><span class="line">        --ntasks;</span><br><span class="line">        <span class="keyword">int</span> active = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 检查是否有任务已经完成，如果有那么返回任务结果，否则继续提交任务</span></span><br><span class="line">            Future&lt;T&gt; f = ecs.poll();</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 还有任务未提交完，继续提交任务</span></span><br><span class="line">                <span class="keyword">if</span> (ntasks &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    --ntasks;</span><br><span class="line">                    futures.add(ecs.submit(it.next()));</span><br><span class="line">                    ++active;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 所有任务已执行结束，那么跳出循环。如果到这应该有执行异常的结果，后续会抛出执行异常</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (active == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 如果设置超时时间，那么利用阻塞队列的等待阻塞获取异常结果。如果超时未获取到计算结果，那么抛出超时异常。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">                    f = ecs.poll(nanos, TimeUnit.NANOSECONDS);</span><br><span class="line">                    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">                    <span class="comment">// 正常获取到结果，那么继续更新等待剩余时间。以防止 f.get()异常后还需要走这段代码，需要继续阻塞等待。</span></span><br><span class="line">                    nanos = deadline - System.nanoTime();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果没有设置超时时间，那么无限等待获取计算结果</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    f = ecs.take();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果获取到计算结果，那么将活跃任务(active)数减一，并且返回具体的任务结果。</span></span><br><span class="line">            <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">                --active;</span><br><span class="line">                <span class="comment">// 如果获取计算结果有异常，那么记录异常信息，继续循环获取其他任务的计算结果</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> f.get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException eex) &#123;</span><br><span class="line">                    ee = eex;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException rex) &#123;</span><br><span class="line">                    ee = <span class="keyword">new</span> ExecutionException(rex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到此任务已经全部结束，但是没有任何一个任务正常结束。如果记录的异常不为空则抛出记录的异常信息，否则创建一个执行任务异常并抛出。</span></span><br><span class="line">        <span class="keyword">if</span> (ee == <span class="keyword">null</span>)</span><br><span class="line">            ee = <span class="keyword">new</span> ExecutionException();</span><br><span class="line">        <span class="keyword">throw</span> ee;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 取消所有任务。到这或者是有一个任务已经结束（结束任务依然可以取消，只是没有效果）需要将其他任务取消，或者所有任务都非正常结束（取消任务没有效果）。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)</span><br><span class="line">            futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doInvokeAny(tasks, <span class="keyword">false</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException cannotHappen) &#123;</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> doInvokeAny(tasks, <span class="keyword">true</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(tasks.size());</span><br><span class="line">    <span class="comment">// 任务是否全部结束标志</span></span><br><span class="line">    <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建 RunnableFuture</span></span><br><span class="line">        <span class="comment">// 将计算结果存结果集中</span></span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        <span class="keyword">for</span> (Callable&lt;T&gt; t : tasks) &#123;</span><br><span class="line">            RunnableFuture&lt;T&gt; f = newTaskFor(t);</span><br><span class="line">            futures.add(f);</span><br><span class="line">            execute(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环遍历计算结果，如果有未完成，那么阻塞等待任务计算完成</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++) &#123;</span><br><span class="line">            Future&lt;T&gt; f = futures.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!f.isDone()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    f.get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException ignore) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        done = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> futures;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// done == false 表示在执行任务时（execute(f)）或者之前已经出现异常情况，比如当前线程被中断导致无法全部提交，那么将任务全部取消释放资源。</span></span><br><span class="line">        <span class="keyword">if</span> (!done)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)</span><br><span class="line">                futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                     <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">    ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(tasks.size());</span><br><span class="line">    <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建计算结果并加到结果集中</span></span><br><span class="line">        <span class="keyword">for</span> (Callable&lt;T&gt; t : tasks)</span><br><span class="line">            futures.add(newTaskFor(t));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超时时间节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.nanoTime() + nanos;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = futures.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环遍历结果集并执行任务。每次执行后立即检查超时时间。如果超时则直接返回结果集。既然已经超时，后续任务已经没必要开始。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            execute((Runnable)futures.get(i));</span><br><span class="line">            nanos = deadline - System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (nanos &lt;= <span class="number">0L</span>)</span><br><span class="line">                <span class="keyword">return</span> futures;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环遍历结果集，如果没有完成则阻塞等待完成。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            Future&lt;T&gt; f = futures.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!f.isDone()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0L</span>)</span><br><span class="line">                    <span class="keyword">return</span> futures;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    f.get(nanos, TimeUnit.NANOSECONDS);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">                    <span class="keyword">return</span> futures;</span><br><span class="line">                &#125;</span><br><span class="line">                nanos = deadline - System.nanoTime();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        done = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> futures;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!done)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)</span><br><span class="line">                futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用给定的初始参数创建一个新的 ThreadPoolExecutor。 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize即使在空闲时也要保留在池中的线程数(核心线程池大小)非设置了 allowCoreThreadTimeOut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize当线程数较大时，要在池中允许的最大线程数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime与核心相比，这是多余的空闲线程将在终止之前等待新任务的最长时间。(线程最大空闲时间) </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit  keepAliveTime 参数的时间单位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> work 执行任务之前将队列用于保留任务。此队列将仅保存由 execute 方法提交的 Runnable任务。 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory 行程序创建新线程时使用的工厂</span></span><br><span class="line"><span class="comment"> * 	ArrayBlockingQueue;</span></span><br><span class="line"><span class="comment"> * 	LinkedBlockingQueue;</span></span><br><span class="line"><span class="comment"> * 	SynchronousQueue;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler 程序由于达到线程边界和队列容量而导致执行被阻塞时使用的处理程序(拒绝策略)</span></span><br><span class="line"><span class="comment"> * 	ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span></span><br><span class="line"><span class="comment"> * 	ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="comment"> *	ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment"> *	ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException如果以下条件之一成立：</span></span><br><span class="line"><span class="comment"> *   corePoolSize &lt;0</span></span><br><span class="line"><span class="comment"> *   keepAliveTime &lt;0</span></span><br><span class="line"><span class="comment"> *   maximumPoolSize &lt;= 0</span></span><br><span class="line"><span class="comment"> *   maximumPoolSize &lt;corePoolSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException 如果是 workQueue threadFactory handler为空</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, </span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> maximumPoolSize,  </span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> keepAliveTime,  </span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,  </span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue, </span></span></span><br><span class="line"><span class="params"><span class="function">                              ThreadFactory threadFactory,  </span></span></span><br><span class="line"><span class="params"><span class="function">                              RejectedExecutionHandler handler )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h4><p>​    此类中帮忙定义了一些常用的线程池方法，</p>
<h5 id="几种预定义的线程池"><a href="#几种预定义的线程池" class="headerlink" title="几种预定义的线程池"></a>几种预定义的线程池</h5><ul>
<li><p><strong>FixedThreadPool</strong> </p>
<ul>
<li><p>corePoolSize与maximumPoolSize相等，即其线程全为核心线程，是一个固定大小的线程池，是其优势；</p>
</li>
<li><p>keepAliveTime = 0 该参数默认对核心线程无效，而FixedThreadPool全部为核心线程</p>
</li>
<li><p>workQueue 为LinkedBlockingQueue（无界阻塞队列），队列最大值为Integer.MAX_VALUE。如果任务提交速度持续大余任务处理速度，会造成队列大量阻塞。因为队列很大，很有可能在拒绝策略前，内存溢出。是其劣势；</p>
</li>
<li><p>FixedThreadPool的任务执行是无序的；</p>
</li>
<li><p>可用于Web服务瞬时削峰，但需注意长时间持续高峰情况造成的队列阻塞。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​</p>
</li>
<li><p><strong>CachedThreadPool</strong></p>
<ul>
<li>corePoolSize = 0，maximumPoolSize = Integer.MAX_VALUE，即线程数量几乎无限制；</li>
<li>keepAliveTime = 60s，线程空闲60s后自动结束。</li>
<li>workQueue 为 SynchronousQueue 同步队列，这个队列类似于一个接力棒，入队出队必须同时传递，因为CachedThreadPool线程创建无限制，不会有队列等待，所以使用SynchronousQueue；</li>
<li>快速处理大量耗时较短的任务，如Netty的NIO接受请求时，可使用CachedThreadPool。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<ul>
<li><p><strong>SingleThreadExecutor</strong></p>
<ul>
<li>FixedThreadPool可以向下转型为ThreadPoolExecutor，并对其线程池进行配置，而SingleThreadExecutor被包装后，无法成功向下转型。<strong>因此，SingleThreadExecutor被定以后，无法修改，做到了真正的Single</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<ul>
<li><p><strong>ScheduledThreadPool</strong></p>
<ul>
<li>newScheduledThreadPool调用的是ScheduledThreadPoolExecutor的构造方法，而ScheduledThreadPoolExecutor继承了ThreadPoolExecutor，构造是还是调用了其父类的构造方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<h4 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现 ThreadFactory 来自定义线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefinitionThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup threadGroup;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">	DefinitionThreadFactory(String name)&#123;</span><br><span class="line">		SecurityManager s = System.getSecurityManager();</span><br><span class="line">		threadGroup = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">				Thread.currentThread().getThreadGroup();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span>==name || <span class="string">&quot;&quot;</span>.equals(name.trim()))&#123;</span><br><span class="line">			name = <span class="string">&quot;pool&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		namePrefix = name +<span class="string">&quot;-&quot;</span>+ poolNumber.getAndIncrement() + <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(threadGroup, r,</span><br><span class="line">				namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">				<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (t.isDaemon())&#123;</span><br><span class="line">			t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)&#123;</span><br><span class="line">			t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码中应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService recalculateFreightThreadPool</span><br><span class="line">        = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>, <span class="number">6</span>, <span class="number">300L</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10000</span>), <span class="keyword">new</span> DefinitionThreadFactory(<span class="string">&quot;重新计算运费&quot;</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义线程池工厂</title>
    <url>/2021/03/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B66-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<h4 id="自定义线程池工厂"><a href="#自定义线程池工厂" class="headerlink" title="自定义线程池工厂"></a>自定义线程池工厂</h4><p>目的：在现有的线程池工厂中维护自定义属性，使其线程输出更个性，从而更直观的发现问题，更方便的监控线程池。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现 ThreadFactory 来自定义线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefinitionThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup threadGroup;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">	DefinitionThreadFactory(String name)&#123;</span><br><span class="line">		SecurityManager s = System.getSecurityManager();</span><br><span class="line">		threadGroup = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">				Thread.currentThread().getThreadGroup();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span>==name || <span class="string">&quot;&quot;</span>.equals(name.trim()))&#123;</span><br><span class="line">			name = <span class="string">&quot;pool&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		namePrefix = name +<span class="string">&quot;-&quot;</span>+ poolNumber.getAndIncrement() + <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(threadGroup, r,</span><br><span class="line">				namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">				<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (t.isDaemon())&#123;</span><br><span class="line">			t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)&#123;</span><br><span class="line">			t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动以线程池中使用线程池工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService recalculateFreightThreadPool</span><br><span class="line">        = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>, <span class="number">6</span>, <span class="number">300L</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10000</span>), <span class="keyword">new</span> DefinitionThreadFactory(<span class="string">&quot;重新计算运费&quot;</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Semaphore</title>
    <url>/2021/03/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B67-Semaphore/</url>
    <content><![CDATA[<h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p><strong>Semaphore</strong>，是<strong>JDK1.5</strong>的<strong>java.util.concurrent并发包</strong>中提供的一个并发工具类。</p>
<ul>
<li><p>Semaphore是一个计数信号量（令牌算法）。</p>
</li>
<li><p>从概念上将，Semaphore包含一组许可证。</p>
</li>
<li><p>如果有需要的话，每个acquire()方法都会阻塞，直到获取一个可用的许可证。</p>
</li>
<li><p>每个release()方法都会释放持有许可证的线程，并且归还Semaphore一个可用的许可证。</p>
</li>
<li><p>然而，实际上并没有真实的许可证对象供线程使用，Semaphore只是对可用的数量进行管理维护。</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="Semaphore-方法介绍"><a href="#Semaphore-方法介绍" class="headerlink" title="Semaphore 方法介绍"></a>Semaphore 方法介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化许可证数量的构造函数 </span></span><br><span class="line">Semaphore(<span class="keyword">int</span> var1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化许可证数量和是否公平模式的构造函数</span></span><br><span class="line">Semaphore(<span class="keyword">int</span> var1, <span class="keyword">boolean</span> var2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否公平模式FIFO</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFair</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程尝试去阻塞的获取1 或者 var1 个许可证。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 1:当前线程获取了 1/var1 个可用的许可证，则会停止等待，继续执行。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 2:当前线程被中断，则会抛出InterruptedException异常，并停止等待，继续执行。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> var1)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程尝试去阻塞的获取 1/var1 个许可证(不可中断的)。当前线程尝试去阻塞的获取 1/var1 个许可证(不可中断的)。当前线程获取了 1/var1 个可用的许可证，则会停止等待，继续执行。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acquireUninterruptibly</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acquireUninterruptibly</span><span class="params">(<span class="keyword">int</span> var1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程尝试去获取1个许可证。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 此过程是非阻塞的，它只是在方法调用时进行一次尝试。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前线程获取了1个可用的许可证，则会停止等待，继续执行，并返回true。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前线程没有获得这个许可证，也会停止等待，继续执行，并返回false。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(var1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程在限定时间内，阻塞的尝试去获取1个许可证。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 此过程是阻塞的，它会一直等待许可证，直到发生以下任意一件事：</span></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程获取了可用的许可证，则会停止等待，继续执行，并返回true。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程等待时间timeout超时，则会停止等待，继续执行，并返回false。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程在timeout时间内被中断，则会抛出InterruptedException一次，并停止等待，继续执行。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> var1, TimeUnit var3)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">long</span> var2, TimeUnit var4)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程释放 1/var1 个可用的许可证。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> var1)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前可用的许可证数量  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">availablePermits</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当前线程获得剩余的所有可用许可证。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">drainPermits</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 通过指示的减少量缩小可用许可证的数量</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reducePermits</span><span class="params">(<span class="keyword">int</span> var1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断当前Semaphore对象上是否存在正在等待许可证的线程。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前Semaphore对象上是正在等待许可证的线程数量。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getQueueLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Semaphore-应用案例"><a href="#Semaphore-应用案例" class="headerlink" title="Semaphore 应用案例"></a>Semaphore 应用案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//new Semaphore(permits)：初始化许可证数量的构造函数</span></span><br><span class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//new Semaphore(permits,fair):初始化许可证数量和是否公平模式的构造函数</span></span><br><span class="line">semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//isFair()：是否公平模式FIFO</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否公平FIFO：&quot;</span> + semaphore.isFair());</span><br><span class="line"></span><br><span class="line"><span class="comment">//availablePermits():获取当前可用的许可证数量</span></span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：开始---&quot;</span> + semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line"><span class="comment">//acquire():获取1个许可证</span></span><br><span class="line"><span class="comment">//---此线程会一直阻塞，直到获取这个许可证，或者被中断(抛出InterruptedException异常)。</span></span><br><span class="line">semaphore.acquire();</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：acquire 1 个---&quot;</span> + semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line"><span class="comment">//release()：释放1个许可证</span></span><br><span class="line">semaphore.release();</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：release 1 个---&quot;</span> + semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line"><span class="comment">//acquire(permits):获取n个许可证</span></span><br><span class="line"><span class="comment">//---此线程会一直阻塞，直到获取全部n个许可证,或者被中断(抛出InterruptedException异常)。</span></span><br><span class="line">semaphore.acquire(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：acquire 2 个---&quot;</span> + semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line"><span class="comment">//release(permits):释放n个许可证</span></span><br><span class="line">semaphore.release(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：release 1 个---&quot;</span> + semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line"><span class="comment">//hasQueuedThreads():是否有正在等待许可证的线程</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否有正在等待许可证的线程：&quot;</span> + semaphore.hasQueuedThreads());</span><br><span class="line"></span><br><span class="line"><span class="comment">//getQueueLength():正在等待许可证的队列长度(线程数量)</span></span><br><span class="line">System.out.println(<span class="string">&quot;正在等待许可证的队列长度(线程数量)：&quot;</span> + semaphore.getQueueLength());</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//定义final的信号量</span></span><br><span class="line">Semaphore finalSemaphore = semaphore;</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="comment">//drainPermits():获取剩余的所有的许可证</span></span><br><span class="line">    <span class="keyword">int</span> permits = finalSemaphore.drainPermits();</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获取了剩余的全部&quot;</span> + permits + <span class="string">&quot;个许可证.&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放所有的许可证</span></span><br><span class="line">    finalSemaphore.release(permits);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;释放了&quot;</span> + permits + <span class="string">&quot;个许可证.&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//有一个线程正在等待获取1个许可证</span></span><br><span class="line">        finalSemaphore.acquire();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获取了1个许可证.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放1个许可证</span></span><br><span class="line">    finalSemaphore.release();</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;释放了1个许可证.&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;).start();</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：drain 剩余的---&quot;</span> + finalSemaphore.availablePermits());</span><br><span class="line">System.out.println(<span class="string">&quot;是否有正在等待许可证的线程：&quot;</span> + finalSemaphore.hasQueuedThreads());</span><br><span class="line">System.out.println(<span class="string">&quot;正在等待许可证的队列长度(线程数量)：&quot;</span> + finalSemaphore.getQueueLength());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//有一个线程正在等待获取2个许可证</span></span><br><span class="line">        finalSemaphore.acquire(<span class="number">2</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获取了2个许可证.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放两个许可证</span></span><br><span class="line">    finalSemaphore.release(<span class="number">2</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;释放了2个许可证.&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：drain 剩余的---&quot;</span> + finalSemaphore.availablePermits());</span><br><span class="line">System.out.println(<span class="string">&quot;是否有正在等待许可证的线程：&quot;</span> + finalSemaphore.hasQueuedThreads());</span><br><span class="line">System.out.println(<span class="string">&quot;正在等待许可证的队列长度(线程数量)：&quot;</span> + finalSemaphore.getQueueLength());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;获取当前可用的许可证数量：---&quot;</span> + finalSemaphore.availablePermits());</span><br><span class="line">System.out.println(<span class="string">&quot;是否有正在等待许可证的线程：&quot;</span> + finalSemaphore.hasQueuedThreads());</span><br><span class="line">System.out.println(<span class="string">&quot;正在等待许可证的队列长度(线程数量)：&quot;</span> + finalSemaphore.getQueueLength());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果</span></span><br><span class="line"><span class="comment">是否公平FIFO：true</span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：开始---5</span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：acquire 1 个---4</span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：release 1 个---5</span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：acquire 2 个---3</span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：release 1 个---5</span></span><br><span class="line"><span class="comment">是否有正在等待许可证的线程：false</span></span><br><span class="line"><span class="comment">正在等待许可证的队列长度(线程数量)：0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Thread-0获取了剩余的全部5个许可证.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：drain 剩余的---0</span></span><br><span class="line"><span class="comment">是否有正在等待许可证的线程：true</span></span><br><span class="line"><span class="comment">正在等待许可证的队列长度(线程数量)：1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：drain 剩余的---0</span></span><br><span class="line"><span class="comment">是否有正在等待许可证的线程：true</span></span><br><span class="line"><span class="comment">正在等待许可证的队列长度(线程数量)：2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Thread-0释放了5个许可证.</span></span><br><span class="line"><span class="comment">Thread-2获取了2个许可证.</span></span><br><span class="line"><span class="comment">Thread-1获取了1个许可证.</span></span><br><span class="line"><span class="comment">Thread-1释放了1个许可证.</span></span><br><span class="line"><span class="comment">Thread-2释放了2个许可证.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">获取当前可用的许可证数量：---5</span></span><br><span class="line"><span class="comment">是否有正在等待许可证的线程：false</span></span><br><span class="line"><span class="comment">正在等待许可证的队列长度(线程数量)：0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>CountDownLatch</title>
    <url>/2021/03/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E9%98%B68-CountDownLatch/</url>
    <content><![CDATA[<h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p><strong>CountDownLatch</strong>，是<strong>JDK1.5</strong>的<strong>java.util.concurrent并发包</strong>中提供的一个并发工具类。</p>
<p>CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。<br>每当一个线程完成了自己的任务后，计数器的值就会减1。<br>当计数器值到达0时，它表示所有的线程已经完成了任务，然后在等待的线程就可以恢复执行任务。</p>
<hr>
<span id="more"></span>

<h4 id="CountDownLatch-方法介绍"><a href="#CountDownLatch-方法介绍" class="headerlink" title="CountDownLatch 方法介绍"></a>CountDownLatch 方法介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch 构造方法</span></span><br><span class="line">CountDownLatch(<span class="keyword">int</span> var1) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 让当前线程等待此CountDownLatch对象的count变为0，可以超时、可以中断。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 让当前线程等待此CountDownLatch对象的count变为0，可以中断。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> var1, TimeUnit var3)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 使此CountDownLatch对象的count值减1(无论执行多少次，count最小值为0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前count的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getCount</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="CountDownLatch-案例"><a href="#CountDownLatch-案例" class="headerlink" title="CountDownLatch 案例"></a>CountDownLatch 案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(financeHandlerMap.size());</span><br><span class="line">	<span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(financeHandlerMap.size());</span><br><span class="line">      <span class="keyword">for</span> (String key : financeHandlerMap.keySet()) &#123;</span><br><span class="line">          jobExecutor.execute(() -&gt; &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  semaphore.acquire();</span><br><span class="line"></span><br><span class="line">                  IFinanceHandler handler = financeHandlerMap.get(key);</span><br><span class="line">                  handler.confirm();</span><br><span class="line"></span><br><span class="line">                  semaphore.release();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  XxlJobLogger.log(e);</span><br><span class="line">              &#125;</span><br><span class="line">              countDownLatch.countDown();</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          countDownLatch.await();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          log.error();</span><br><span class="line">      &#125;</span><br><span class="line">log.info(<span class="string">&quot;所有程序执行完毕&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java多线程</category>
      </categories>
      <tags>
        <tag>Java-多线程进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异步-基础1-Future</title>
    <url>/2020/06/21/Java%E5%BC%82%E6%AD%A5-%E5%9F%BA%E7%A1%801-Future/</url>
    <content><![CDATA[<h4 id="什么是Future"><a href="#什么是Future" class="headerlink" title="什么是Future"></a>什么是Future</h4><p>​    它建模了一种异步计算，返回一个执行运算结果的引用，当运算结果结束后，这个引用被返回给调用方。在Future中触发那些潜在耗时的操作把调用线程解放出来。在处理异步调用和并发处理时非常有用。</p>
<span id="more"></span>

<h5 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h5><ul>
<li>不能将两个异步操作合并为一个（两个异步相互独立，同时第二个又依赖第一个结果）</li>
<li>等待Future集合中所有任务都完成</li>
<li>仅等待Future集合中最开结束的任务完成，并返回它的结果</li>
</ul>
<hr>
<h4 id="Future可以做什么？"><a href="#Future可以做什么？" class="headerlink" title="Future可以做什么？"></a>Future可以做什么？</h4><ul>
<li>异步计算</li>
<li>操作大数据结构</li>
<li>远程方法调用(下载文件、抓取HTML、Web服务)</li>
</ul>
<hr>
<h4 id="Future-方法"><a href="#Future-方法" class="headerlink" title="Future 方法"></a>Future 方法</h4><ul>
<li>get():方法可以当任务结束放回一个结果，如果调用时，工作还没有结束，则会阻塞线程，知道任务执行完成。</li>
<li>get(long timeout,TimeUnit unit) ：最多等待timeout时间，返回结果</li>
<li>cancel(boolean mayInterruptIfRunning)： 方法可以用来停止一个任务，如果任务可以停止（通过mayInterruptIfRunning判断），则可以返回true，如果任务已经完成或者已经停止，或者这个任务无法停止，则会返回false。</li>
<li>isDone()：方法判断当前方法是否完成</li>
<li>icCancel()：方法判断当前方法是否取消</li>
</ul>
<hr>
<h4 id="Future创建"><a href="#Future创建" class="headerlink" title="Future创建"></a>Future创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        Future&lt;Boolean&gt; future = executor.submit(<span class="keyword">new</span> Callable&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> doSomething();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;running end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Boolean result = future.get(<span class="number">1000</span>, TimeUnit.SECONDS);</span><br><span class="line">            System.out.println(<span class="string">&quot;future result:&quot;</span> + future);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java异步</category>
      </categories>
      <tags>
        <tag>Java-异步</tag>
      </tags>
  </entry>
  <entry>
    <title>Java抽象类</title>
    <url>/2020/04/24/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h4 id="抽象方法的特点"><a href="#抽象方法的特点" class="headerlink" title="抽象方法的特点"></a>抽象方法的特点</h4><ul>
<li>抽象方法时一个不完整的方法，没有方法体</li>
<li>抽象方法一定是抽象类，抽象类里不一定有抽象方法（接口中的方法一定是抽象方法）</li>
<li>抽象方法 和 抽象类都用 abstract修饰</li>
<li>抽象类不能通过 new 来实例化，抽象类中的抽象方法要被使用，必须由子类复写所有的抽象方法后，建立子类对象调用。如果子类只覆盖了部分抽象方法，那么子类还是一个抽象类。</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="abstract关键字和那些关键字不能共存"><a href="#abstract关键字和那些关键字不能共存" class="headerlink" title="abstract关键字和那些关键字不能共存"></a>abstract关键字和那些关键字不能共存</h4><p><strong>final</strong>：被final修饰的类不能有子类（不能被继承）。而被abstract修饰的类一定是一个父类（一定被继承）</p>
<p><strong>private</strong>：抽象类中的私有的抽象方法，不被子类所知，就无法复写。而抽象方法出现的就是需要被复写</p>
<p><strong>static</strong>：如果static可以修饰抽象方法，可以连对象都省了，直接类名调用就可以了。可是抽象方法运行没意义。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异步-基础2-CompletableFuture</title>
    <url>/2020/06/21/Java%E5%BC%82%E6%AD%A5-%E5%9F%BA%E7%A1%802-CompletableFuture/</url>
    <content><![CDATA[<h4 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h4><p>​    CompleteableFuture 是 Future 的扩展</p>
<hr>
<span id="more"></span>

<h4 id="CompletableFuture-方法"><a href="#CompletableFuture-方法" class="headerlink" title="CompletableFuture 方法"></a>CompletableFuture 方法</h4><ul>
<li>构造方法<ul>
<li>public CompletableFuture()</li>
</ul>
</li>
<li>实例化 CompletableFuture<ul>
<li>运行一个异步任务，不需要任务返回任何结果<ul>
<li>CompletableFuture.runAsync(Runnable runnable);</li>
<li>CompletableFuture.runAsync(Runnable runnable, Executor executor);</li>
</ul>
</li>
<li>运行一个异步任务，需要任务返回执行结果<ul>
<li>CompletableFuture.supplyAsync(Supplier<U> supplier);</U></li>
<li>CompletableFuture.supplyAsync(Supplier<U> supplier, Executor executor)</U></li>
</ul>
</li>
</ul>
</li>
<li>运行 supplyAsync 任务，获取返回结果<ul>
<li>get()</li>
</ul>
</li>
<li>CompletableFuture 转换和运行<ul>
<li>thenApply()：对返回结果进行操作</li>
<li>thenAccept() ：运行结束后，运行一个回调方法，可以访问CompletableFuture结果</li>
<li>thenRun()：运行结束后，运行一个回调方法，不可以访问CompletableFuture结果</li>
</ul>
</li>
<li>组合两个 CompletableFuture<ul>
<li>thenCompose()：组合两个独立的 CompletableFuture，获取合并后的结果。</li>
<li>thenCombine()：组合两个独立的 CompletableFuture，取得两个结果集后进行操作</li>
</ul>
</li>
<li>组合多个 CompletableFuture<ul>
<li>allof() ：组合所有的CompletableFuture都结束后，完成一些事情</li>
<li>anyof()：组合所有的CompletableFuture有一个完成后，就返回一个新的CompletableFuture</li>
</ul>
</li>
<li>异常处理<ul>
<li>exceptionally 回调处理异常</li>
<li>handle()：无论异常是否发生都会被调用</li>
</ul>
</li>
</ul>
<hr>
<h4 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h4><h5 id="实例化CompletableFuture"><a href="#实例化CompletableFuture" class="headerlink" title="实例化CompletableFuture"></a>实例化CompletableFuture</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无需返回结果</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; runAsynFuture = CompletableFuture.runAsync(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Simulate a long-running Job</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;I&#x27;ll run in a separate thread than the main thread.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要返回结果</span></span><br><span class="line">        CompletableFuture&lt;String&gt; supplyAsyncFuture = CompletableFuture.supplyAsync(<span class="keyword">new</span> Supplier&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Result of the asynchronous computation&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 阻塞等待Future完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(supplyAsyncFuture.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="CompletableFuture-运行完成后对结果转换，期待返回结果"><a href="#CompletableFuture-运行完成后对结果转换，期待返回结果" class="headerlink" title="CompletableFuture 运行完成后对结果转换，期待返回结果"></a>CompletableFuture 运行完成后对结果转换，期待返回结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// thenApply 对结果集进行转换</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executor = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第一种</span></span><br><span class="line">    CompletableFuture&lt;String&gt; whatsYourNameFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Rajeev&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    CompletableFuture&lt;String&gt; greetingFuture = whatsYourNameFuture.thenApply(name -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(greetingFuture.get()); <span class="comment">// Hello Rajeev</span></span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 第二种</span></span><br><span class="line">    CompletableFuture&lt;String&gt; welcomeText = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Rajeev&quot;</span>;</span><br><span class="line">    &#125;).thenApply(name -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;).thenApply(greeting -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting + <span class="string">&quot;, Welcome to the CalliCoder Blog&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(welcomeText.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="CompletableFuture-运行完成后进行一个回调，不期待有返回结果"><a href="#CompletableFuture-运行完成后进行一个回调，不期待有返回结果" class="headerlink" title="CompletableFuture 运行完成后进行一个回调，不期待有返回结果"></a>CompletableFuture 运行完成后进行一个回调，不期待有返回结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="comment">// thenApply 对结果集进行转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种</span></span><br><span class="line">        CompletableFuture&lt;String&gt; whatsYourNameFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Rajeev&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; greetingFuture = whatsYourNameFuture.thenApply(name -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(greetingFuture.get()); <span class="comment">// Hello Rajeev</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种</span></span><br><span class="line">        CompletableFuture&lt;String&gt; welcomeText = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Rajeev&quot;</span>;</span><br><span class="line">        &#125;).thenApply(name -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">        &#125;).thenApply(greeting -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> greeting + <span class="string">&quot;, Welcome to the CalliCoder Blog&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(welcomeText.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="组合两个独立的CompletableFuture"><a href="#组合两个独立的CompletableFuture" class="headerlink" title="组合两个独立的CompletableFuture"></a>组合两个独立的CompletableFuture</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合两个有依赖的Future，thenCompose</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        CompletableFuture&lt;Boolean&gt; result = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> getCityList();</span><br><span class="line">        &#125;,executor).thenCompose(citys -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> isContainBeijing(citys);</span><br><span class="line">            &#125;,executor);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;citys isContain beijing：&quot;</span> + result.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getCityList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; cityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        cityList.add(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">        cityList.add(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">        cityList.add(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">        cityList.add(<span class="string">&quot;changsha&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> cityList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isContainBeijing</span><span class="params">(List&lt;String&gt; citys)</span> </span>&#123;</span><br><span class="line">        Boolean isContain = citys.contains(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> isContain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//组合两个没有依赖的Future：thenCombine()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; citys1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;String&gt; cityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            cityList.add(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">            cityList.add(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">            cityList.add(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">            cityList.add(<span class="string">&quot;changsha&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> cityList;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; citys2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;String&gt; cityList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            cityList.add(<span class="string">&quot;shenzhen&quot;</span>);</span><br><span class="line">            cityList.add(<span class="string">&quot;guangzhou&quot;</span>);</span><br><span class="line">            cityList.add(<span class="string">&quot;chognqing&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> cityList;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; combinedFuture = citys1</span><br><span class="line">                .thenCombine(citys2, (citylist1, citylist2) -&gt; &#123;</span><br><span class="line">                   List&lt;String&gt; cityAll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                   cityAll.addAll(citylist1);</span><br><span class="line">                   cityAll.addAll(citylist2);</span><br><span class="line">                   <span class="keyword">return</span> cityAll;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;city number is: &quot;</span> + combinedFuture.get().size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="组合多个-CompletableFuture"><a href="#组合多个-CompletableFuture" class="headerlink" title="组合多个 CompletableFuture"></a>组合多个 CompletableFuture</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TestCompletableFuture &#123;</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; citys1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;String&gt; cityList = new ArrayList&lt;&gt;();</span><br><span class="line">            cityList.add(&quot;beijing&quot;);</span><br><span class="line">            cityList.add(&quot;shanghai&quot;);</span><br><span class="line">            cityList.add(&quot;wuhan&quot;);</span><br><span class="line">            cityList.add(&quot;changsha&quot;);</span><br><span class="line">            return cityList;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; citys2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;String&gt; cityList = new ArrayList&lt;&gt;();</span><br><span class="line">            cityList.add(&quot;shenzhen&quot;);</span><br><span class="line">            cityList.add(&quot;guangzhou&quot;);</span><br><span class="line">            cityList.add(&quot;chognqing&quot;);</span><br><span class="line">            return cityList;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; combinedFuture = citys1</span><br><span class="line">                .thenCombine(citys2, (citylist1, citylist2) -&gt; &#123;</span><br><span class="line">                    List&lt;String&gt; cityAll = new ArrayList&lt;&gt;();</span><br><span class="line">                    cityAll.addAll(citylist1);</span><br><span class="line">                    cityAll.addAll(citylist2);</span><br><span class="line">                    return cityAll;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;city number is: &quot; + combinedFuture.get().size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="并行多个任务，都执行完，组合它们的结果"><a href="#并行多个任务，都执行完，组合它们的结果" class="headerlink" title="并行多个任务，都执行完，组合它们的结果"></a>并行多个任务，都执行完，组合它们的结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Beautiful&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;String&gt; future3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  将所有Future加入集合中，目的稍后获取所有Future结果</span></span><br><span class="line">        List&lt;CompletableFuture&lt;String&gt;&gt; completableFuture = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        completableFuture.add(future1);</span><br><span class="line">        completableFuture.add(future2);</span><br><span class="line">        completableFuture.add(future3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并Future</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; allOfFuture = CompletableFuture.allOf(completableFuture.toArray(<span class="keyword">new</span>  CompletableFuture[completableFuture.size()]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有Future运行完结果汇总</span></span><br><span class="line">        CompletableFuture&lt;List&lt;String&gt;&gt; allFuture = allOfFuture.thenApply(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> completableFuture.stream()</span><br><span class="line">                    .map(pageContentFuture -&gt; pageContentFuture.join())</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对结果进行合并</span></span><br><span class="line">        CompletableFuture&lt;String&gt; allStr = allFuture.thenApply(pageContents -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> pageContents.stream().collect(joining());</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(allStr.get());</span><br><span class="line">        System.out.println(allOfFuture.get());</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="并行多个任务，任意一个执行完，都进行返回"><a href="#并行多个任务，任意一个执行完，都进行返回" class="headerlink" title="并行多个任务，任意一个执行完，都进行返回"></a>并行多个任务，任意一个执行完，都进行返回</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.joining;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Result of Future 1&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Result of Future 2&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Result of Future 3&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Object&gt; anyOfFuture = CompletableFuture.anyOf(future1, future2, future3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;任务列表中有执行完毕任务：&quot;</span> + anyOfFuture.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompletableFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 第一种方式 handle</span></span><br><span class="line">        String name = <span class="keyword">null</span>;</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture =  CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Computation error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">        &#125;).handle((s, t) -&gt; s != <span class="keyword">null</span> ? s : <span class="string">&quot;Hello, Stranger!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 第二种方式 exceptionally</span></span><br><span class="line">        CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;)</span><br><span class="line">                .exceptionally(ex -&gt; <span class="string">&quot;errorResultA&quot;</span>)</span><br><span class="line">                .thenApply(resultA -&gt; resultA + <span class="string">&quot; resultB&quot;</span>)</span><br><span class="line">                .thenApply(resultB -&gt; resultB + <span class="string">&quot; resultC&quot;</span>)</span><br><span class="line">                .thenApply(resultC -&gt; resultC + <span class="string">&quot; resultD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(future.join());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java异步</category>
      </categories>
      <tags>
        <tag>Java-异步</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合类2-List</title>
    <url>/2020/05/31/Java%E9%9B%86%E5%90%88%E7%B1%BB2-List/</url>
    <content><![CDATA[<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List<E></E></h4><p>​    列表的方法接口，包含列表查询、修改、迭代、检索</p>
<hr>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th>返回值</th>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td><code>add(E e)</code></td>
<td>将指定的元素追加到此列表的末尾（可选操</td>
</tr>
<tr>
<td>void</td>
<td><code>add(int index, E element)</code></td>
<td>将指定的元素插入此列表中的指定位置（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>addAll(Collection&lt;? extends E&gt; c)</code></td>
<td>按指定集合的迭代器（可选操作）返回的顺序将指定集合中的所有元素附加到此列表的末尾。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>addAll(int index, Collection&lt;? extends E&gt; c)</code></td>
<td>将指定集合中的所有元素插入到此列表中的指定位置（可选操作）。</td>
</tr>
<tr>
<td>void</td>
<td><code>clear()</code></td>
<td>从此列表中删除所有元素（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>contains(Object o)</code></td>
<td>如果此列表包含指定的元素，则返回 <code>true</code></td>
</tr>
<tr>
<td>boolean</td>
<td><code>containsAll(Collection&lt;?&gt; c)</code></td>
<td>如果此列表包含指定 <code>集合的</code>所有元素，则返回true。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>equals(Object o)</code></td>
<td>将指定的对象与此列表进行比较以获得相等性。</td>
</tr>
<tr>
<td>E</td>
<td><code>get(int index)</code></td>
<td>返回此列表中指定位置的元素</td>
</tr>
<tr>
<td>int</td>
<td><code>indexOf(Object o)</code></td>
<td>返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>isEmpty()</code></td>
<td>如果此列表不包含元素，则返回 <code>true</code> 。</td>
</tr>
<tr>
<td>Iterator<E></E></td>
<td><code>iterator()</code></td>
<td>以正确的顺序返回该列表中的元素的迭代器。</td>
</tr>
<tr>
<td>int</td>
<td><code>lastIndexOf(Object o)</code></td>
<td>返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。</td>
</tr>
<tr>
<td>ListIterator<E></E></td>
<td><code>listIterator()</code></td>
<td>返回列表中的列表迭代器（按适当的顺序）。</td>
</tr>
<tr>
<td>E</td>
<td><code>remove(int index)</code></td>
<td>删除该列表中指定位置的元素（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>remove(Object o)</code></td>
<td>从列表中删除指定元素的第一个出现（如果存在）（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>removeAll(Collection&lt;?&gt; c)</code></td>
<td>从此列表中删除包含在指定集合中的所有元素（可选操作）。</td>
</tr>
<tr>
<td>void</td>
<td><code>replaceAll(UnaryOperator&lt;E&gt; operator)</code></td>
<td>将该列表的每个元素替换为将该运算符应用于该元素的结果。</td>
</tr>
<tr>
<td>boolean</td>
<td><code>retainAll(Collection&lt;?&gt; c)</code></td>
<td>仅保留此列表中包含在指定集合中的元素（可选操作）。</td>
</tr>
<tr>
<td>E</td>
<td><code>set(int index, E element)</code></td>
<td>用指定的元素（可选操作）替换此列表中指定位置的元素。</td>
</tr>
<tr>
<td>int</td>
<td><code>size()</code></td>
<td>返回此列表中的元素数。</td>
</tr>
<tr>
<td>void</td>
<td><code>sort(Comparator&lt;? super E&gt; c)</code></td>
<td>使用随附的 <code>Comparator</code>排序此列表来比较元素。</td>
</tr>
<tr>
<td>default Spliterator<E></E></td>
<td><code>spliterator()</code></td>
<td>在此列表中的元素上创建一个<a href="../../java/util/Spliterator.html"><code>Spliterator</code></a> 。</td>
</tr>
<tr>
<td>List<E></E></td>
<td><code>subList(int fromIndex, int toIndex)</code></td>
<td>返回此列表中指定的 <code>fromIndex</code> （含）和 <code>toIndex</code>之间的视图。</td>
</tr>
</tbody></table>
<hr>
<h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><ul>
<li><strong>ArrayList</strong><E><ul>
<li>实现List<E>接口</E></li>
<li>内部实现为Object[]动态数组</li>
<li>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针</li>
<li>不是线程安全的</li>
</ul>
</E></li>
<li><strong>LinkedList</strong><E><ul>
<li>双链表实现了List和Deque接口，可以被当做堆栈、队列、双端队列进行操作</li>
<li>内部实现为链表</li>
<li>不是线程安全的</li>
<li>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</li>
<li>顺序访问非常高效</li>
</ul>
</E></li>
<li><strong>Vector</strong><ul>
<li>实现List接口</li>
<li>Vector的数据结构和ArrayList差不多，内部都为Object[]动态数组</li>
<li>是线程安全的，通过重载大量的父类方法加入synchronized 修饰来达到线程安全效果</li>
</ul>
</li>
<li><strong>Stack</strong><ul>
<li>由于Stack继承于Vector，因此它包含Vector中的全部API。</li>
<li>多了栈操作：pop()、peek()、push(E object)</li>
</ul>
</li>
<li><strong>CopyOnWriteArrayList</strong><ul>
<li>线程安全的，保证了数据最终一致，但是不能做到数据实时一致</li>
<li>所有写入操作进行加锁，读操作没有加锁</li>
<li>Vector 增删查改都加入了synchronized；CopyOnWriteArrayList 增删改加入了锁，读没有加锁，所以在性能上优于Vector</li>
<li>内存问题，在修改时存在两个对象。占用两个内存，如果修改操作过多会导致频繁的GC</li>
</ul>
</li>
</ul>
<hr>
<h4 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h4><ul>
<li>对于需要快速插入，删除元素，应使用ArrayList</li>
<li>对于需要快速随机访问元素，应该使用LinkedList</li>
<li>对于 <strong>单线程</strong> 或者<strong>多线程环境</strong>，但List只会被<strong>单个线程操作</strong>，此时应该使用非同步的类（ArrayList）</li>
<li>对于 <strong>多线程环境</strong>，且List可能是被多个线程操作，此时，应该使用同步类（Vector）</li>
</ul>
]]></content>
      <categories>
        <category>Java集合</category>
      </categories>
      <tags>
        <tag>Java-集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合类1-Collection</title>
    <url>/2020/05/31/Java%E9%9B%86%E5%90%88%E7%B1%BB1-Collection/</url>
    <content><![CDATA[<h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><p>所有通用的 Collection 实现类（通常通过其子接口间接实现）</p>
<hr>
<p>方法</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>add(E e)</td>
<td>确保此集合包含指定的元素（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td>addAll(Collection&lt;? exte</td>
<td>将指定集合中的所有元素添加到此集合（可选操作）。</td>
</tr>
<tr>
<td>void</td>
<td>clear()</td>
<td>从此集合中删除所有元素（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td>contains(Object o)</td>
<td>如果此集合包含指定的元素，则返回 true 。</td>
</tr>
<tr>
<td>boolean</td>
<td>containsAll(Collection&lt;?&gt; c)</td>
<td>如果此集合包含指定 集合中的所有元素，则返回true。</td>
</tr>
<tr>
<td>boolean</td>
<td>equals(Object o)</td>
<td>将指定的对象与此集合进行比较以获得相等性。</td>
</tr>
<tr>
<td>boolean</td>
<td>isEmpty()</td>
<td>如果此集合不包含元素，则返回 true</td>
</tr>
<tr>
<td>boolean</td>
<td>remove(Object o)</td>
<td>从该集合中删除指定元素的单个实例（如果存在）（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td>removeAll(Collection&lt;?&gt; c)</td>
<td>删除指定集合中包含的所有此集合的元素（可选操作）。</td>
</tr>
<tr>
<td>boolean</td>
<td>removeIf(Predicate&lt;? super E&gt; filter)</td>
<td>删除满足给定谓词的此集合的所有元素。</td>
</tr>
<tr>
<td>boolean</td>
<td>retainAll(Collection&lt;?&gt; c)</td>
<td>仅保留此集合中包含在指定集合中的元素（可选操作）。</td>
</tr>
<tr>
<td>int</td>
<td>size()</td>
<td>返回此集合中的元素数。</td>
</tr>
<tr>
<td>Object[]</td>
<td>toArray()</td>
<td>返回一个包含此集合中所有元素的数组。</td>
</tr>
<tr>
<td><T> T[]</T></td>
<td>toArray(T[] a)</td>
<td>返回包含此集合中所有元素的数组; 返回的数组的运行时类型是指定数组的运行时类型。</td>
</tr>
<tr>
<td>Iterator<E></E></td>
<td>iterator()</td>
<td>返回此集合中的元素的迭代器。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java集合</category>
      </categories>
      <tags>
        <tag>Java-集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合类3-Set</title>
    <url>/2020/05/30/Java%E9%9B%86%E5%90%88%E7%B1%BB3-Set/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Java集合类5-Deque</title>
    <url>/2020/05/31/Java%E9%9B%86%E5%90%88%E7%B1%BB5-Deque/</url>
    <content><![CDATA[<h4 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque<E></E></h4><p>支持双端元素插入和移除的线性集合</p>
<p>定义了访问deque两端元素的方法</p>
<ul>
<li>插入、删除、获取操作支持两种形式：快速失败 和 返回nul l或 true/false</li>
<li>既具有FIFO特定又具有LIFO特点，既是队列有是栈</li>
<li>不推荐插入null元素，null作为特定返回值标识队列为空</li>
</ul>
]]></content>
      <categories>
        <category>Java集合</category>
      </categories>
      <tags>
        <tag>Java-集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合类4-Queue</title>
    <url>/2020/05/30/Java%E9%9B%86%E5%90%88%E7%B1%BB4-Queue/</url>
    <content><![CDATA[<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue<E></E></h4><p>​    队列的方法接口，包含入队、出队、检索</p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>add(E e)</td>
<td>将指定的元素插入到此队列中，如果可以立即执行此操作，而不会违反容量限制， <code>true</code>在成功后返回 <code>IllegalStateException</code>如果当前没有可用空间，则抛出IllegalStateException。</td>
</tr>
<tr>
<td>E</td>
<td>element</td>
<td>检索，但不删除，这个队列的头。</td>
</tr>
<tr>
<td>boolean</td>
<td>offer(E e)</td>
<td>如果在不违反容量限制的情况下立即执行，则将指定的元素插入到此队列中。</td>
</tr>
<tr>
<td>E</td>
<td>peek()</td>
<td>检索但不删除此队列的头，如果此队列为空，则返回 <code>null</code> 。</td>
</tr>
<tr>
<td>E</td>
<td>pool()</td>
<td>检索并删除此队列的头，如果此队列为空，则返回 <code>null</code> 。</td>
</tr>
<tr>
<td>E</td>
<td>remove()</td>
<td>检索并删除此队列的头。</td>
</tr>
</tbody></table>
<hr>
<h4 id="BlockingQueue（单向队列）"><a href="#BlockingQueue（单向队列）" class="headerlink" title="BlockingQueue（单向队列）"></a>BlockingQueue（单向队列）</h4><p>BlockingQueue即阻塞队列，它是基于ReentrantLock；是所有阻塞队列父类接口，定义了所有队列的阻塞方法。</p>
<p>BlockingQueue方法有四种形式，具有不同的操作方式：</p>
<ul>
<li>抛出异常</li>
<li>返回一个特殊值（null 或 false）</li>
<li>程序将无限期的阻止当前线程，直到操作成功为止</li>
<li>程序块在指定最大实现后放弃</li>
</ul>
<h5 id="出队入队方法"><a href="#出队入队方法" class="headerlink" title="出队入队方法"></a>出队入队方法</h5><table>
<thead>
<tr>
<th>操作</th>
<th>立即返回（true/false）</th>
<th>立即返回（true/抛出异常）</th>
<th>一直等待直到成功</th>
<th>等待最大时限</th>
</tr>
</thead>
<tbody><tr>
<td><strong>添加</strong></td>
<td>offer(E e)</td>
<td>add(E e)</td>
<td>put(E e)</td>
<td>offer(E e, long timeout, TimeUnit unit)</td>
</tr>
<tr>
<td><strong>移除</strong></td>
<td>pool()</td>
<td>remove()</td>
<td>take()</td>
<td>poll(long timeout, TimeUnit unit)</td>
</tr>
</tbody></table>
<h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td><code>contains(Object o)</code></td>
<td>如果此队列包含指定元素，则返回true</td>
</tr>
<tr>
<td>int</td>
<td><code>drainTo(Collection&lt;? super E&gt; c)</code></td>
<td>从该队列中删除所有可用的元素，并将它们添加到给定的集合中</td>
</tr>
<tr>
<td>int</td>
<td><code>drainTo(Collection&lt;? super E&gt; c)</code></td>
<td>最多从该队列中删除给定数量的可用元素，并将它们添加到给定集合中</td>
</tr>
</tbody></table>
<h5 id="BlockingQueue实现类"><a href="#BlockingQueue实现类" class="headerlink" title="BlockingQueue实现类"></a>BlockingQueue实现类</h5><ul>
<li><strong>LinkedBlockingQueue</strong><ul>
<li>使用双锁保证线程安全</li>
<li>采取双锁，所以读写操作可以并行执行</li>
<li>内部实现为链表</li>
</ul>
</li>
<li><strong>ArrayBlockingQueue</strong><ul>
<li>使用单锁保证线程安全</li>
<li>采取单锁，读写操作异步进行，不能并行执行</li>
<li>内部实现为动态数组</li>
<li>因为使用单锁机制，所以高并发情况下LinkedBlockingQueue性能优于 ArrayBlockingQueue</li>
<li>remove 时需要移动数据，影响性能</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java集合</category>
      </categories>
      <tags>
        <tag>Java-集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-配置1-自动化部署</title>
    <url>/2020/07/25/Jenkins-%E9%85%8D%E7%BD%AE1-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="Jenkin安装"><a href="#Jenkin安装" class="headerlink" title="Jenkin安装"></a>Jenkin安装</h3><p><a href="https://markblogs.github.io/2020/07/23/Linux-%E5%AE%89%E8%A3%854-Jenkins/">安装教程</a></p>
<p><a href="https://www.jenkins.io/zh/doc/">文档地址</a></p>
<hr>
<h3 id="jenkin配置"><a href="#jenkin配置" class="headerlink" title="jenkin配置"></a>jenkin配置</h3><span id="more"></span>

<ul>
<li><p>请求运行起来的 Jenkins 服务</p>
</li>
<li><p>输入秘钥进入 Jenkins ，秘钥文件位置 <code> /var/lib/jenkins/secrets/initialAdminPassword</code></p>
</li>
<li><p>会弹出插件配置 <code>安装推荐插件</code> <code>选择插件来安装</code>  两种方式，自行选择</p>
</li>
<li><p>全局安全配置</p>
<ul>
<li>需要注意的  <code>是否允许用户注册</code> <code>用户可以做哪些事</code></li>
</ul>
</li>
<li><p>全局工具配置</p>
<ul>
<li>配置maven（setting.xml位置）</li>
<li>配置jdk（jdk位置）</li>
<li>配置git（git仓库地址，账号，分支）</li>
</ul>
</li>
<li><p>项目配置 <code>源码管理地址</code>  <code>构建触发器</code>  <code>构建</code></p>
<ul>
<li>源码地址 选择svn 或者  github 仓库地址，账号，密码，分支信息</li>
<li>构建触发器 svn 选择 <code>触发远程构建 (例如,使用脚本)</code>  ，github 选择 <code>GitHub hook trigger for GITScm polling</code></li>
<li>构建 maven 项目 选择<code>调用顶层Maven目标</code> 配置在 <strong>全局配置中自定义的Maven</strong>  ，目标内写入 构建命令  例如每次构建执行多个命令  <code>clean install</code> ，命令之间用空格隔开 </li>
</ul>
</li>
<li><p>开始第一次构建</p>
<ul>
<li><p>构建后执行 shell 命令需要安装 <code>Post Build task</code> 插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建后执行shell案例</span></span><br><span class="line">JAVA=/home/java/jdk1.8.0_251/bin/java</span><br><span class="line">APP_NAME=/home/jenkin/project/test.jar</span><br><span class="line">LOG_PATH=/home/jenkin/project/logs/test.log</span><br><span class="line">BUILD_FILE=/var/lib/jenkins/workspace/test/target/test-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">echo “构建完成，开始发布”</span><br><span class="line">cd /var/lib/jenkins/workspace</span><br><span class="line"></span><br><span class="line">if [ -e $BUILD_FILE ]; then</span><br><span class="line">	echo &quot;开始停止jar工程，根据端口8099&quot;</span><br><span class="line"></span><br><span class="line">	pid=`ps -ef|grep $APP_NAME|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27; `</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 根据端口停止工程</span></span><br><span class="line">	if [ -z &quot;$&#123;pid&#125;&quot; ]; then</span><br><span class="line">                echo &quot;端口8099未被使用，可直接运行项目&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;开始停止jar工程，根据端口8099&quot;</span><br><span class="line">		sudo kill -9 $pid</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	echo “拷贝构建成功文件”</span><br><span class="line">	mv -f $BUILD_FILE $APP_NAME</span><br><span class="line">else</span><br><span class="line">	echo &quot;未找到构建成功jar文件&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;开始运行jar工程&quot;</span><br><span class="line">nohup $JAVA -Dfile.encoding=utf-8 -jar $APP_NAME --server.port=8099  &gt;&gt; $LOG_PATH 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot;运行jar工程成功&quot;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>构建后部署到 tomcat 需要安装 <code>Deploy to container Plugin</code> 插件</p>
</li>
</ul>
</li>
<li><p>配置触发器允许远程调用 curl 方式 <code>项目</code> -》 <code>配置</code> -》<code>构建触发器</code> -》<code>触发远程构建 (例如,使用脚本)</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 浏览器调用地址 JENKINS_URL/job/<span class="built_in">test</span>/build?token=TOKEN_NAME</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> svn 钩子直接指向这个地址就可以实现自动部署集成svn</span></span><br><span class="line">http://xxx.xx.xxx.xxx:1111/job/test/build?token=qazwsx123456</span><br></pre></td></tr></table></figure>

<p>​</p>
<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>持续集成 Jenkins</category>
      </categories>
      <tags>
        <tag>持续集成 Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-配置2-集成github</title>
    <url>/2020/07/26/Jenkins-%E9%85%8D%E7%BD%AE2-%E9%9B%86%E6%88%90github/</url>
    <content><![CDATA[<h3 id="集成github"><a href="#集成github" class="headerlink" title="集成github"></a>集成github</h3><h5 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h5><ul>
<li><code>Manage Jenkins</code>  -》 <code>Configure System</code>  -》 <code>Github 服务器</code><ul>
<li>配置 <code>Secret text 凭证()</code> ，Secret text 生成方式 <strong>Github 用户设置</strong>  -》<code>settings</code> -》<code>Developer settings</code> -》<code>Personal access token</code>  将生成好的token复制作为 Secret text</li>
</ul>
</li>
<li>配置github服务器凭据 ，<strong>上一步生成的凭据</strong></li>
<li>高级重写 Hook URL</li>
<li>进入 我们的工程配置  <code>构建触发器节点</code> 选择 <strong>GitHub hook trigger for GITScm polling</strong></li>
</ul>
<p><img src="/2020/07/26/Jenkins-%E9%85%8D%E7%BD%AE2-%E9%9B%86%E6%88%90github/1.png" alt="配置案例"></p>
<hr>
<span id="more"></span>

<h5 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h5><ul>
<li>生成token <strong>Github 用户设置</strong>  -》<code>settings</code> -》<code>Developer settings</code> -》<code>Personal access token</code>  作为 jenkins 的<code>Secret text 凭证()</code> <ul>
<li>需要勾选 repo、admin:repo_hook 两个节点</li>
</ul>
</li>
<li>进入 <code>仓库</code> -》 <code>settings</code> -》<code>Webhooks</code> <ul>
<li>设置 <code>Payload URL</code>  </li>
<li><code>Payload URL</code>  为jenkins 在 <strong>高级重写 Hook URL</strong> 设置的地址</li>
</ul>
</li>
</ul>
<p><img src="/2020/07/26/Jenkins-%E9%85%8D%E7%BD%AE2-%E9%9B%86%E6%88%90github/2.png" alt="webhooks"></p>
]]></content>
      <categories>
        <category>持续集成 Jenkins</category>
      </categories>
      <tags>
        <tag>持续集成 Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础-if</title>
    <url>/2020/07/29/Linux-Shell%E5%9F%BA%E7%A1%802-if/</url>
    <content><![CDATA[<h4 id="if-then-语句"><a href="#if-then-语句" class="headerlink" title="if-then 语句"></a>if-then 语句</h4><p><strong>结构</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">	commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>案例1:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">testUser=NoSuchUser</span><br><span class="line"></span><br><span class="line">if grep $testUser /etc/passwd</span><br><span class="line">then </span><br><span class="line">	echo &quot;happy&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="if-then-else-语句"><a href="#if-then-else-语句" class="headerlink" title="if-then-else 语句"></a>if-then-else 语句</h4><p><strong>结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">	commands</span><br><span class="line">else</span><br><span class="line">	commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>案例2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">testUser=NoSuchUser</span><br><span class="line"></span><br><span class="line">if grep $testUser /etc/passwd</span><br><span class="line">then </span><br><span class="line">	echo &quot;happy&quot;</span><br><span class="line">else</span><br><span class="line">	echo &quot;sad&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="elif-语句"><a href="#elif-语句" class="headerlink" title="elif 语句"></a>elif 语句</h4><p><strong>结构</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if command1</span><br><span class="line">then</span><br><span class="line">	commands set 1</span><br><span class="line">elif command2</span><br><span class="line">	commands set 2</span><br><span class="line">elif command3</span><br><span class="line">	commands set 3</span><br><span class="line">else</span><br><span class="line">	commands set 4</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础-介绍</title>
    <url>/2020/07/29/Linux-Shell%E5%9F%BA%E7%A1%801-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h4 id="创建-shell-脚本"><a href="#创建-shell-脚本" class="headerlink" title="创建 shell 脚本"></a>创建 shell 脚本</h4><p>创建 shell 文件，必须在文件第一行使用指定的 shell：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h4><p>执行 shell 脚本首先要查看  <strong>用户是否具有执行文件(需要执行的shell文件)</strong> 文件权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看文件是否具有执行权限</span></span><br><span class="line">ls -l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行shell命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入shell文件对应的目录（例如：/<span class="built_in">test</span>/test.sh）</span></span><br><span class="line">cd /test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行 test.sh shell脚本</span></span><br><span class="line">./test</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="输出环境变量"><a href="#输出环境变量" class="headerlink" title="输出环境变量"></a>输出环境变量</h4><p>环境变量配置在 <code>/etc/profile</code></p>
<p>在 shell 脚本中可以使用  <code>$</code> + <code>变量名</code> 进行环境变量查看和使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>shell脚本中用户自定义的变量，用户变量长度不可以超过 20 位</p>
<p>用户变量在使用时  <code>$</code> + <code>变量名</code> 进行使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">var1=mark test var</span><br><span class="line">echo $var1</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h4><p>从命令中提取信息，并将其赋值给变量。</p>
<p>有两种方式可以将命令赋值给变量</p>
<ul>
<li>反引号字符  (`)</li>
<li>$()  格式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 date 命令输出信息，赋值给 var1</span></span><br><span class="line">var1=`date`</span><br><span class="line">var2=$(date)</span><br><span class="line">echo $var1</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="重定向输入和输出"><a href="#重定向输入和输出" class="headerlink" title="重定向输入和输出"></a>重定向输入和输出</h4><p>重定向有两种</p>
<ul>
<li><p>将命令输出重定向到另一个位置：<strong>输出重定向</strong></p>
<ul>
<li><p><code>&gt;</code>  重定向命令，会覆盖文件原有内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">date &gt; test.file</span><br></pre></td></tr></table></figure></li>
<li><p><code>&gt;&gt;</code> 在原有文件进行追加       </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">date &gt; test.file</span><br><span class="line">ls -l &gt;&gt; test.file                                 </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>&lt;</code> 可以将文件重定向到命令输入：<strong>输入重定向</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">var1 &lt; test.file</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="执行数学运算"><a href="#执行数学运算" class="headerlink" title="执行数学运算"></a>执行数学运算</h4><ul>
<li><p>expr 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> expr 命令支持操作符 | &amp; &lt; &lt;= = !=  &gt;= &gt; + - * / %</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> STRING : REGEXP 如果 REGEXP 匹配到 STRING 中某个模式，返回该模式匹配</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> match STRING REGEXP 如果 REGEXP 匹配到 STRING 中某个模式，返回该模式匹配</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> substr STRING POS LENGTH 返回起始位置为POS（从1开始计数），长度为LENGTH个字符的字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> index STRING CHARS 返回在 STRING 中找到 CHARS 字符串的位置; 否则，返回0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> length STRING 返回字符串长度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> + TOKEN 将TOKEN解释成字符串，即使是一个关键字</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">expr 1 + 5</span><br><span class="line"></span><br><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">var3=$(expr $var1 + $var2)</span><br><span class="line">echo result is $var3</span><br></pre></td></tr></table></figure></li>
<li><p>使用方框号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">expr 1 + 5</span><br><span class="line"></span><br><span class="line">var1=10</span><br><span class="line">var2=20</span><br><span class="line">var3=$[ $var1 + $var2]</span><br><span class="line">echo result is $var3</span><br></pre></td></tr></table></figure></li>
<li><p>浮点值运算 bc 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">var1=$(echo &quot;scale=4;3.44*5&quot; | bc)</span><br><span class="line">echo result is $var1</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="退出脚本"><a href="#退出脚本" class="headerlink" title="退出脚本"></a>退出脚本</h4><p>shell 中 每运行一个命令都使用退出状态码 （exit status）</p>
<p>Linux 专门提供了变量 <code>$?</code>  变量来保存上一个命令的退出状态码。</p>
<p>exit 命令 允许在脚本结束时指定一个状态码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd /test</span><br><span class="line"><span class="meta">$</span><span class="bash">?</span></span><br><span class="line">echo result is $var1</span><br><span class="line">exit 5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础3-test命令</title>
    <url>/2020/07/29/Linux-Shell%E5%9F%BA%E7%A1%803-test%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="test-命令"><a href="#test-命令" class="headerlink" title="test 命令"></a>test 命令</h4><p>test命令可以判定三类条件</p>
<ul>
<li>数值比较</li>
<li>字符串比较</li>
<li>文件比较</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h4><table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>n1 -eq n2</td>
<td>相等</td>
</tr>
<tr>
<td>n1 -ge n2</td>
<td>大于等于</td>
</tr>
<tr>
<td>n1 -gt n2</td>
<td>大于</td>
</tr>
<tr>
<td>n1 -le n2</td>
<td>小于等于</td>
</tr>
<tr>
<td>n1 -lt n2</td>
<td>小于</td>
</tr>
<tr>
<td>n1 -ne n2</td>
<td>不等于</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">value1=10</span><br><span class="line">value2=11</span><br><span class="line"></span><br><span class="line">if [$value1 -gt 5]</span><br><span class="line">then</span><br><span class="line">	echo &quot;The test value $value1 is greater than 5&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>str1 = str2</td>
<td>相同</td>
</tr>
<tr>
<td>str1 != str2</td>
<td>不同</td>
</tr>
<tr>
<td>str1 &lt; str2</td>
<td>小于</td>
</tr>
<tr>
<td>str1 &gt; str2</td>
<td>大于</td>
</tr>
<tr>
<td>-n str1</td>
<td>长度非0</td>
</tr>
<tr>
<td>-z str2</td>
<td>长度为0</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意 &gt; &lt; 两个符号需要转义 \</span></span><br><span class="line"><span class="bash"><span class="comment">#!/bin/bash</span></span></span><br><span class="line">value1=test</span><br><span class="line">value2=test2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [$test = $test2]</span><br><span class="line">then</span><br><span class="line">	echo &quot;equal&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [$test \&gt; $test2]</span><br><span class="line">then</span><br><span class="line">	echo &quot;no equal&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h4><table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-d file</td>
<td>file是否存在并是一个目录</td>
</tr>
<tr>
<td>-e file</td>
<td>file是否存在</td>
</tr>
<tr>
<td>-f file</td>
<td>file是否存在并是一个文件</td>
</tr>
<tr>
<td>-r file</td>
<td>file是否存在并可读</td>
</tr>
<tr>
<td>-s file</td>
<td>file是否存在并非空</td>
</tr>
<tr>
<td>-w file</td>
<td>file是否存在并可写</td>
</tr>
<tr>
<td>-x file</td>
<td>file是否存在并可执行</td>
</tr>
<tr>
<td>-o file</td>
<td>file是否存在并属于当前用户所有</td>
</tr>
<tr>
<td>-G file</td>
<td>file是否存在并且默认组与当前用户相同</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1 是否比 file2 新</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1 是否比 file2 旧</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意 &gt; &lt; 两个符号需要转义 \</span></span><br><span class="line"><span class="bash"><span class="comment">#!/bin/bash</span></span></span><br><span class="line">location=/home</span><br><span class="line">file_name=&quot;test.file&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [-e $location]</span><br><span class="line">then</span><br><span class="line">	echo &quot;save dir&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [-f $location/$file_name ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;save a file&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础4-case命令</title>
    <url>/2020/07/29/Linux-Shell%E5%9F%BA%E7%A1%804-case%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="case-命令"><a href="#case-命令" class="headerlink" title="case 命令"></a>case 命令</h4><p>结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case variable in</span><br><span class="line">pattern1 | pattern2 ) commands1;</span><br><span class="line">pattern3) commands3;</span><br><span class="line">*) default commands;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">case $USER in</span><br><span class="line">rich | barbara ) </span><br><span class="line">echo &quot;welcome,$USER&quot;;;</span><br><span class="line">testing) </span><br><span class="line">echo &quot;test account&quot;;;</span><br><span class="line">*) echo &quot;Authentication failed&quot;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础3-for</title>
    <url>/2020/07/29/Linux-Shell%E5%9F%BA%E7%A1%805-for/</url>
    <content><![CDATA[<h4 id="for命令"><a href="#for命令" class="headerlink" title="for命令"></a>for命令</h4><p>结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for var in list</span><br><span class="line">do</span><br><span class="line">	commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例一：从列表读取值,在最后一次迭代后，$test 变量会一致保持最后一次迭代的值有效（除非修改了它）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">遍历列表</span></span><br><span class="line">for test in Alabama Arizona Arkansas California Colorado</span><br><span class="line">do</span><br><span class="line">	echo the next word $test</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">遍历变量</span></span><br><span class="line">list = &quot;Alabama Arizona Arkansas California Colorado&quot;</span><br><span class="line">list = $list&quot; Connecticut&quot;</span><br><span class="line">for test in $list</span><br><span class="line">do</span><br><span class="line">	echo the next word $test</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">从命令读取值</span></span><br><span class="line">files = &quot;states&quot;</span><br><span class="line">for state in $&#123;cat $file&#125;</span><br><span class="line">do </span><br><span class="line">	echo &quot;Visit beautiful $state&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p>案例二</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">用通配符读取目录</span></span><br><span class="line">for file in /home/rich/test/*</span><br><span class="line">do </span><br><span class="line">	if [-d &quot;$file&quot;]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;$file is a directory&quot;</span><br><span class="line">	elif [-f &quot;$file&quot;]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;$file is a file&quot;</span><br><span class="line">	fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p>案例三</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">C语言风格的<span class="keyword">for</span></span></span><br><span class="line">for ((i= 0; i &lt; 10; i++))</span><br><span class="line">do</span><br><span class="line">	echo &quot;The next number is $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础6-while</title>
    <url>/2020/08/10/Linux-Shell%E5%9F%BA%E7%A1%806-while/</url>
    <content><![CDATA[<h4 id="while命令"><a href="#while命令" class="headerlink" title="while命令"></a>while命令</h4><p>结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while test command</span><br><span class="line">do</span><br><span class="line">	other commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">var1 = 10</span><br><span class="line">while [$var1 -gt 0]</span><br><span class="line">do</span><br><span class="line">	echo $var1</span><br><span class="line">	var1 = $[$var1 -1]</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell基础7-结束循环</title>
    <url>/2020/08/10/Linux-Shell%E5%9F%BA%E7%A1%807-%E7%BB%93%E6%9D%9F%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h4><p>​    break命令来退出任意类型的循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">跳出内部循环</span></span><br><span class="line">for ((b= 0; b &lt; 10; b++))</span><br><span class="line">do</span><br><span class="line">	echo &quot;	Inner loop: $b&quot;</span><br><span class="line">	for ((a= 0; a &lt; 10; a++))</span><br><span class="line">    do</span><br><span class="line">        if [$a -gt 4]</span><br><span class="line">        then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">        echo &quot;	Inner loop: $a&quot;</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">跳出内部循环</span></span><br><span class="line"></span><br><span class="line">for ((b= 0; b &lt; 10; b++))</span><br><span class="line">do</span><br><span class="line">	echo &quot;	Inner loop: $b&quot;</span><br><span class="line">	for ((a= 0; a &lt; 10; a++))</span><br><span class="line">    do</span><br><span class="line">        if [$a -gt 4]</span><br><span class="line">        then</span><br><span class="line">            break 2</span><br><span class="line">        fi</span><br><span class="line">        echo &quot;	Inner loop: $a&quot;</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h4><p>​    continue命令可以提前终止某次循环中的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">定义循环条件</span></span><br><span class="line">for ((b= 0; b &lt; 10; b++))</span><br><span class="line">do</span><br><span class="line">	echo &quot;	Inner loop: $b&quot;</span><br><span class="line">	for ((a= 0; a &lt; 10; a++))</span><br><span class="line">    do</span><br><span class="line">        if [$a -gt 5] &amp;&amp; [$a -lt 9]</span><br><span class="line">        then</span><br><span class="line">            continue</span><br><span class="line">        fi</span><br><span class="line">        echo &quot;	Iteration number: $a&quot;</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Shell案例-1</title>
    <url>/2020/07/28/Linux-Shell%E6%A1%88%E4%BE%8B-1/</url>
    <content><![CDATA[<h3 id="检测磁盘空间"><a href="#检测磁盘空间" class="headerlink" title="检测磁盘空间"></a>检测磁盘空间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Big_Users-在各个目录中查找大磁盘空间用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##############################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 脚本参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">CHECK_DIRECTORIES=<span class="string">&quot; /var/log /home&quot;</span>  <span class="comment">#Directories to check</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">############## 主脚本 #################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">DATE=$(date <span class="string">&#x27;+%m%d%y&#x27;</span>)               <span class="comment">#报告文件的日期</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="built_in">exec</span> &gt; disk_space_<span class="variable">$DATE</span>.rpt          <span class="comment">#创建文件标准输出</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;Top Ten Disk Space Usage&quot;</span>      <span class="comment">#报告头</span></span></span><br><span class="line">echo &quot;for $CHECK_DIRECTORIES Directories&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="keyword">for</span> DIR_CHECK <span class="keyword">in</span> <span class="variable">$CHECK_DIRECTORIES</span>  <span class="comment">#循环 文件夹列表</span></span></span><br><span class="line">do</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;The $DIR_CHECK Directory:&quot;   #文件夹头部</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 被用户使用前十的磁盘空间</span></span></span><br><span class="line">  du -S $DIR_CHECK 2&gt;/dev/null |</span><br><span class="line">  sort -rn |</span><br><span class="line">  sed &#x27;&#123;11,$D; =&#125;&#x27; |</span><br><span class="line">  sed &#x27;N; s/\n/ /&#x27; |</span><br><span class="line">  gawk &#x27;&#123;printf $1 &quot;:&quot; &quot;\t&quot; $2  &quot;\t&quot; $3 &quot;\n&quot;&#125;&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="keyword">done</span>                                 <span class="comment">#End of loop</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-安装1-JDK</title>
    <url>/2020/07/23/Linux-%E5%AE%89%E8%A3%851-JDK/</url>
    <content><![CDATA[<h3 id="安装Jdk"><a href="#安装Jdk" class="headerlink" title="安装Jdk"></a>安装Jdk</h3><h5 id="第一种安装方式-手动安装"><a href="#第一种安装方式-手动安装" class="headerlink" title="第一种安装方式 手动安装"></a>第一种安装方式 手动安装</h5><ul>
<li><p>第一步准备安装包 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">下载地址</a>   <code>jdk-8u202-linux-x64.tar.gz</code></p>
</li>
<li><p>解压压缩包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最下面加入加压的jdk目录</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_251</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$JAVA_HOME/bin/:$PATH</span><br></pre></td></tr></table></figure></li>
<li><p>使用 source /etc/profile 让 profile 文件立即生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>验证是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h5 id="第二种安装方式-yum"><a href="#第二种安装方式-yum" class="headerlink" title="第二种安装方式 yum"></a>第二种安装方式 yum</h5><ul>
<li><p>查询要安装jdk的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y list java*</span><br></pre></td></tr></table></figure></li>
<li><p>安装jdk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure></li>
<li><p>验证jdk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux安装</category>
      </categories>
      <tags>
        <tag>Linux安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-安装2-MAVEN</title>
    <url>/2020/07/23/Linux-%E5%AE%89%E8%A3%852-MAVEN/</url>
    <content><![CDATA[<h3 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h3><ul>
<li><p>下载安装包  <a href="http://maven.apache.org/download.cgi">下载地址</a>   <code>apache-maven-3.6.1-bin.tar.gz</code></p>
</li>
<li><p>解压文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.6.1-bin.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件最后加入</span></span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.6.1</span><br><span class="line">export PATH=$MAVEN_HOME/bin:$PATH </span><br></pre></td></tr></table></figure></li>
<li><p>刷新环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>检查版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -v </span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>常用命令</strong></p>
<ul>
<li><p>-maven compile（编译）：将java源程序编译成class字节文件，target目录下</p>
</li>
<li><p>-maven test（测试）：运行src/test/java下的测试类</p>
</li>
<li><p>-maven clean (清除)  ：将以前编译好的class字节码文件删除</p>
</li>
<li><p>-maven package (打包) ：打到target 目录下</p>
</li>
<li><p>-maven install ：将项目生成的jar包，放到仓库中，以便别的模块使用。</p>
</li>
<li><p>分析项目的依赖信息：mvn dependency:analyze 或 mvn dependency:tree</p>
<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux安装</category>
      </categories>
      <tags>
        <tag>Linux安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-安装3-GIT</title>
    <url>/2020/07/23/Linux-%E5%AE%89%E8%A3%853-GIT/</url>
    <content><![CDATA[<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul>
<li><p>下载安装包 <a href="https://github.com/git/git/releases">下载地址</a>  <code>v2.17.0.tar.gz</code> </p>
</li>
<li><p>解压安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf v2.17.0.tar.gz </span><br></pre></td></tr></table></figure></li>
<li><p>安装编译源码所需依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li>
<li><p>安装依赖时，yum自动安装了Git，需要卸载旧版本Git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove git 出现提示输入y即可</span><br></pre></td></tr></table></figure></li>
<li><p>进入解压后的文件夹，然后执行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd git-2.17.0 </span><br><span class="line">make prefix=/usr/local/git all</span><br></pre></td></tr></table></figure></li>
<li><p>安装Git至/usr/local/git路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make prefix=/usr/local/git install</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最后加入</span></span><br><span class="line">GIT_HOME=/usr/local/git</span><br><span class="line">export PATH=$PATH:$GIT_HOME/bin</span><br></pre></td></tr></table></figure></li>
<li><p>刷新配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>校验安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux安装</category>
      </categories>
      <tags>
        <tag>Linux安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-安装4-Jenkins</title>
    <url>/2020/07/23/Linux-%E5%AE%89%E8%A3%854-Jenkins/</url>
    <content><![CDATA[<h3 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h3><p>第一种</p>
<ul>
<li><p>下载安装包 <a href="https://pkg.jenkins.io/redhat/">下载地址</a>  <code>jenkins-2.174-1.1.noarch.rpm </code></p>
</li>
<li><p>进入 jenkins-2.174-1.1.noarch.rpm 存放目录，导入jenkins秘钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_0_10_centos jenkin]# pwd</span><br><span class="line">/home/jenkin</span><br><span class="line">[root@VM_0_10_centos jenkin]# cd /home/jenkin</span><br><span class="line">[root@VM_0_10_centos jenkin]# wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span><br><span class="line">[root@VM_0_10_centos jenkin]# rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br></pre></td></tr></table></figure></li>
<li><p>解压目录 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh jenkins-2.174-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li><p>查看安装目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis jenkins</span><br></pre></td></tr></table></figure></li>
<li><p>修改jenkins服务端口（）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> JENKINS_PORT 端口配置节点</span></span><br></pre></td></tr></table></figure></li>
<li><p>Jenkins配置jdk安装路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/jenkins</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> candidates 中换行加入配置即可</span></span><br><span class="line">/usr/local/java/jdk1.8.0_251/bin/java</span><br></pre></td></tr></table></figure></li>
<li><p>重启 Jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>密码 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></li>
<li>配置端口 <code>/etc/sysconfig/jenkins</code></li>
<li>配置启动jdk文件 <code>/etc/init.d/jenkins</code></li>
<li>构建后文件存放地址 <code>/var/lib/jenkins/workspace</code>  <ul>
<li><code>/etc/sysconfig/jenkins</code>  文件中 <code>JENKINS_HOME</code> 节点配置，可自行修改</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux安装 Jenkins</category>
      </categories>
      <tags>
        <tag>Linux安装 Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-安装5-Nacos</title>
    <url>/2021/11/19/Linux-%E5%AE%89%E8%A3%855-Nacos/</url>
    <content><![CDATA[<h3 id="安装-Nacos"><a href="#安装-Nacos" class="headerlink" title="安装 Nacos"></a>安装 Nacos</h3><ul>
<li><p>下载安装包 <a href="https://github.com/alibaba/nacos/releases">下载地址</a>  <code>nacos-server-1.4.1.tar.gz </code></p>
</li>
<li><p>进入 解压文件 存放目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压文件</span></span><br><span class="line">[root@VM_0_10_centos nacos]# tar -xvf nacos-server-1.4.1.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">nacos启动</span></span><br><span class="line">[root@VM_0_10_centos nacos]# cd /nacos/bin</span><br><span class="line">[root@VM_0_10_centos bin]# ./startup.sh -m standalone</span><br></pre></td></tr></table></figure></li>
<li><p>访问：localhost:8848/nacos，输入默认账号密码：nacos，nacos</p>
</li>
</ul>
<span id="more"></span>

<h5 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h5><ul>
<li>Linux/Unix/Mac：startup.sh -m standalone</li>
<li>Windows：startup.cmd -m standalone</li>
</ul>
<h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><p>可以自定义账号密码，并将账号密码存储进我们自己的数据库，需要修改/nacos/conf/application.properties文件，nacos默认使用的数据库为内嵌的cmdb</p>
<ul>
<li><p>创建数据库nacos，并设置字符集utf8</p>
</li>
<li><p>执行/nacos/conf/nacos-mysql.sql中的语句，创建表，并插入数据</p>
</li>
<li><p>修改/nacos/conf/application.properties文件，如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>验证登录，重启nacos，打开localhost:8848/nacos，输入默认账号密码，看是否可以正常登录</p>
</li>
<li><p>修改账号密码，在数据库中，找到users表，即用户表，就可以修改其中的账号和密码</p>
</li>
<li><p>创建密码，nacos的密码是使用 org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder 加密的，所以需要我们手动创建一个加密工具类，来生成我们自己的密码，将密码写进users表中，重启nacos</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String pwd = <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">		System.out.println(pwd);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.1</span><span class="number">.4</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux安装 Nacos</category>
      </categories>
      <tags>
        <tag>Linux安装 Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令1-文件和目录命令</title>
    <url>/2020/05/25/Linux%E5%91%BD%E4%BB%A41-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="目录命令"><a href="#目录命令" class="headerlink" title="目录命令"></a>目录命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls 命令</span><br><span class="line">	选项</span><br><span class="line">		-a	:	显示所有文件</span><br><span class="line">		--color=when	:	支持颜色输出，when的值默认是always(总显示颜色），也可以是never(不显示)，auto(自动)</span><br><span class="line">		-d	:	显示目录信息，不是显示目录下文件</span><br><span class="line">		-h	:	人性化显示，按照我们习惯的单位显示文件大小</span><br><span class="line">		-i	:	显示文件的i节点号</span><br><span class="line">		-l	:	长格式显示</span><br><span class="line"></span><br><span class="line">pwd</span><br><span class="line">	查询当前所在目录命令</span><br><span class="line"></span><br><span class="line">mkdir</span><br><span class="line">	创建空目录</span><br><span class="line"></span><br><span class="line">rmdir</span><br><span class="line">	删除空目录(只能删除空目录)，一般直接用  rm -rf 进行删除。</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo</span><br><span class="line">	echo 1111111111 &gt;&gt; 11</span><br><span class="line"></span><br><span class="line">touch</span><br><span class="line">	创建空文件或修改文件时间</span><br><span class="line"></span><br><span class="line">stat</span><br><span class="line">	查看文件详细信息</span><br><span class="line"></span><br><span class="line">cat</span><br><span class="line">	查看文件内容</span><br><span class="line">	选项：</span><br><span class="line">		-A	：	列出所有隐藏符号</span><br><span class="line">		-E	：	列出每行结尾的回车符$</span><br><span class="line">		-n	：	显示行号</span><br><span class="line">		-T	：	把Tab键用 ^I	显示出来</span><br><span class="line">		-v	:	列出特殊字符 		</span><br><span class="line">		</span><br><span class="line">more</span><br><span class="line">	分屏显示文件内容</span><br><span class="line">	空格：显示下一行</span><br><span class="line">	b	：上一页</span><br><span class="line">	空格	：下一页</span><br><span class="line">	q	：退出</span><br><span class="line"></span><br><span class="line">less</span><br><span class="line">	分行显示，上下键进行查看</span><br><span class="line">	q	：	退出</span><br><span class="line"></span><br><span class="line">head 20  </span><br><span class="line">	显示文件头20行</span><br><span class="line">	-n 行数</span><br><span class="line">	</span><br><span class="line">tail</span><br><span class="line">	显示文件尾20行</span><br><span class="line">	-n	行数</span><br><span class="line">	-f	监听文件的新增内容	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ln	</span><br><span class="line">	在文件之间建立链接</span><br><span class="line"></span><br><span class="line">	[root@localhost /]#	ln	[选项]		源文件	目标文件</span><br><span class="line">	选项</span><br><span class="line">		-s	：	建立软连接，如果不加 -s 则创建硬链接</span><br><span class="line">		-f	：	强制。如果目标文件已经存在，则删除目标后再建立链接文件</span><br><span class="line">	案例</span><br><span class="line">		[root@localhost /]#	ln 	/root/abc		/tmp/abc</span><br><span class="line"><span class="meta">		#</span><span class="bash">建立硬链接文件，如果目标文件没有写文件名，则会和原名一样</span></span><br><span class="line"></span><br><span class="line">		[root@localhost /]#	touch		bols</span><br><span class="line">		[root@localhost /]#	ln 	-s	/root/bols				/tmp/</span><br><span class="line"></span><br><span class="line">	软硬链接特性</span><br><span class="line">		硬链接特性：</span><br><span class="line">			1、源文件和链接文件拥有相同的	Inode		和	Block</span><br><span class="line">			2、修改任意一个文件，另一个都改变</span><br><span class="line">			3、删除任意一个文件，另一个都能使用</span><br><span class="line">			4、硬链接标记不清，很难确认硬链接位置，不建议使用。</span><br><span class="line">			5、硬链接不能链接目录</span><br><span class="line">			6、硬链接不能夸区</span><br><span class="line">		</span><br><span class="line">		软连接特性：</span><br><span class="line">			1、源文件和链接文件拥有不同的	Inode		和	Block</span><br><span class="line">			2、修改任意一个文件，另一个都改变</span><br><span class="line">			3、删除软连接，源文件不受影响，删除源文件，软连接不能使用</span><br><span class="line">			4、软连接没有实际数据，只保存源文件的	Inode，不论源文件多大，软连接大小不变</span><br><span class="line">			5、软连接文件最大权限为		lrwxrwxrwx.,但是没有实际数据，最终访问时还要参考源文件权限</span><br><span class="line">			6、软连接可以连接目录</span><br><span class="line">			7、软连接可以跨区</span><br><span class="line">			8、软连接特征明显，建议使用软连接</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="删除-复制-移动命令"><a href="#删除-复制-移动命令" class="headerlink" title="删除-复制-移动命令"></a>删除-复制-移动命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm命令</span><br><span class="line">	是强大的删除命令</span><br><span class="line">	[root@localhost /]#	rm 	[选项]		文件或目录</span><br><span class="line">	选项</span><br><span class="line">		-f	：	强制删除</span><br><span class="line">		-i	：	交互删除，在删除之前询问用户</span><br><span class="line">		-r	：	递归删除，可以删除目录</span><br><span class="line">		</span><br><span class="line">CP命令</span><br><span class="line">	复制文件和目录</span><br><span class="line">	[root@localhost /]#	cp 	[选项]		源文件	目标文件</span><br><span class="line">	选项</span><br><span class="line">		-a	：	相当于 -dpr 选项的集合，</span><br><span class="line">		-d	：	如果源文件为软链接(对硬链接无效)，则复制出的目标文件也为软链接</span><br><span class="line">		-i	：	询问，如果目标文件已经存在，则会询问是否覆盖</span><br><span class="line">		-p	：	复制后目标文件保留源文件属性(所属者、所属组、权限和时间)</span><br><span class="line">		-r	：	递归复制，用于复制目录</span><br><span class="line">	</span><br><span class="line">	复制目录中部分文件到另一个目录</span><br><span class="line">	cp -r webapps.dist/&#123;ROOT,desc&#125; webapps/</span><br><span class="line">		</span><br><span class="line">mv命令</span><br><span class="line">	移动文件或者改名</span><br><span class="line">	[root@localhost /]#	mv 	[选项]		源文件	目标文件</span><br><span class="line">	选项</span><br><span class="line">		-f	:	强制覆盖，如果目标文件已经存在，则不询问直接覆盖</span><br><span class="line">		-i	：	交互移动，如果目标文件已经存在，则询问用户是否覆盖(默认选项)</span><br><span class="line">		-v	：	显示详细信息</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令2-权限命令</title>
    <url>/2020/05/25/Linux%E5%91%BD%E4%BB%A42-%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="文件属性基础"><a href="#文件属性基础" class="headerlink" title="文件属性基础"></a>文件属性基础</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_0_10_centos /]# ls -l</span><br><span class="line">total 72</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Aug  8  2018 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Jan 24 20:19 boot</span><br><span class="line">drwxr-xr-x   2 root root  4096 Jan 21  2019 data</span><br><span class="line">drwxr-xr-x  19 root root  3000 Jan 17 10:11 dev</span><br></pre></td></tr></table></figure>

<p>第 1 位</p>
<p>-：    普通文件</p>
<p>b：    块设备文件。这是一种特殊设备文件，存储设备都是这种文件，如分区文件/dev/sdal</p>
<p>c:    字符设备文件。也是特殊设备文件，输入设备一般都是这种文件，如 鼠标、键盘</p>
<p>d:    目录文件，</p>
<p>l:    软连接文件</p>
<p>p：    管道文件，非常少见的特殊设备文件</p>
<p>s：    套接字文件 </p>
<p>权限</p>
<ul>
<li>   r：    读取    数字权限：4</li>
</ul>
<ul>
<li>   w：    写    数字权限：2</li>
</ul>
<ul>
<li>   x：    执行    数字权限：1</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="chmod-修改权限命令"><a href="#chmod-修改权限命令" class="headerlink" title="chmod 修改权限命令"></a>chmod 修改权限命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改权限命令</span></span><br><span class="line">chmod 	[选项]		权限模式		文件名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	-R :	递归设置权限，也就是给子目录中的所有文件设置权限</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户身份</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">   -	u	：	代表所有者User</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">   -	g	：	代表所属组Group</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">   -	o	：	代表其他人Other</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">   -	a	：	代表全部身份All</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 赋予方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	-	+	：	加入权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	-	-	：	减少权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	-	=	：	设置权限</span></span><br><span class="line"><span class="meta">	</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">chmod 	-R		u+r,o-x		123</span><br><span class="line">chmod 	-R		u=rwx,o=rx		123</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="chown-修改文件的-所属者-和-所属组-命令"><a href="#chown-修改文件的-所属者-和-所属组-命令" class="headerlink" title="chown 修改文件的 所属者 和 所属组 命令"></a>chown 修改文件的 所属者 和 所属组 命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown 	[选项]		所属者：所属组		文件名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">chowm	user1		bcd</span><br><span class="line">chowm	root:root		bcd</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="chgrp-修改文件的-所属组-命令"><a href="#chgrp-修改文件的-所属组-命令" class="headerlink" title="chgrp 修改文件的 所属组 命令"></a>chgrp 修改文件的 所属组 命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chgrp 	[选项]		所属者：所属组		文件名</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令3-搜索命令</title>
    <url>/2020/05/25/Linux%E5%91%BD%E4%BB%A43-%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="搜索-“命令”"><a href="#搜索-“命令”" class="headerlink" title="搜索  “命令”"></a>搜索  “命令”</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis</span><br><span class="line">	搜索	“系统命令”	的命令</span><br><span class="line">	[root@localhost /]#	whereis 	命令</span><br><span class="line">	</span><br><span class="line">	案例</span><br><span class="line">	[root@localhost /]#	whereis	ls</span><br><span class="line">	</span><br><span class="line">which</span><br><span class="line">	也是搜索	“系统命令”	的命令</span><br><span class="line">	同 whereis区别：</span><br><span class="line">		whereis	命令可以在查找  “命令“  的同时，查找帮助文档的位置</span><br><span class="line">		which		查找命令的同时，如果这个命令有  别名  还可以找到别名命令</span><br><span class="line">	[root@localhost /]#	which 	命令</span><br><span class="line">	</span><br><span class="line">	案例</span><br><span class="line">	[root@localhost /]#	which	ls	</span><br><span class="line">	</span><br><span class="line">locate</span><br><span class="line">	按照文件名搜索普通文件命令</span><br><span class="line">	优点：按照数据库搜索，速度快，消耗资源小</span><br><span class="line">	[root@localhost /]#vi /etc/updatedb.conf</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	案例</span><br><span class="line">	[root@localhost /]#	which	ls	</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="检索文件命令"><a href="#检索文件命令" class="headerlink" title="检索文件命令"></a>检索文件命令</h4><ul>
<li><p><strong>find</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在目录中搜索文件</span><br><span class="line"></span><br><span class="line">一、按照文件名搜索</span><br><span class="line">[root@localhost /]#	find 	搜索路径	[选项]		搜索内容</span><br><span class="line">	选项</span><br><span class="line">		-name	：	按照文件名搜索</span><br><span class="line">		-iname	：	按照文件名搜索，不区分文件大小写</span><br><span class="line">		-inum		：	按照 inode 搜索</span><br><span class="line"></span><br><span class="line">案例</span><br><span class="line">[root@localhost /]#	find	.	-name	abc</span><br><span class="line">[root@localhost /]#	find	/root	-name	abc</span><br><span class="line">[root@localhost /]#	find	/root	-name	a*c 		正则匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、按照文件大小搜索</span><br><span class="line">[root@localhost /]#	find 	搜索路径	[选项]		搜索内容</span><br><span class="line">	选项</span><br><span class="line">		-size	[+|-]大小	：	按照文件大小搜索文件</span><br><span class="line"></span><br><span class="line">案例</span><br><span class="line">[root@localhost /]#	find	.	-size	20</span><br><span class="line">[root@localhost /]#	find	/root	+size	20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三、按照修改时间搜索</span><br><span class="line">[root@localhost /]#	find 	搜索路径	[选项]		搜索内容</span><br><span class="line">	选项</span><br><span class="line">		-atime	[+|-]	时间   ：	按照文件访问时间搜索</span><br><span class="line">		-mtime	[+|-]	时间   ：	按照文件数据修改时间搜索</span><br><span class="line">		-ctime	[+|-]	时间   ：	按照文件状态修改时间搜索</span><br><span class="line"></span><br><span class="line">四、按照文件类型搜索</span><br><span class="line">[root@localhost /]#	find 	搜索路径	[选项]		搜索内容</span><br><span class="line">	选项</span><br><span class="line">		-type	d 	：	查找目录</span><br><span class="line">		-type	f 	：	查找文件</span><br><span class="line">		-type	l 	：	查找软连接文件</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p><strong>grep</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在文件中搜索符合条件的字符串</span><br><span class="line"></span><br><span class="line">[root@localhost /]#	grep 	[选项]		“搜索内容”		文件名</span><br><span class="line">	选项</span><br><span class="line">		-i	：	忽略大小写</span><br><span class="line">		-n	：	输出行号</span><br><span class="line">		-v		：	反向查找</span><br><span class="line">		--color = auto ：搜索出关键字用颜色显示</span><br><span class="line">	</span><br><span class="line">案例</span><br><span class="line">[root@localhost /]#	grep 		-i	update 	/etc/acpi   </span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令5-其余命令</title>
    <url>/2020/07/05/Linux%E5%91%BD%E4%BB%A45-%E5%85%B6%E4%BD%99%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h4><ul>
<li><p>查看网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure></li>
<li><p>重启网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></li>
<li><p>网络探测</p>
</li>
<li><p>```shell<br>ping [选项] IP<br>选项<br>  -b    ：    后面加入广播地址，用于整个网段进行检测<br>  -c    次数：用于指定ping 次数<br>  -s    字节：指定探测包大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 向其他用户发送信息 : write</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>write root desc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 给所有用户发送信息 : wall</span><br><span class="line"></span><br><span class="line">  ```shell</span><br><span class="line">  wall desc</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<span id="more"></span>

<h4 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h4><ul>
<li><p>查看防火墙状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></li>
<li><p>停止/关闭 防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li>
<li><p>查看防火墙所有开放的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></li>
<li><p>禁止防火墙开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li>
<li><p>刷新防火墙设置，使更新立即生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload   # 配置立即生效</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="端口命令"><a href="#端口命令" class="headerlink" title="端口命令"></a>端口命令</h4><ul>
<li><p>开放/关闭 端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开放5672端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭5672端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=5672/tcp --permanent  </span><br></pre></td></tr></table></figure></li>
<li><p>查看监听的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools</span></span><br><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure></li>
<li><p>检查端口被哪个进程占用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnpt |grep 5672</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="进程命令"><a href="#进程命令" class="headerlink" title="进程命令"></a>进程命令</h4><ul>
<li><p>进程查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps PID</span><br><span class="line">-ps -ef|grep tomcat</span><br><span class="line">-ps -ef|grep nginx</span><br></pre></td></tr></table></figure></li>
<li><p>杀进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="配置-sudo-赋予某些用户对某些命令的执行权限"><a href="#配置-sudo-赋予某些用户对某些命令的执行权限" class="headerlink" title="配置 sudo 赋予某些用户对某些命令的执行权限"></a>配置 sudo 赋予某些用户对某些命令的执行权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步</span></span><br><span class="line">rpm -qa|grep –i sudo查看是否安装sudo包</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例一</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步 vi /etc/sudoers添加下面一行配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hsxyz QD-254.45=(ALL)NOPASSWD: /sbin/iptables,/sbin/ethtool</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hsxyz普通用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> QD-254.45代表主机名；ALL代表所有主机，否则以hostname命名仅指在本机上具有该sudo权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (ALL)指该普通用户可以以所有用户的权限来执行命令，可以填其他用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOPASSWD: 使sudo执行命令时不再需要密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /sbin/iptables 具体命令，多个以逗号间隔</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例二</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给jenkins 用户 <span class="built_in">kill</span> 命令配置管理员权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一个权限位置 whereis <span class="built_in">kill</span></span></span><br><span class="line">jenkins ALL=(ALL)NOPASSWD:/usr/bin/kill</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令6-crontab</title>
    <url>/2020/07/13/Linux%E5%91%BD%E4%BB%A46-crontab/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>用于设置周期性被执行的命令。该命令从标准输入设备读取命令，并将其存放于 <code>crontab</code> 文件中，以供之后读取和执行。crontab 储存的指令被守护进程激活，cron常常在后台运行，每一分钟检查是否有预订的作业要执行。这类作业一般称为 cron jobs。</p>
<hr>
<h4 id="crontab-基础命令"><a href="#crontab-基础命令" class="headerlink" title="crontab 基础命令"></a>crontab 基础命令</h4><ul>
<li><p>服务状态查看</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">service crond staus</span><br></pre></td></tr></table></figure></li>
<li><p>开启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></table></figure></li>
<li><p>关闭服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond stop</span><br></pre></td></tr></table></figure></li>
<li><p>重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure></li>
<li><p>重新载入配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond reload</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<span id="more"></span>

<h4 id="crontab-格式说明"><a href="#crontab-格式说明" class="headerlink" title="crontab 格式说明"></a>crontab 格式说明</h4><p><strong>格式为 :</strong>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>解释</th>
<th>minute</th>
<th>hour</th>
<th>day of mouth</th>
<th>mouth of year</th>
<th>day of week</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>含义</td>
<td>每个小时的第几分钟执行该任务</td>
<td>每天的第几个小时执行该任务</td>
<td>每月的第几天执行该任务</td>
<td>每年的第几个月执行该任务</td>
<td>每周的第几天执行该任务</td>
</tr>
<tr>
<td>取值范围</td>
<td>0~59</td>
<td>0~23</td>
<td>1~31</td>
<td>1~12</td>
<td>0~6(0表示周天)</td>
</tr>
</tbody></table>
<p><strong>cron 示例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5 * * * * Command                          	每小时的第5分钟执行一次命令</span><br><span class="line">30 18 * * * Command                     	指定每天下午的 6:30 执行一次命令 </span><br><span class="line">30 7 8 * * Command                      	指定每月8号的7：30分执行一次命令 </span><br><span class="line">30 5 8 6 * Command                     		指定每年的6月8日5：30执行一次命令 </span><br><span class="line">30 6 * * 0 Command                      	指定每星期日的6:30执行一次命令</span><br><span class="line">每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </span><br><span class="line">5，15，25，35，45，55 16，17，18 * * * Command</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="开始创建一个定时任务"><a href="#开始创建一个定时任务" class="headerlink" title="开始创建一个定时任务"></a>开始创建一个定时任务</h4><p><strong>crontab -e  编辑某个用户的cron服务</strong></p>
<p><strong>crontab -l 列出某个用户cron服务的详细内容</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 2 * * * /bin/bash  /root/test.sh</span><br></pre></td></tr></table></figure>

<p><strong>crontab -r 删除某个用户的cron服务(慎用)</strong></p>
<hr>
<h4 id="查看任务执行情况"><a href="#查看任务执行情况" class="headerlink" title="查看任务执行情况"></a>查看任务执行情况</h4><p><strong>username:用户</strong></p>
<p><strong>在/var/spool/mail/{username}   中可以查看最近的crontab的执行情况</strong></p>
<hr>
<h4 id="定时任务备份恢复"><a href="#定时任务备份恢复" class="headerlink" title="定时任务备份恢复"></a>定时任务备份恢复</h4><p><strong>如果使用crontab -r 误删了定时任务  在/var/spool/cron下有定时任务的备份.可以通过该cron找回</strong></p>
<p>**如果没有权限 的话   su - + root.password    在root用户下 进行查看</p>
]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令4-压缩和解压</title>
    <url>/2020/05/25/Linux%E5%91%BD%E4%BB%A44-%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</url>
    <content><![CDATA[<h4 id="zip-格式"><a href="#zip-格式" class="headerlink" title=".zip 格式"></a>.zip 格式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">压缩命令 zip</span><br><span class="line">[root@localhost /]# zip  [选项]      压缩包名 源文件/源目录</span><br><span class="line">     选项</span><br><span class="line">          -r   ：    压缩目录</span><br><span class="line">          </span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# zip  test.zip  abcd      bcda</span><br><span class="line"></span><br><span class="line">解压命令 unzip</span><br><span class="line">[root@localhost /]# unzip     [选项]      压缩包名</span><br><span class="line">     选项</span><br><span class="line">          -d   ：    指定解压位置</span><br><span class="line">          </span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# unzip     -d /tmp   test.zip</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="gz-格式"><a href="#gz-格式" class="headerlink" title=".gz 格式"></a>.gz 格式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">压缩命令 gzip</span><br><span class="line">[root@localhost /]# gzip      [选项]      源文件</span><br><span class="line">     选项</span><br><span class="line">          -c   ：    将压缩数据输出到标准输出中，可以用于保留源文件</span><br><span class="line">          -d   ：    解压缩</span><br><span class="line">          -r   ：    压缩目录 </span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# gzip      -c   abcd &gt; bcda.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解压命令 gzip/gunzip</span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# gzip      -c   cda.gz</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="bz2-格式-不能压缩目录"><a href="#bz2-格式-不能压缩目录" class="headerlink" title=".bz2 格式    不能压缩目录"></a>.bz2 格式    不能压缩目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">算法更先进，压缩比更高</span><br><span class="line">压缩命令 bzip2</span><br><span class="line">[root@localhost /]# bzip2     [选项]      源文件</span><br><span class="line">     选项</span><br><span class="line">          -d   ：    解压缩</span><br><span class="line">          -k   ：    压缩时，保留源文件</span><br><span class="line">          -v   ：    显示压缩详细信息</span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# bzip2 abcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解压命令 bzip2/bunzip2</span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# gzip      -c   cda.gz</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="tar-格式-用于打包-不会压缩"><a href="#tar-格式-用于打包-不会压缩" class="headerlink" title=".tar 格式    用于打包 不会压缩"></a>.tar 格式    用于打包 不会压缩</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">压缩命令 tar</span><br><span class="line">[root@localhost /]# tar  [选项]      [-f 压缩包名]      源文件或目录</span><br><span class="line">     选项</span><br><span class="line">          -c   ：    打包</span><br><span class="line">          -f   ：    指定压缩包文件夹，压缩包的拓展名是用来给管理员识别格式的，所以一定要正确指明拓展名</span><br><span class="line">          -v   ：    显示打包过程</span><br><span class="line">     案例</span><br><span class="line">          [root@localhost /]# tar       -cvf  abcd.tar abcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解压命令 tar</span><br><span class="line">     root@localhost /]#  tar  [选项]      压缩包 </span><br><span class="line">          选项</span><br><span class="line">               -x   ：    解打包</span><br><span class="line">               -f   ：    指定压缩包文件名</span><br><span class="line">               -v   ：    显示解打包过程</span><br><span class="line">               -t   ：    测试，不解打包，只是查看有哪些文件</span><br><span class="line">               -C   ：    目录：指定解打包位置</span><br><span class="line">          案例</span><br><span class="line">               [root@localhost /]# tar       -xvf  abcd.tar</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="tar-gz-和-tar-bz2-格式"><a href="#tar-gz-和-tar-bz2-格式" class="headerlink" title=".tar.gz 和 .tar.bz2 格式"></a>.tar.gz 和 .tar.bz2 格式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# tar  [选项]      压缩包  源文件或目录</span><br><span class="line">选项</span><br><span class="line">     -z   ：    压缩和解压缩“.tar.gz”格式</span><br><span class="line">     -j   :    压缩和解压缩“.tar.bz2”格式</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">案例：.tar.gz 格式</span><br><span class="line">     #把 /tmp   打包压缩成     .tar.gz   格式                  </span><br><span class="line">     [root@localhost /]# tar  -zcvf     tmp.tar.gz     /tmp</span><br><span class="line">     #解压</span><br><span class="line">     [root@localhost /]# tar  -zxvf     tmp.tar.gz</span><br><span class="line">     </span><br><span class="line">案例：.tar.bz2 格式</span><br><span class="line">     #把 /tmp   打包压缩成     .tar.gz   格式                  </span><br><span class="line">     [root@localhost /]# tar  -jcvf     tmp.tar.bz2    /tmp</span><br><span class="line">     #解压</span><br><span class="line">     [root@localhost /]# tar  -jxvf     tmp.tar.bz2    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令7_jdk命令</title>
    <url>/2020/07/26/Linux%E5%91%BD%E4%BB%A47-jdk%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="Linux-Jdk命令shell"><a href="#Linux-Jdk命令shell" class="headerlink" title="Linux-Jdk命令shell"></a>Linux-Jdk命令shell</h4><p><strong>致敬龙哥付出，拷贝以备不时之需</strong></p>
<p><em>Linux 环境操作 jar</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">APP_NAME=/home/workspace/xxx.jar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用说明，用来提示输入参数</span></span><br><span class="line">usage() &#123;</span><br><span class="line">echo &quot;Usage: sh 执行脚本.sh [start|stop|restart|status]&quot;</span><br><span class="line">exit 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">检查程序是否在运行</span></span><br><span class="line">is_exist()&#123;</span><br><span class="line">pid=`ps -ef|grep $APP_NAME|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27; `</span><br><span class="line"><span class="meta">#</span><span class="bash">如果不存在返回1，存在返回0</span></span><br><span class="line">if [ -z &quot;$&#123;pid&#125;&quot; ]; then</span><br><span class="line">return 1</span><br><span class="line">else</span><br><span class="line">return 0</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动方法</span></span><br><span class="line">start()&#123;</span><br><span class="line">is_exist</span><br><span class="line">if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is already running. pid=$&#123;pid&#125; .&quot;</span><br><span class="line">else</span><br><span class="line">nohup /usr/local/src/jdk1.8.0_251/bin/java -Dfile.encoding=utf-8 -jar $APP_NAME --spring.profiles.active=test --server.port=8099  &gt;&gt; /home/workspace/logs/xxx.log 2&gt;&amp;1 &amp;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">停止方法</span></span><br><span class="line">stop()&#123;</span><br><span class="line">is_exist</span><br><span class="line">if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line">kill -9 $pid</span><br><span class="line">else</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is not running&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输出运行状态</span></span><br><span class="line">status()&#123;</span><br><span class="line">is_exist</span><br><span class="line">if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is running. Pid is $&#123;pid&#125;&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is NOT running.&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">restart()&#123;</span><br><span class="line">stop</span><br><span class="line">start</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">根据输入参数，选择执行对应方法，不输入则执行使用说明</span></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">status</span><br><span class="line">;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">restart</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">usage</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux-jdk命令shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令7_supervisorctl命令</title>
    <url>/2020/07/26/Linux%E5%91%BD%E4%BB%A47-supervisorctl%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="Supervisorctl命令"><a href="#Supervisorctl命令" class="headerlink" title="Supervisorctl命令"></a>Supervisorctl命令</h4><p>Supervisor 是用Python开发的一套通用的进程管理程序</p>
<hr>
<h4 id="Supervisorctl常用命令"><a href="#Supervisorctl常用命令" class="headerlink" title="Supervisorctl常用命令"></a>Supervisorctl常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum 安装</span></span><br><span class="line">yum install -y supervisor</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 supervisorctl 版本</span></span><br><span class="line">supervisorctl -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机自启</span></span><br><span class="line">systemctl enable supervisord</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 supervisord</span></span><br><span class="line">systemctl start supervisord</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止 supervisord</span></span><br><span class="line">systemctl stop supervisord</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 supervisord 运行状态</span></span><br><span class="line">systemctl status supervisord</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化 supervisord 配置文件地址</span></span><br><span class="line">/etc/supervisord.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启 supervisord 配置的进程</span></span><br><span class="line">supervisorctl start jar_test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止 supervisord 配置的进程</span></span><br><span class="line">supervisorctl stop jar_test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 supervisord 配置进程日志命令</span></span><br><span class="line">supervisorctl tail -f jar_test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件执行两条命令</span></span><br><span class="line">supervisorctl reread</span><br><span class="line">supervisorctl upadte</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="使用示例一（执行shell脚本）"><a href="#使用示例一（执行shell脚本）" class="headerlink" title="使用示例一（执行shell脚本）"></a>使用示例一（执行shell脚本）</h4><h5 id="shell脚本如下"><a href="#shell脚本如下" class="headerlink" title="shell脚本如下"></a>shell脚本如下</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">shell脚本文件名称 echo_time.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/bin/bash</span></span><br><span class="line">while true; do</span><br><span class="line">   echo `date +%Y-%m-%d,%H:%m%s`</span><br><span class="line">   sleep 2</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h5 id="配置进程文件"><a href="#配置进程文件" class="headerlink" title="配置进程文件"></a>配置进程文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进程文件名称 echo_time.ini</span></span><br><span class="line">[program:echo_time]</span><br><span class="line">command=sh /etc/supervisord.d/echo_time.sh  ;执行命令</span><br><span class="line">priority=999                ; the relative start priority (default 999)</span><br><span class="line">autostart=true              ; start at supervisord start (default: true)</span><br><span class="line">autorestart=true            ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs=10                ; number of secs prog must stay running (def. 10)</span><br><span class="line">startretries=3              ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes=0,2               ; &#x27;expected&#x27; exit codes for process (default 0,2)</span><br><span class="line">stopsignal=QUIT             ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs=10             ; max num secs to wait before SIGKILL (default 10)</span><br><span class="line">user=root                 ; setuid to this UNIX account to run the program</span><br><span class="line">log_stdout=true</span><br><span class="line">log_stderr=true             ; if true, log program stderr (def false)</span><br><span class="line">logfile=/etc/supervisord.d/echo_time.log   ; # 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=1MB        ; # 日志文件大小 (默认 50MB)</span><br><span class="line">logfile_backups=10          ; # 日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups=20     ; stdout 日志文件备份数</span><br><span class="line">stdout_logfile=/etc/supervisord.d/echo_time.stdout.log</span><br><span class="line">[root@VM-0-11-centos supervisord.d]#</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="执行jar进行文件配置"><a href="#执行jar进行文件配置" class="headerlink" title="执行jar进行文件配置"></a>执行jar进行文件配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[program:jar_test]</span><br><span class="line">environment=JAVA_HOME=/usr/java/default</span><br><span class="line">directory=/project</span><br><span class="line">command=/usr/java/default/bin/java -jar -Xms512m -Xmx1024m -XX:PermSize=256M -XX:MaxPermSize=1024m jar_test.jar --spring.profiles.active=sit</span><br><span class="line"></span><br><span class="line">user=root</span><br><span class="line">stopsignal=INT</span><br><span class="line">autostart=1</span><br><span class="line">autorestart=1</span><br><span class="line">startsecs=5</span><br><span class="line">startretries=3</span><br><span class="line"></span><br><span class="line">stdout_logfile_maxbytes = 200MB</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile=/project/out.logs/out.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux-运维</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-SQL语句优化基础</title>
    <url>/2020/04/19/MySQL-SQL%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="针对SQL语句维护，运行的命令以及命令详解"><a href="#针对SQL语句维护，运行的命令以及命令详解" class="headerlink" title="针对SQL语句维护，运行的命令以及命令详解"></a>针对SQL语句维护，运行的命令以及命令详解</h2><p>####显示当前session中所有的统计参数（对于所有存储引擎的表操作都会有累计），常关心的几个参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Com_%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">上面输出参数比较常用的了解一下：</span><br><span class="line">Com_select:  执行<span class="keyword">select</span>次数，一次查询只累加<span class="number">1</span></span><br><span class="line">Com_insert:  执行<span class="keyword">insert</span>次数，对于批量插入，只累计<span class="number">1</span></span><br><span class="line">Com_update:  执行update次数，执行update次数</span><br><span class="line">Com_delete:  执行<span class="keyword">delete</span>次数，执行<span class="keyword">delete</span>次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">只针对InnoDB存储引擎</span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Innodb_rows_%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">上面输出参数比较常用的了解一下：</span><br><span class="line">Innodb_row_read：         <span class="keyword">SELECT</span>查询返回行数</span><br><span class="line">Innodb_row_inserted：     执行<span class="keyword">INSERT</span>操作插入行数</span><br><span class="line">Innodb_row_updated：      执行UPDATE操作更新行数</span><br><span class="line">Innodb_row_deleted：      执行<span class="keyword">DELETE</span>操作删除行数</span><br><span class="line"></span><br><span class="line">试图连接Mysql服务器次数</span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Connections&#x27;</span>;</span><br><span class="line"></span><br><span class="line">服务器工作时间</span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Uptime&#x27;</span>;</span><br><span class="line"></span><br><span class="line">慢查询次数</span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Slow_queries&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<p>####通过explain和desc来查看执行计划</p>
<p>explain/desc   query_statement(SQL语句)</p>
<p>对执行计划的每个列进行说明<br>一、select_type:表示SELECT的类型，常见取值有<br>(1)、SIMPLE(简单表，即不使用表连接或者子查询)，<br>(2)、PARMARY(主查询，即外层查询),<br>(3)、UNION(UNION中的第二个或者后面的查询语句),<br>(4)、SUBQUERY(子查询第一个SELECT)。<br>(5)、DERIVED（派生表 From 里面的子查询）</p>
<p>二、table:输出表结果</p>
<p>三、type：表示在MYSQL在表中找到所需行的方式，或者叫访问类型，以下类型是从左到右，性能由最差变最好<br>all-&gt;index-&gt;range-&gt;ref-&gt;eq_ref-&gt;const,system-&gt;null<br>(1)type=all :全表扫描，MYSQL遍历全表来找来匹配行<br>(2)type=index :搜索全扫描，MYSQL遍历整个索引来查询匹配行<br>(3)type=range :索引扫描范围，常见于&lt;、&lt;=、&gt;、&gt;=等操作<br>(4)type=ref :使用非唯一索引扫描或唯一索引的前缀扫描，返回匹配某个单独值的记录行（ref经常出现在join中）<br>(5)type=eq_ref :使用唯一索引，对于每个检索值，表中只有一条记录匹配。（多表关联中使用primary key 或者unique index 为关联条件）<br>(6)type=const/system ：单表中最多有一个匹配行，查询起来非常速度，所以这个匹配行中的其他列的值可以被优化器在当前查询中当做常量<br>来处理，例如，根据主键primary key 或 唯一索引 unique index 进行查询。<br>(7)type=null :MYSQL不用访问表或者索引，直接就能够得到结果，例如，select 1 from dual where 1</p>
<p>四、possible_keys:表示查询时可能用到的索引<br>五、key:表示实际使用的索引<br>六、key_len：使用到索引字段长度<br>七、rows：扫描行的数量<br>八、Extra：执行情况的说明和描述，包含不适合在其他列中显示但对执行计划非常重要的额外信息。</p>
<p>#####使用 explain extended  命令加上  show warnings，我们能够看到SQL真正执行之前优化器做了哪些处理。可以查看到经过优化后的sql语句</p>
<p>案例：</p>
<p>EXPLAIN EXTENDED<br>select DISTINCT c.Tag<br>from be_Blogs a <br>join be_Posts b on a.BlogId = b.BlogID<br>join be_PostTag c on c.BlogID = b.BlogID;<br>SHOW WARNINGS</p>
<p>#####explain partitions 查看sql所访问的分区<br>EXPLAIN PARTITIONS<br>select DISTINCT c.Tag<br>from be_Blogs a <br>join be_Posts b on a.BlogId = b.BlogID<br>join be_PostTag c on c.BlogID = b.BlogID;</p>
<p><strong>查看是否支持show profiles</strong></p>
<p>select @@have_profiling;</p>
<p><strong>设置profiles开启</strong></p>
<p>set profiling = 1;</p>
<p><strong>可以通过 show profiles 查看当前SQL的 QueryID 值为多少</strong></p>
<p>select DISTINCT c.Tag<br>from be_Blogs a <br>join be_Posts b on a.BlogId = b.BlogID<br>join be_PostTag c on c.BlogID = b.BlogID;<br>show profiles</p>
<p><strong>查看执行过程中线程每个状态和消耗时间</strong></p>
<p>show profile for query QueryID（通过show profile 查询出来的QueryID）;</p>
<p><strong>选择查看CPU耗费时间</strong></p>
<p>show profile cpu for query QueryID;</p>
<p><strong>查看SQL解析执行过程中每个步骤对应的源码的文件、函数名以及具体的源文件行数。</strong></p>
<p>show profile source for query 140; </p>
<hr>
<h4 id="Mysql-锁信息查询语句"><a href="#Mysql-锁信息查询语句" class="headerlink" title="Mysql 锁信息查询语句"></a>Mysql 锁信息查询语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出一个字符串文本，可以额外研究，内含信息量的信息，对数据库整体运行情况，对高性能调优很有帮助</span><br><span class="line">show engine innodb status</span><br><span class="line"></span><br><span class="line">现在获取的锁，但是不含没有获取的锁，而且只是针对INNODB的。</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; </span><br><span class="line"></span><br><span class="line">包含了所有正在执行的的事物相关信息（INNODB），而且包含了事物是否被阻塞或者请求锁。</span><br><span class="line">select * from information_schema.innodb_trx;</span><br><span class="line"></span><br><span class="line">系统锁等待相关信息，包含了阻塞的一行或者多行的记录，而且还有锁请求和被阻塞改请求的锁信息等。</span><br><span class="line">select * from information_schema.INNODB_LOCK_WAITS;</span><br><span class="line"></span><br><span class="line">查看正在被锁定的的表</span><br><span class="line">show OPEN TABLES where In_use &gt; 0;</span><br></pre></td></tr></table></figure>

<h5 id><a href="#" class="headerlink" title></a></h5>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL MySQL高级</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-死锁问题定位</title>
    <url>/2020/05/25/MySQL-%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h4 id="MySQL-死锁问题定位"><a href="#MySQL-死锁问题定位" class="headerlink" title="MySQL-死锁问题定位"></a>MySQL-死锁问题定位</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#输出进程</span><br><span class="line"><span class="keyword">show</span> processlist;</span><br><span class="line"></span><br><span class="line">#输出一个字符串文本，可以额外研究，内含信息量的信息，对数据库整体运行情况，对高性能调优很有帮助</span><br><span class="line">#<span class="keyword">show</span> engine innodb status</span><br><span class="line"></span><br><span class="line">#正在锁的事务。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_LOCKS; </span><br><span class="line"></span><br><span class="line">#正在执行的事务。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_trx;</span><br><span class="line"></span><br><span class="line">#等待锁的事务。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.INNODB_LOCK_WAITS;</span><br><span class="line"></span><br><span class="line">#多少线程在使用表。</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#查看慢查询语句</span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Slow_queries&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="死锁详情输出"><a href="#死锁详情输出" class="headerlink" title="死锁详情输出"></a>死锁详情输出</h4><p>对于MySQL来说，在information_schema 架构下添加了表 <strong>innodb_trx</strong>、<strong>innodb_locks</strong>、<strong>innodb_lock_waits</strong> 三张表。通过这三张表我们可以简单的监控当前事务并分析可能存在的锁，</p>
<p>下面我们对这三张表进行解析：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">INNODB_TRX</span><br><span class="line">字段名称                                                               说明</span><br><span class="line">trx_id                            innodb 存储引擎内部唯一的事务ID </span><br><span class="line">trx_state                       当前事务的状态</span><br><span class="line">trx_started                    事务的开始时间</span><br><span class="line">trx_requested_lock_id   等待事务的锁ID。如trx_state 的状态为LOCK WAIT ，那么该值代表当前的事务等待之前事务占用锁资源的ID。 若trx_state 不事LOCK WAIT ,则该指为空。</span><br><span class="line">trx_wait_started            事务等待开始的事件</span><br><span class="line">trx_weight                    事务的权重，反映了一个事务修改和锁住的行数，在Innodb 存储引擎中，当发生死锁需要回滚时，Innodb 存储引擎会选择一个权重最小的值进行回滚。</span><br><span class="line">trx_mysql_thread_id      MySQL中的线程ID，<span class="keyword">SHOW</span> PROCESSLIST 显示的结果</span><br><span class="line">trx_query                      事务运行的<span class="keyword">SQL</span> 语句</span><br><span class="line"></span><br><span class="line">INNODB_LOCKS的结构</span><br><span class="line">lock_id        锁的ID</span><br><span class="line">lock_trx_id   事务的ID</span><br><span class="line">lock_mode   锁的模式</span><br><span class="line">lock_type     锁的类型，表锁还事行锁</span><br><span class="line">lock_table     要加锁的表</span><br><span class="line">lock_index    锁住的索引</span><br><span class="line">lock_space    锁对象的space id</span><br><span class="line">lock_page      事务锁定页的数量，若是表锁，则该值为<span class="keyword">null</span></span><br><span class="line">lock_rec          事务锁定行的数量，若是表锁，则该指为<span class="keyword">null</span></span><br><span class="line">lock_data        事务锁定记录的主键值，若是表锁，则该值为<span class="keyword">null</span> </span><br><span class="line"></span><br><span class="line">INNODB_LOCK_WAITS</span><br><span class="line">字段                                        说明</span><br><span class="line">requesting_trx_id                     申请锁资源的事务ID</span><br><span class="line">requesting_lock_id                   申请的锁的ID</span><br><span class="line">blocking_trx_id                        阻塞的事务ID</span><br><span class="line">blocking_trx_id                        阻塞的锁的ID</span><br></pre></td></tr></table></figure>

<h5 id="三张表关联进行锁输出"><a href="#三张表关联进行锁输出" class="headerlink" title="三张表关联进行锁输出"></a>三张表关联进行锁输出</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  r.trx_id waiting_trx_id,								#等待线程编号（主键）</span><br><span class="line">  r.trx_mysql_thread_id waiting_thread,		#MySQL中的线程ID，<span class="keyword">SHOW</span> PROCESSLIST 显示的结果</span><br><span class="line">  r.trx_query waiting_query,							#事务运行的<span class="keyword">SQL</span> 语句</span><br><span class="line">  b.trx_id blocking_trx_id,								#阻塞线程编号（主键）</span><br><span class="line">  b.trx_mysql_thread_id blocking_thread,	#阻塞MySQL中的线程ID，<span class="keyword">SHOW</span> PROCESSLIST 显示的结果</span><br><span class="line">  b.trx_query blocking_query 							#阻塞运行的<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  information_schema.innodb_lock_waits w </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> information_schema.innodb_trx b <span class="keyword">ON</span> b.trx_id <span class="operator">=</span> w.blocking_trx_id </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> information_schema.innodb_trx r <span class="keyword">ON</span> r.trx_id <span class="operator">=</span> w.requesting_trx_id ;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> blocking_trx_id；</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL MySQL高级</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储过程3种循环</title>
    <url>/2020/03/22/MySQL%E4%B8%89%E7%A7%8D%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h4 id="WHILE-循环"><a href="#WHILE-循环" class="headerlink" title="WHILE 循环"></a>WHILE 循环</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE 循环结束条件  DO</span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">END</span> WHILE</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="REPEAT-循环"><a href="#REPEAT-循环" class="headerlink" title="REPEAT 循环"></a>REPEAT 循环</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">	循环体</span><br><span class="line">	UNTIL 判断条件    <span class="operator">/</span><span class="operator">/</span>注意判断条件后面不加“；”</span><br><span class="line"><span class="keyword">END</span> REPEAT</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">test_name：LOOP</span><br><span class="line">	循环体</span><br><span class="line">	IF 判断条件 <span class="keyword">THEN</span></span><br><span class="line">	LEAVE test_name；</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	#WHILE循环</span><br><span class="line">	WHILE i <span class="operator">&lt;</span> <span class="number">5</span> DO</span><br><span class="line">    	<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> <span class="number">0</span>; #重置变量</span><br><span class="line">    </span><br><span class="line">   	#REPEAT</span><br><span class="line">   	REPEAT</span><br><span class="line">   		<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>; </span><br><span class="line">   		UNTIL i <span class="operator">&gt;=</span> <span class="number">5</span></span><br><span class="line">   	<span class="keyword">END</span> REPEAT</span><br><span class="line">   </span><br><span class="line">   	<span class="keyword">SET</span> i <span class="operator">=</span> <span class="number">0</span>; #重置变量</span><br><span class="line">   	</span><br><span class="line">   	#LOOP循环</span><br><span class="line">   	AA:LOOP</span><br><span class="line">   		IF i <span class="operator">&gt;</span> <span class="number">5</span> <span class="keyword">THEN</span> </span><br><span class="line">   			LEAVE AA;</span><br><span class="line">   		<span class="keyword">END</span> IF;</span><br><span class="line">   		<span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">   	<span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL军规</title>
    <url>/2020/03/23/MySQL%E5%86%9B%E8%A7%84/</url>
    <content><![CDATA[<h1 id="一、核心军规（5）"><a href="#一、核心军规（5）" class="headerlink" title="一、核心军规（5）"></a>一、核心军规（5）</h1><ol>
<li><h5 id="尽量不在数据库做运算"><a href="#尽量不在数据库做运算" class="headerlink" title="尽量不在数据库做运算"></a>尽量不在数据库做运算</h5><p>复杂运算移到程序段CPU</p>
<p>尽可能简单应用MySQL</p>
<p>举例：<del>md5() / Order by Rand()</del></p>
</li>
<li><h5 id="控制单表数据量"><a href="#控制单表数据量" class="headerlink" title="控制单表数据量"></a>控制单表数据量</h5><p>一年内的单表数据预估（纯 INT 不超 1000 W，含 CHAR 不超 500W）</p>
<p>合理分表不超载</p>
<p>单库不超过 300~400个表</p>
</li>
<li><h5 id="保持表身段苗条"><a href="#保持表身段苗条" class="headerlink" title="保持表身段苗条"></a>保持表身段苗条</h5><p>表字段数少而精</p>
<p>表字段数上线控制在20~50个</p>
<p>单行不超过200Byte（50个纯INT，20个CHAR(10)）</p>
</li>
<li><h5 id="平衡范式与冗余"><a href="#平衡范式与冗余" class="headerlink" title="平衡范式与冗余"></a>平衡范式与冗余</h5><p>适当时牺牲范式、加入冗余</p>
</li>
<li><h5 id="拒绝3B"><a href="#拒绝3B" class="headerlink" title="拒绝3B"></a>拒绝3B</h5><p>大事务（BIG Transcation）</p>
<p>大SQL（BIG SQL）</p>
<p>大批量（BIG Batch）</p>
</li>
</ol>
<span id="more"></span>

<h1 id="二、字段类军规（6）"><a href="#二、字段类军规（6）" class="headerlink" title="二、字段类军规（6）"></a>二、字段类军规（6）</h1><ol>
<li><h5 id="用好数值字段类型"><a href="#用好数值字段类型" class="headerlink" title="用好数值字段类型"></a>用好数值字段类型</h5><table>
<thead>
<tr>
<th>数值类型</th>
<th>字节</th>
</tr>
</thead>
<tbody><tr>
<td>tinyint</td>
<td>1</td>
</tr>
<tr>
<td>smallint</td>
<td>2</td>
</tr>
<tr>
<td>mediumint</td>
<td>3</td>
</tr>
<tr>
<td>int、integer</td>
<td>4</td>
</tr>
<tr>
<td>bigint</td>
<td>8</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
</tr>
</tbody></table>
<p>举例：</p>
<p>​    <del>int(1)、bigint auto_increment 、decimal(18,0)</del>    避免浪费存储空间</p>
</li>
<li><h5 id="将字符转化为数字"><a href="#将字符转化为数字" class="headerlink" title="将字符转化为数字"></a>将字符转化为数字</h5><p>数字型 比 字符串型索引(占用空间更小、查询更快)</p>
<p>举例：用无符号INT存储IP，而非CHAR(15)</p>
<p>​        当前很多应用都适用字符串char(15)来存储IP地址（占用16个字节），利用inet_aton()和inet_ntoa()函数，来存储IP地址效率很高，适用 int unsigned（无符号int） 就可以满足需求，不需要使用bigint，只需要4个字节，节省存储空间，同时效率也高很多。</p>
</li>
<li><h5 id="有限使用枚举ENUM-SET"><a href="#有限使用枚举ENUM-SET" class="headerlink" title="有限使用枚举ENUM/SET"></a>有限使用枚举ENUM/SET</h5><p>ENUM 占用一字节（底层的存储方式是以整型进行存储的，比如这样的字段sex enum(‘male’ , ‘female’ , ‘both’ , ‘unknow’)在查询时where sex=’male’和where sex=1是等效的）</p>
<p>缺点：1、数字类型的 ENUM 容易混淆。2、插入 ENUM 类型之外值报错，兼容性不强</p>
</li>
<li><h5 id="避免使用NULL字段"><a href="#避免使用NULL字段" class="headerlink" title="避免使用NULL字段"></a>避免使用NULL字段</h5><p>很难进行查询优化</p>
<p>NULL 列加索引，需要额外空间</p>
<p>含NULL符合索引无效</p>
<p>举例：</p>
<p>​    <del>a char(32) DEFAULT NULL</del></p>
<p>​    <del>b int(10) NOT NULL</del> </p>
<p>​    c int(10) NOT NULL DEFAULT 0</p>
</li>
<li><h5 id="少用并拆分TEXT-BLOB"><a href="#少用并拆分TEXT-BLOB" class="headerlink" title="少用并拆分TEXT/BLOB"></a>少用并拆分TEXT/BLOB</h5><p>浪费空间</p>
<p>若必须使用，拆分到单独表。</p>
</li>
<li><h5 id="不在数据库存图片"><a href="#不在数据库存图片" class="headerlink" title="不在数据库存图片"></a>不在数据库存图片</h5></li>
</ol>
<h1 id="三、索引类军规（5）"><a href="#三、索引类军规（5）" class="headerlink" title="三、索引类军规（5）"></a>三、索引类军规（5）</h1><ol>
<li><h5 id="谨慎合理添加索引"><a href="#谨慎合理添加索引" class="headerlink" title="谨慎合理添加索引"></a>谨慎合理添加索引</h5><p>改善查询</p>
<p>缓慢更新和插入（需要额外维护索引）</p>
<p>综合评估数据密度和数据分布（数据密度低于20%）</p>
</li>
<li><h5 id="字符字段必须建前缀索引"><a href="#字符字段必须建前缀索引" class="headerlink" title="字符字段必须建前缀索引"></a>字符字段必须建前缀索引</h5><p>区分度    </p>
<p>​    单字母：26</p>
<p>​    4字母区分度：26 * 26 * 26 * 26 = 456,976</p>
<p>​    5字母区分度：26 * 26 * 26 * 26 * 26 = 11,881,376</p>
<p>​    6字母区分度： 26 * 26 * 26 * 26 * 26 * 26=308,915,776</p>
<p>举例：</p>
<p>​        pinyin` varchar(100) DEFAULT NULL COMMENT ‘小区拼音’, </p>
<p>​        KEY <code>idx_pinyin</code> (<code>**pinyin</code>(8**)), </p>
<p>​        ) ENGINE=InnoDB </p>
</li>
<li><h5 id="不在索引列做运算"><a href="#不在索引列做运算" class="headerlink" title="不在索引列做运算"></a>不在索引列做运算</h5><p>BAD:<del>select * from table WHERE to_days(current_date) – to_days(date_col) &lt;= 10</del>  </p>
<p>GOOD: select * from table WHERE date_col &gt;= DATE_SUB(‘2011-10-22’,INTERVAL 10 DAY); </p>
</li>
<li><h5 id="自增列或全局ID做-innodb-主键"><a href="#自增列或全局ID做-innodb-主键" class="headerlink" title="自增列或全局ID做 innodb 主键"></a>自增列或全局ID做 innodb 主键</h5></li>
<li><h5 id="尽量不用外键"><a href="#尽量不用外键" class="headerlink" title="尽量不用外键"></a>尽量不用外键</h5><p>高并发容易死锁</p>
<p>有额外开销</p>
</li>
</ol>
<h1 id="四、SQL类军规"><a href="#四、SQL类军规" class="headerlink" title="四、SQL类军规"></a>四、SQL类军规</h1><ol>
<li><h5 id="sql语句尽可能简单"><a href="#sql语句尽可能简单" class="headerlink" title="sql语句尽可能简单"></a>sql语句尽可能简单</h5><p>拒绝大SQL，拆解成多条简单的SQL</p>
<p>简单SQL，拆解成多条简单SQL</p>
<p>减少锁表时间，用上多CPU</p>
</li>
<li><h5 id="保持事务（链接）短小"><a href="#保持事务（链接）短小" class="headerlink" title="保持事务（链接）短小"></a>保持事务（链接）短小</h5><p>保持事务/DB连接短小精悍</p>
<p>​        事务/连接使用原则：即开即用，用完即关</p>
<p>​        不事务无关操作放到事务外面, 减少锁资源的占用</p>
<p>​        不破坏一致性前提下，使用多个短事务代替长事务</p>
</li>
<li><h5 id="尽可能避免使用SP-TRIG-FUNC"><a href="#尽可能避免使用SP-TRIG-FUNC" class="headerlink" title="尽可能避免使用SP/TRIG/FUNC"></a><strong>尽可能避免使用SP/TRIG/FUNC</strong></h5><p>​    尽可能少使用存储过程、触发器、减少MySQL函数对结果进行处理</p>
</li>
<li><h5 id="尽量不用-SELECT"><a href="#尽量不用-SELECT" class="headerlink" title="尽量不用 SELECT *"></a>尽量不用 SELECT *</h5><p>​    更多消耗CPU、内存、IO、网络带宽</p>
<p>​    更安全的设计：减少表变化带来的影响</p>
<p>​    Select/JOIN减少硬盘临时表生成，特别是有TEXT/BLOB时</p>
</li>
<li><h5 id="改写-OR-为-IN"><a href="#改写-OR-为-IN" class="headerlink" title="改写 OR 为 IN()"></a>改写 OR 为 IN()</h5><p>​    OR效率：O(n)  。IN 效率：O(Log n)。当n很大时 OR 会慢很多</p>
<p>​    控制N的个数，建议 n 小于20</p>
</li>
<li><h5 id="改写OR-为-UNION"><a href="#改写OR-为-UNION" class="headerlink" title="改写OR 为 UNION"></a>改写OR 为 UNION</h5></li>
<li><h5 id="避免负向查询-和-前缀模糊查询"><a href="#避免负向查询-和-前缀模糊查询" class="headerlink" title="避免负向查询 和 % 前缀模糊查询"></a>避免负向查询 和 % 前缀模糊查询</h5><p>避免负向查询(NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT EXISTS、NOT IN、NOT LIKE等)</p>
<p>避免 % 前缀模糊查询</p>
<p>​        B+ Tree 使用不了索引，导致全表扫描</p>
</li>
<li><h5 id="减少-COUNT"><a href="#减少-COUNT" class="headerlink" title="减少 COUNT(*)"></a>减少 COUNT(*)</h5><p>COUNT(*)的资源开销大，尽量<del>不用</del>少用</p>
<p>计数统计</p>
<p>​    实时统计：用memcache，双向更新，凌晨跑基准</p>
<p>​    非实时统计：尽量用单独统计表，定期重算</p>
</li>
<li><h5 id="Limit-高效分页"><a href="#Limit-高效分页" class="headerlink" title="Limit 高效分页"></a>Limit 高效分页</h5></li>
<li><h5 id="用-UNION-ALL-而非-UNION"><a href="#用-UNION-ALL-而非-UNION" class="headerlink" title="用 UNION ALL 而非 UNION"></a>用 UNION ALL 而非 UNION</h5></li>
</ol>
<p>  若无需对结果进行去重，则用UNION ALL ， UNION有去重开销</p>
<ol start="11">
<li><h5 id="分解联接保证高并发"><a href="#分解联接保证高并发" class="headerlink" title="分解联接保证高并发"></a>分解联接保证高并发</h5><p>高幵发DB不建议进行两个表以上的JOIN</p>
</li>
<li><h5 id="GROUP-BY-去重排序"><a href="#GROUP-BY-去重排序" class="headerlink" title="GROUP BY 去重排序"></a>GROUP BY 去重排序</h5><p>GROUP BY 实现（默认分组，自动排序）</p>
<p>无需排序：Order by NUL</p>
<p>特定排序：Group by DESC/ASC</p>
</li>
<li><h5 id="同数据类型值比较"><a href="#同数据类型值比较" class="headerlink" title="同数据类型值比较"></a>同数据类型值比较</h5><p>原则：数字对数字，字符对字符</p>
<p>数值列 与 字符类型比较，默认同时转换为 双精度 进行比较</p>
<p>字符列 与 数值类型比较，字符列整列转数值(否则不会使用索引查询)</p>
</li>
<li><h5 id="打散大批量数据更新"><a href="#打散大批量数据更新" class="headerlink" title="打散大批量数据更新"></a>打散大批量数据更新</h5><p>大批量更新凌晨操作，避开高峰</p>
</li>
<li><p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL MySQL高级</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL存储过程循环CURSOR(游标)使用</title>
    <url>/2020/03/23/MySQL%E6%B8%B8%E6%A0%87/</url>
    <content><![CDATA[<h4 id="游标概述"><a href="#游标概述" class="headerlink" title="游标概述"></a>游标概述</h4><p>概括来说，游标是一种临时的数据库对象，即用来存放一个表中所有信息或者表中的一部分数据信息（副本）。游标也可以用来指向数据的某一行，可以充当数据库中的行指针。</p>
<p>最常见用途就是保存查询结果，便于后面使用，游标中的结果集都是有select语句产生的（临时的数据库对象）。如果处理过程需要重复频繁的应用一个结果集，创建游标比不断查询数据库快捷的多。</p>
<hr>
<span id="more"></span>

<h4 id="注意游标建立的一些规范"><a href="#注意游标建立的一些规范" class="headerlink" title="注意游标建立的一些规范"></a>注意游标建立的一些规范</h4><ol>
<li>变量建立在游标结束定义和游标定义之前</li>
<li>游标结束定义建立在游标定义之前</li>
</ol>
<hr>
<h4 id="循环游标定义与使用示例图"><a href="#循环游标定义与使用示例图" class="headerlink" title="循环游标定义与使用示例图"></a>循环游标定义与使用示例图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> authorl <span class="type">char</span>(<span class="number">60</span>);</span><br><span class="line">	<span class="keyword">DECLARE</span> title1 <span class="type">char</span>(<span class="number">60</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> a <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> b <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> C <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#（变量定义要在游标结束标志和游标定义之前）</span><br><span class="line">	<span class="keyword">DECLARE</span> done <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>;#遍历游标结束标志（要在游标定义之前）</span><br><span class="line">	<span class="keyword">DECLARE</span> cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> SELECI author,title <span class="keyword">from</span> books;#定义游标</span><br><span class="line">	<span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> done <span class="operator">=</span> <span class="literal">TRUE</span>;#将结束标志绑定到游标</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">OPEN</span> cur;#开始游标</span><br><span class="line">	read test : LOOP </span><br><span class="line">		<span class="keyword">FETCH</span> NEXT <span class="keyword">from</span> cur <span class="keyword">into</span> authorl,title1;</span><br><span class="line">		IF done <span class="keyword">THEN</span> </span><br><span class="line">	 		LEAVE read test;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		IF authorl <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">THEN</span> </span><br><span class="line">			<span class="keyword">set</span> a<span class="operator">=</span>a<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		IF authorl <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">THEN</span> </span><br><span class="line">			<span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">	<span class="keyword">END</span> LOOP;</span><br><span class="line">	<span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;a有&#x27;</span>,a,<span class="string">&#x27;个。b有&#x27;</span>,b,<span class="string">&#x27;个。&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL MySQL基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-基础2-基础命令</title>
    <url>/2020/07/09/Nginx-%E5%9F%BA%E7%A1%802-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><p>基础命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nginx帮助命令</span></span><br><span class="line">nginx -h</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询nginx进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line">cat nginx.pid #此文件保持nginx主进程id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死所有nginx进程</span></span><br><span class="line">killall nginx </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询nginx版本</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx指定文件</span></span><br><span class="line">nginx -c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试配置文件两种方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试配置正确性并退出</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试配置只显示错误</span></span><br><span class="line">nginx -q</span><br></pre></td></tr></table></figure></li>
<li><p>关闭命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 快速关闭两个命令</span></span><br><span class="line">./nginx -g stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 平缓关闭</span></span><br><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure></li>
<li><p>重启命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#重启Nginx</span><br><span class="line">nginx -s reopen </span><br><span class="line"></span><br><span class="line">#重新加载Nginx配置文件，然后以优雅的方式重启Nginx</span><br><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure></li>
<li><p>平滑升级操作命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Nginx就支持平滑升级的方式，可以不间断提供服务。</span><br><span class="line">#我第一次安装Nginx的时候故意安装了一个低版本的，这次来测试一下平滑升级。</span><br><span class="line">#已安装版本： nginx-1.8.0</span><br><span class="line">#新版本Nginx： nginx-1.9.9</span><br><span class="line"></span><br><span class="line"># 第一步 下载最新Nginx上传到服务器并解压</span><br><span class="line">[root@localhost ~]# cd /usr/local/software/</span><br><span class="line">[root@localhost software]# tar -zxvf nginx-1.9.9.tar.gz</span><br><span class="line"></span><br><span class="line"># 第二步 编译</span><br><span class="line">[root@localhost local]# cd /usr/local/software/nginx-1.9.9</span><br><span class="line">[root@localhost nginx-1.9.9]# ./configure –prefix=/usr/local/nginx</span><br><span class="line">[root@10.10.90.97 ~]# ./configure –prefix=/usr/local/nginx –with-http_stub_status_module</span><br><span class="line">[root@localhost nginx-1.9.9]# make</span><br><span class="line">#注意千万不要执行 make install ，因为会将原来的Nginx文件全部替换，达不到平滑升级的效果。</span><br><span class="line"></span><br><span class="line"># 第三步 备份旧版本Nginx的可执行文件</span><br><span class="line">[root@localhost objs]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@localhost sbin]# ls</span><br><span class="line">nginx</span><br><span class="line">[root@localhost sbin]# cp nginx nginx.old</span><br><span class="line">[root@localhost sbin]# ls</span><br><span class="line">nginx nginx.old</span><br><span class="line"></span><br><span class="line"># 第四步 替换Nginx可执行文件</span><br><span class="line">将新版本解压后文件夹objs里的nginx可执行文件，替换掉老版本sbin文件夹下的nginx可执行文件。</span><br><span class="line">[root@localhost nginx-1.9.9]# cp -rfp /usr/local/software/nginx-1.9.9/objs/nginx /usr/local/nginx/sbin/</span><br><span class="line">cp：是否覆盖”/usr/local/nginx/sbin/nginx”？ y</span><br><span class="line"></span><br><span class="line"># 第五步 查看是否升级成功</span><br><span class="line">[root@localhost nginx-1.9.9]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@localhost sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/1.9.9</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-基础1-简介及安装</title>
    <url>/2020/07/07/Nginx-%E5%9F%BA%E7%A1%801-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="什么是-Nginx"><a href="#什么是-Nginx" class="headerlink" title="什么是 Nginx ?"></a>什么是 Nginx ?</h4><p>​    高性能的 HTTP 和反向代理的web 服务器。特点：占有内存少，并发能力强。</p>
<hr>
<span id="more"></span>

<h4 id="nginx基本概念"><a href="#nginx基本概念" class="headerlink" title="nginx基本概念"></a>nginx基本概念</h4><ul>
<li><p>反向代理</p>
<p>正向代理：在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</p>
<p>反向代理：客户端（浏览器）将请求发送到代理服务器，由反向代理服务器去选择目标服务器获取数据，再返回给客户端。暴露了代理服务器，隐藏了真实服务器的ip</p>
</li>
<li><p>负载均衡</p>
<p>将请求分发到多个服务器上。</p>
</li>
<li><p>动静分离</p>
<p>将静态资源和动态资源分开部署，达到给服务器减轻压力的效果</p>
</li>
</ul>
<hr>
<h4 id="Linux-中安装-Nginx"><a href="#Linux-中安装-Nginx" class="headerlink" title="Linux 中安装 Nginx"></a>Linux 中安装 Nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步 安装编译工具及库文件</span></span><br><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步 安装 PCRE：PCRE 作用是让 Nginx 支持 Rewrite 功能。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar zxvf pcre-8.35.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录</span></span><br><span class="line">cd pcre-8.35</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装】</span></span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果make错误 <span class="string">&quot;make:*** No targets specified and no makefile found.Stop.&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum update</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum apt-get install gcc build-essential</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls 查看当前文件夹下是否有 makefile 文件，如果没有文件重新 ./configure</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看pcre版本</span></span><br><span class="line">pcre-config --version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步 下载Nginx</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar zxvf nginx-1.12.2.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入文件夹</span></span><br><span class="line"> cd nginx-1.12.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装</span></span><br><span class="line">./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</span><br><span class="line"></span><br><span class="line">make &amp; make install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">cd /usr/local/webserver/nginx/sbin</span><br><span class="line">./nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 进程</span></span><br><span class="line"> ps -ef | grep nginx</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 配置文件</span></span><br><span class="line">cd /usr/local/webserver/nginx/conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx.conf 文件 server 节点端口号,默认为80端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接 ip:80 浏览器访问，看能否访问到 nginx 界面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<ol>
<li>​</li>
</ol>
<hr>
<h4 id="nginx配置实例"><a href="#nginx配置实例" class="headerlink" title="nginx配置实例"></a>nginx配置实例</h4><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><ul>
<li><p>实现效果</p>
<p>打开浏览器，在浏览器地址输入 <a href="http://www.123.com/">www.123.com</a> 跳转到 linux 系统 tomcat 主页</p>
</li>
<li><p>配置文件修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 简单版本 修改 http块-》server块-》location块 加入proxy_pass节点</span></span><br><span class="line"> location / &#123;</span><br><span class="line">   root   html;</span><br><span class="line">   proxy_pass  http://127.0.0.1:8080;</span><br><span class="line">   index  index.html index.htm;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复杂版本 对 “/” 启用反向代理</span></span><br><span class="line">location / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:3000;  # 设置要代理的 uri，注意最后的 /。可以是 Unix 域套接字路径，也可以是正则表达式。</span><br><span class="line">  proxy_redirect off; # 设置后端服务器“Location”响应头和“Refresh”响应头的替换文本</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr; # 获取用户的真实 IP 地址</span><br><span class="line"><span class="meta">  #</span><span class="bash">后端的Web服务器可以通过 X-Forwarded-For 获取用户真实IP，多个 nginx 反代的情况下，例如 CDN。参见：http://gong1208.iteye.com/blog/1559835 和 http://bbs.linuxtone.org/thread-9050-1-1.html</span></span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"><span class="meta">  #</span><span class="bash">以下是一些反向代理的配置，可选。</span></span><br><span class="line">  proxy_set_header Host $host; # 允许重新定义或者添加发往后端服务器的请求头。</span><br><span class="line"> </span><br><span class="line">  client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class="line">  client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">  proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">  proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">  proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">  proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">  proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">  proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">  proxy_temp_file_write_size 64k;</span><br><span class="line"><span class="meta">  #</span><span class="bash">设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><ul>
<li><p>实现效果</p>
<p>请求暴露出端口，随机映射到代理的几台服务器中</p>
</li>
<li><p>配置文件修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">http块中加入 upstream 节点</span></span><br><span class="line"><span class="meta">#</span><span class="bash">四种调度算法：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认（轮询）：Weight 指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ip_hash：每个请求按访问IP的<span class="built_in">hash</span>结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash">fair：这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">url_hash：此方法按访问url的<span class="built_in">hash</span>结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的<span class="built_in">hash</span>软件包。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">调度状态</span></span><br><span class="line"><span class="meta">#</span><span class="bash">down，表示当前的server暂时不参与负载均衡</span></span><br><span class="line"><span class="meta">#</span><span class="bash">backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</span></span><br><span class="line">upstream myserver&#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">	server 127.0.0.1:8080 down;</span><br><span class="line">	server 127.0.0.1:8081 max_fails=3  fail_timeout=20s;</span><br><span class="line">	server 127.0.0.1:8083;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">暴露出的端口</span></span><br><span class="line">listen       80;</span><br><span class="line">server_name  127.0.0.1;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">charset koi8-r;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">  root   html;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 请求改为上方的 myserver</span></span><br><span class="line">  proxy_pass  http://myserver;</span><br><span class="line">  index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h5><h5 id="nginx配置高可用集群"><a href="#nginx配置高可用集群" class="headerlink" title="nginx配置高可用集群"></a>nginx配置高可用集群</h5><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://192.128.133.202;</span><br><span class="line">                if ($request_method = &quot;PUT&quot;)&#123;</span><br><span class="line">                        proxy_pass http://192.128.18.201;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="配置文件案例"><a href="#配置文件案例" class="headerlink" title="配置文件案例"></a>配置文件案例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="如何配置rewrite？"><a href="#如何配置rewrite？" class="headerlink" title="如何配置rewrite？"></a>如何配置rewrite？</h3><p>rewrite功能就是集合正则表达式和标志位实现url重写和重定向。rewrite只能放在server{}、location{}、if(){}块中，并且只能对域名后边的出去传递参数外的字符串起作用。如URL：<br><code>http://microloan-sms-platform.yxapp.xyz/proxy/sms/task/querydeleted?page=1&amp;pagesize=10</code><br>只对/proxy/sms/task/querydeleted进行重写。</p>
<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p>
<p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p>
<ul>
<li>执行server块的rewrite指令</li>
<li>执行location匹配</li>
<li>执行选定的location中的rewrite指令</li>
</ul>
<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p>
<p>rewrite规则后边，通常会带有flag标志位：</p>
<ul>
<li>last : 相当于Apache的[L]标记，表示完成rewrite</li>
<li>break : 停止执行当前虚拟主机的后续rewrite指令集</li>
<li>redirect : 返回<code>302</code>临时重定向，地址栏会显示跳转后的地址</li>
<li>permanent : 返回<code>301</code>永久重定向，地址栏会显示跳转后的地址</li>
</ul>
<p>last 和 break 区别：</p>
<ul>
<li>last一般写在server和if中，而break一般使用在location中</li>
<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>
<li>break和last都能组织继续执行后面的rewrite指令</li>
</ul>
<p>rewrite常用正则：</p>
<ul>
<li><code>.</code> ： 匹配除换行符以外的任意字符</li>
<li><code>?</code> ： 重复0次或1次</li>
<li><code>+</code> ： 重复1次或更多次</li>
<li><code>*</code> ： 重复0次或更多次</li>
<li><code>\d</code> ：匹配数字</li>
<li><code>^</code> ： 匹配字符串的开始</li>
<li><code>$</code> ： 匹配字符串的介绍</li>
<li><code>&#123;n&#125;</code> ： 重复n次</li>
<li><code>&#123;n,&#125;</code> ： 重复n次或更多次</li>
<li><code>[c]</code> ： 匹配单个字符c</li>
<li><code>[a-z]</code> ： 匹配a-z小写字母的任意一个</li>
</ul>
<p>可以使用<code>()</code>来进行分组，可以通过<code>$1</code>的形式来引用。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">        proxy_pass http://microloan-notification-web.yxapp.in;</span><br><span class="line">        rewrite /proxy/(.*)$ /$1 break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-基础3-配置文件解析</title>
    <url>/2020/07/09/Nginx-%E5%9F%BA%E7%A1%803-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h4 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h4><p><strong>配置文件位置：</strong>/usr/local/webserver/nginx/conf</p>
<h5 id="nginx-配置文件有三部分组成"><a href="#nginx-配置文件有三部分组成" class="headerlink" title="nginx 配置文件有三部分组成"></a>nginx 配置文件有三部分组成</h5><ol>
<li><p>全局块</p>
<p>​    从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令，主要包括：</p>
<p>​    <strong>配置运行 Nginx 服务器的 用户（组）</strong></p>
<p>​    <strong>允许生成的 worker process 数</strong></p>
<p>​    <strong>进程 PID 存放路径</strong></p>
<p>​    <strong>日志存放路径和类型</strong></p>
<p>​    <strong>配置文件的引入</strong></p>
</li>
<li><p>events块</p>
<p>主要影响 Nginx 服务器与用户网络的连接，常用的设置包括：</p>
<p>​    <strong>是否开启对多 work process 下网络连接进行序列化</strong>    </p>
<p>​    <strong>是否允许同时接收多个网络链接</strong></p>
<p>​    <strong>选取那种事件驱动模型来处理连接请求</strong></p>
<p>​    <strong>每个word process 可以同时支持的最大连接数</strong></p>
</li>
<li><p>http块</p>
<p>是nginx中配置最频繁的部分，反向代理、缓存、日志定义等绝大多数功能和第三方模块配置都在这里</p>
<p>其中又包含 http全局块、server块（全局server块、以及同时包含多个location块）</p>
<p>http全局块：<strong>文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限</strong></p>
<p>server 块：最常见的配置是<strong>本虚拟机的监听配置</strong>  、 <strong>本虚拟机的名称</strong>  、<strong>本虚拟机IP配置</strong></p>
<p>location 块：基于 Nginx 收到的请求字符串，对虚拟主机名称（也可以是 IP 别名）之外的字符串进行匹配，对特定的请求进行处理。地址定向、数据缓存、应答控制、还有很多第三方模块配置</p>
</li>
</ol>
<hr>
<span id="more"></span>

<h4 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#全局块</span><br><span class="line">#user  nobody; # user  nobody 指所有人都可以操作ngnix</span><br><span class="line">#user user group; #只有 user 和 group组内用户可以操作nginx</span><br><span class="line"></span><br><span class="line">#nginx 并发处理的值，worker_processes值越大，可以支持的并发处理量也就越多，但是会受到硬件和软件等设备的制约</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># 错误日志存放路径，指定的文件要对nginx用户开放写的权限，要不会报错</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line"># 指定nginx主进程保存文件</span><br><span class="line"># 指定 【path】 时一定要包含文件名，只设置路径会报错</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># events 块</span><br><span class="line">events &#123;</span><br><span class="line">	# 支持最大连接数，影响较大，需要灵活配置</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">	# http全局块</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">	# nginx 服务器支持对日志的格式、大小、输出等进行配置。需要使用两个指令 access_log  log_format</span><br><span class="line">	# 自定义日志格式 一般和 access_log 连用   </span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  log_format;# 使用main 配置格式记录服务日志</span><br><span class="line">    #access_log off; 取消记录服务日志</span><br><span class="line"></span><br><span class="line">	# 开启或关闭使用sendfile() 传输文件，默认值为off</span><br><span class="line">    sendfile        on; # sendfile off 为关闭</span><br><span class="line">    sendfile_max_chunk_size  size; # work process 每次调用sendfile传输的数据量最大不能超过这个值</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">	# 配置超时连接时间 </span><br><span class="line">	# keepalive_timeout  timeout [header_timeout];</span><br><span class="line">	# header_timeout  可选配置 </span><br><span class="line">	# timeout 服务器端对连接保持时间，header_timeout 发送给用户端的应答报文头部中 Keep-Alive域的超时时间设置。</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">	#配置单连接请求上限数,默认设置为 100,此指令还可以出现在 server块 location块中</span><br><span class="line">	keepalive_requests numbers;</span><br><span class="line">    </span><br><span class="line">    #gzip  on; </span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">    	# nginx 目前监听的端口号</span><br><span class="line">        listen       80;</span><br><span class="line">        #   </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">		# 如果路径中发现 / 会做请求的跳转</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-基础4-负载均衡和反向代理的配置和优化</title>
    <url>/2020/07/13/Nginx-%E5%9F%BA%E7%A1%804-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h4 id="完整反向代理示例"><a href="#完整反向代理示例" class="headerlink" title="完整反向代理示例"></a>完整反向代理示例</h4><p>当后端 Web 服务器上有多个基于域名的虚拟主机时，要通过添加 Header 头信息 Host，用于指定请求域名，这样后端Web服务器才能识别该反向代理请求的是哪一个虚拟服务器来处理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用的用户和组</span></span><br><span class="line">user www www;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定工作衍生进程数（一般等于CPU的总核数或总核数两倍，例如两个四核CPU,则总核数为8）</span></span><br><span class="line">worker_processes 10;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定错误日志的存放路径，错误日志记录级别可选项为：【 debug | info | notice | warn | error | crit 】</span></span><br><span class="line">error_log /data1/logs/nginx_error.log crit;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 主进程id 存放位置</span></span><br><span class="line">pid /usr/local/webserver/nginx/nginx.pid;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定文件描述符数量</span></span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 使用的网络 I/O 模型，Linux 系统推荐使用epoll 模型，</span></span><br><span class="line">	use epoll;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 允许的连接数</span></span><br><span class="line">	worker_connections 51200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">	include mime.types;</span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 设置使用的字符集，如果一个网站有多种字符集，请不要随意设置，应让程序员在HTML 代码中通过 META 标签设置</span></span><br><span class="line"><span class="meta">	#</span><span class="bash">charset utf-8;</span></span><br><span class="line"></span><br><span class="line">	server_names_hash_bucket_size 128;</span><br><span class="line">	client_header_buffer_size 32k;</span><br><span class="line">	large_client_header_buffers 4 32k;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 设置客户端能够上传的文件大小</span></span><br><span class="line">	client_max_boby_size 8m;</span><br><span class="line"></span><br><span class="line">	sendfile on;</span><br><span class="line">	tcp_onpush on;</span><br><span class="line"></span><br><span class="line">	keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">	tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">	fastcgi_connect_timeout 300;</span><br><span class="line">	fastcgi_sent_timeout 300;</span><br><span class="line">	fastcgi_read_timeout 300;</span><br><span class="line">	fastcgi_buffer_size 64k;</span><br><span class="line">	fastcgi_buffers 4 64k;</span><br><span class="line">	fastcgi_busy_buffers_size 128k;</span><br><span class="line">	fastcgi_temp_file_write_size 128k;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 开启gzip压缩</span></span><br><span class="line">	gzip on;</span><br><span class="line">	gzip_min_length 1k;</span><br><span class="line">	gzip_buffers 4 16k;</span><br><span class="line">	gzip_http_version 1.1;</span><br><span class="line">	gzip_comp_level 2;</span><br><span class="line">	gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">	gzip_vary on;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash">limit_zone crawler <span class="variable">$binary_remote_addr</span> 10m;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 允许客户端请求的最大单个文件字节数</span></span><br><span class="line">	client_max_body_size 300m;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 缓冲区代理缓冲用户端请求的最大字节数，可以理解为先保存到本地再传给用户</span></span><br><span class="line">	client_body_buffer_size 128k;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 跟后端服务器连接超时时间，发起握手等候响应的超时时间</span></span><br><span class="line">	proxy_connect_timeout 600;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 连接成功后，等待后端服务器响应时间，其实已经进入后端的派对之中等候处理</span></span><br><span class="line">	proxy_read_timeout 600;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 后端服务器数据回传时间，就是在规定时间内后端服务器必须传完所有数据</span></span><br><span class="line">	proxy_send_timeout 600;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 代理请求缓存区，这个缓存区间会保存用户的头信息以供Nginx 进行规则处理，一般只能保存下头信息即可</span></span><br><span class="line">	proxy_buffer_size 16k;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 告诉Nginx 保存单个用的几个 Buffer 最大用多大空间</span></span><br><span class="line">	proxy_buffers 4 32k;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 如果系统很忙的时候可以申请更大的 proxy_buffers 官方推荐*2</span></span><br><span class="line">	proxy_busy_buffers_size 64k;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> proxy 缓存临时文件大小</span></span><br><span class="line">	proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">	upstream php_server_pool &#123;</span><br><span class="line">		server  192.168.1.10:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">		server  192.168.1.11:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">		server  192.168.1.12:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">	&#125;	</span><br><span class="line"></span><br><span class="line">	upstream message_server_pool &#123;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> ip_hash 指令无法保证后端服务器负载均衡，将某个客户端请求通过哈希算法定位到同一个后端服务器</span></span><br><span class="line">		server  192.168.1.13:3245;</span><br><span class="line"><span class="meta">		#</span><span class="bash"> down 摘除此负载均衡服务器</span> </span><br><span class="line"><span class="meta">		#</span><span class="bash"> backup backup 服务器在所有 非backup 服务器全部冗机或繁忙的时候才启动</span></span><br><span class="line">		server  192.168.1.14:3245 down;</span><br><span class="line">	&#125;	</span><br><span class="line"></span><br><span class="line">	upstream bbs_server_pool &#123;</span><br><span class="line">		server  192.168.1.15:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">		server  192.168.1.16:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">		server  192.168.1.17:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">		server  192.168.1.18:80 weight=4 max_fails=2 fail_timeout=30s;</span><br><span class="line">	&#125;	</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 第一个虚拟主机，反向代理php_server_pool 这组服务</span></span><br><span class="line">	server</span><br><span class="line">	&#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name www.yourdomain.com</span><br><span class="line"></span><br><span class="line">		location /</span><br><span class="line">		&#123;</span><br><span class="line"><span class="meta">			#</span><span class="bash"> 如果这台服务器返回 502、504、执行超时等错误，自动将请求转发到 upstream 负载均衡池中另一台服务，实现故障转移</span></span><br><span class="line">			proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">			proxy_pass http://php_server_pool;</span><br><span class="line">			proxy_set_header Host www.yourdomain.com;</span><br><span class="line">			proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		access_log /data1/logs/www.yourdomain.com_access.log; </span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 第二个虚拟主机，反向代理php_server_pool 这组服务</span></span><br><span class="line">	server</span><br><span class="line">	&#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name www1.yourdomain.com</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> 访问 http://www1.yourdomain.com/message/***地址，反向代理 message_server_pool 这组服务器</span></span><br><span class="line">		location /message/</span><br><span class="line">		&#123;</span><br><span class="line">			proxy_pass http://message_server_pool;</span><br><span class="line">			proxy_set_header Host $host;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> 访问 除/message/之外的 http://www1.yourdomain.com/***地址 ，反向代理 php_server_pool 这组服务器</span></span><br><span class="line">		location /</span><br><span class="line">		&#123;</span><br><span class="line"><span class="meta">			#</span><span class="bash"> 如果这台服务器返回 502、504、执行超时等错误，自动将请求转发到 upstream 负载均衡池中另一台服务，实现故障转移</span></span><br><span class="line">			proxy_pass http://php_server_pool;</span><br><span class="line">			proxy_set_header Host $host;</span><br><span class="line">			proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		access_log /data1/logs/message.yourdomain.com_access.log; </span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 第三个虚拟主机</span></span><br><span class="line">	server</span><br><span class="line">	&#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name bbs.yourdomain.com *.bbs.yourdomain.com</span><br><span class="line"></span><br><span class="line">		location /</span><br><span class="line">		&#123;</span><br><span class="line">			proxy_pass http://bbs_server_pool;</span><br><span class="line">			proxy_set_header Host $host;</span><br><span class="line">			proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		access_log off; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-基础5-匹配规则</title>
    <url>/2020/07/23/Nginx-%E5%9F%BA%E7%A1%805-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h4 id="规则语法"><a href="#规则语法" class="headerlink" title="规则语法"></a>规则语法</h4><table>
<thead>
<tr>
<th>语法</th>
<th>匹配规则</th>
</tr>
</thead>
<tbody><tr>
<td>空</td>
<td>普通匹配（遵循最大前缀匹配规则，优先度比正则要低）</td>
</tr>
<tr>
<td>=</td>
<td>精确（严格）匹配，优先度最高后续不再匹配正则</td>
</tr>
<tr>
<td>^~</td>
<td>非正则匹配（依然遵循最大最大前缀匹配规则），后续不再匹配正则</td>
</tr>
<tr>
<td>~</td>
<td>表示区分大小写的正则匹配</td>
</tr>
<tr>
<td>~*</td>
<td>表示不区分大小写的正则匹配</td>
</tr>
<tr>
<td>/</td>
<td>通用匹配。任何请求都会匹配到（本质上等同于语法 空）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-进阶1-日志分割</title>
    <url>/2020/07/13/Nginx-%E8%BF%9B%E9%98%B61-%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<h4 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个脚本须在每天 00:00 运行</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nginx 日志文件的存放路径</span></span><br><span class="line">logs_path=&quot;/usr/local/webserver/nginx/logs/&quot;</span><br><span class="line">mkdir -p $&#123;logs_path&#125;$(date -d &quot;yesterday&quot; +&quot;%Y&quot;)/$(date -d &quot;yesterday&quot; +&quot;%m&quot;)/ </span><br><span class="line">mv $&#123;logs_path&#125;access.log $&#123;logs_path&#125;/$(date -d &quot;yesterday&quot; +&quot;%Y&quot;)/$(date -d &quot;yesterday&quot; +&quot;%m&quot;)/$(date -d &quot;yesterday&quot; +&quot;%Y%m%d&quot;).log</span><br><span class="line">kill -USR1 `cat /usr/local/webserver/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="配置脚本定时执行"><a href="#配置脚本定时执行" class="headerlink" title="配置脚本定时执行"></a>配置脚本定时执行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加执行计划</span></span><br><span class="line">00 00 * * * /bin/bash /root/test.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-进阶2-重写</title>
    <url>/2020/07/23/Nginx-%E8%BF%9B%E9%98%B62-%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<h4 id="nginx-重写"><a href="#nginx-重写" class="headerlink" title="nginx  重写"></a>nginx  重写</h4><p><strong>rewrite可以写在server段、location段和if段。语法：</strong></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rewrite regexp replacement [flag]</span><br></pre></td></tr></table></figure>

<p>flag是标记。有4种标记，它们的作用如下表。</p>
<table>
<thead>
<tr>
<th>flag</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>last</td>
<td>停止处理当前上下文中的其他重写模块，并为重写后的 uri 再次进行上下文匹配</td>
</tr>
<tr>
<td>break</td>
<td>和 break 指令一样，都是停止处理当前上下文中的其他重写模块指令</td>
</tr>
<tr>
<td>redirect</td>
<td>返回临时重定向状态码302，当 replacemetn 部分不是以 <code>http://</code>  或者 <code>https://</code> 或者 <code>$schema</code> 变量表示使用的什么协议</td>
</tr>
<tr>
<td>permanent</td>
<td>返回永久重定向状态码301</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>注意：**</p>
<p><strong>last和break用来实现URL改写，此时浏览器中的地址不会改变，但实际上在服务器上访问的资源和路径已经改变了。</strong></p>
<p><strong>redirect和permanent用来实现URL跳转，浏览器中的地址会改变为跳转后的地址</strong>。</p>
<p><strong>在使用proxy_pass指令时要使用break标记</strong>。last标记在本条rewrite规则执行完后，继续在当前上下文对重写后的地址发起匹配请求，而break则在本次匹配完成后停止再次匹配。</p>
<p>例如下面的两条重写规则。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rewrite &quot;^/bbs/(.*)/images/(.*)\.jpg$&quot; www.linuxidc.com/bbs/$2/images/$1.jpg last;</span><br><span class="line">rewrite &quot;^/bbs/(.*)/images/(.*)\.jpg$&quot; www.linuxidc.com/bbs/$2/images/$1.jpg break;</span><br></pre></td></tr></table></figure>

<p>如果访问的是<a href="http://www.linuxidc.com/bbs/a/images/b.jpg%E5%88%99%E9%87%8D%E5%86%99%E5%90%8E%E4%B8%BAwww.linuxidc.com/bbs/b/images/a.jpg%EF%BC%8C">www.linuxidc.com/bbs/a/images/b.jpg则重写后为www.linuxidc.com/bbs/b/images/a.jpg，</a></p>
<p>但是重写后的地址仍然可以匹配到规则<code>^/bbs/(.*)/images/(.*)\.jpg$</code>，此时如果使用last标记，则会再次进行重写，最终导致URL重写循环，nginx默认支持10次循环，然后返回500状态码。</p>
<p>而如果使用break标记，则在重写完成后不会再次匹配重写。</p>
<p><strong>例子1</strong></p>
<p>在server字段中写rewrite，使得任意以<code>linuxidc.com</code>结尾的访问重定向到<code>www.linuxidc.com</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server_name  www.linuxidc.com;</span><br><span class="line">rewrite (.*).linuxidc.com www.linuxidc.com permanent;</span><br></pre></td></tr></table></figure>



<p><strong>例子2</strong></p>
<p>在location字段中rewrite，使得<code>localhost/bbs/</code>的访问都重定向到<code>localhost/forum/</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location /bbs &#123;</span><br><span class="line">        root   html/;</span><br><span class="line">        index index.html;</span><br><span class="line">        rewrite &quot;/bbs/(.*)&quot; &quot;/forum/$1&quot; last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-进阶3-运维</title>
    <url>/2021/06/29/Nginx-%E8%BF%9B%E9%98%B63-%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="nginx-重写"><a href="#nginx-重写" class="headerlink" title="nginx  重写"></a>nginx  重写</h4><p>1、查看nginx路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux|grep nginx</span><br><span class="line">root       2172  0.0  0.0  46540   788 ?        Ss    2020   0:00 nginx: master process nginx</span><br><span class="line">nginx     13116  0.0  0.0  46988  1236 ?        S    Feb05   0:03 nginx: worker process</span><br><span class="line">nginx     13117  0.0  0.0  46988  1116 ?        S    Feb05   0:07 nginx: worker process</span><br><span class="line">nginx     13118  0.0  0.0  46988  1300 ?        S    Feb05   0:24 nginx: worker process</span><br><span class="line">nginx     13119  0.0  0.0  47084  1264 ?        S    Feb05   1:34 nginx: worker process</span><br><span class="line">nginx     13120  0.0  0.0  47084  1336 ?        S    Feb05   0:33 nginx: worker process</span><br><span class="line">root      34869  0.0  0.0 112816   972 pts/0    S+   11:58   0:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>

<p>2、查看nginx文件配置路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@osj_sit osj_refactor]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx Nginx进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>QLExpress-基础1-简介</title>
    <url>/2020/07/12/QLExpress-%E5%9F%BA%E7%A1%801-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="QLExpress"><a href="#QLExpress" class="headerlink" title="QLExpress"></a>QLExpress</h4><p>QLExpress脚本引擎被广泛应用在阿里的电商业务场景，具有以下的一些特性:、</p>
<ul>
<li>线程安全：引擎运算过程中产生的临时变量都是 threadLocal 类型。</li>
<li>高效执行，比较耗时的脚本编译过程可以缓存在本地机器，运行时的临时变量创建了缓冲池的技术，和groovy性能相当，</li>
<li>弱脚本语言，和groovy，javascript语法类似，虽然比强类型脚本语言要慢一点，但是使一万元的灵活度大大增强</li>
<li>安全控制，可以通过设置相关运行参数，预防死循环，高位系统api调用等情况</li>
<li>代码精简，依赖最小</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="依赖和调用说明"><a href="#依赖和调用说明" class="headerlink" title="依赖和调用说明"></a>依赖和调用说明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;QLExpress&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.2</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressRunner runner = <span class="keyword">new</span> ExpressRunner();</span><br><span class="line">DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">context.put(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line">context.put(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>);</span><br><span class="line">context.put(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 规则代码</span></span><br><span class="line">String express = <span class="string">&quot;a+b*c&quot;</span>;</span><br><span class="line">Object r = runner.execute(express, context, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">System.out.println(r);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>规则引擎</category>
      </categories>
      <tags>
        <tag>规则引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>QLExpress-基础2-语法介绍</title>
    <url>/2020/07/12/QLExpress-%E5%9F%BA%E7%A1%802-%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h4 id="QLExpress-不支持的写法"><a href="#QLExpress-不支持的写法" class="headerlink" title="QLExpress 不支持的写法"></a>QLExpress 不支持的写法</h4><ul>
<li>不支持try{}catch{}</li>
<li>不支持java8的lambda表达式</li>
<li>不支持for循环集合操作for (GRCRouteLineResultDTO item : list)</li>
<li>弱类型语言，请不要定义类型声明,更不要用Templete（Map&lt;String,List&gt;之类的）</li>
<li>array的声明不一样</li>
<li>min,max,round,print,println,like,in 都是系统默认函数的关键字，请不要作为变量名</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="QLExpress-基本语法"><a href="#QLExpress-基本语法" class="headerlink" title="QLExpress 基本语法"></a>QLExpress 基本语法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">//java语法：使用泛型来提醒开发者检查类型</span></span><br><span class="line">keys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">deviceName2Value = <span class="keyword">new</span> HashMap&lt;String,String&gt;(<span class="number">7</span>);</span><br><span class="line">String[] deviceNames = &#123;<span class="string">&quot;ng&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;umid&quot;</span>,<span class="string">&quot;ut&quot;</span>,<span class="string">&quot;mac&quot;</span>,<span class="string">&quot;imsi&quot;</span>,<span class="string">&quot;imei&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] mins = &#123;<span class="number">5</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ql写法：</span></span><br><span class="line">keys = <span class="keyword">new</span> ArrayList();</span><br><span class="line">deviceName2Value = <span class="keyword">new</span> HashMap();</span><br><span class="line">deviceNames = [<span class="string">&quot;ng&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;umid&quot;</span>,<span class="string">&quot;ut&quot;</span>,<span class="string">&quot;mac&quot;</span>,<span class="string">&quot;imsi&quot;</span>,<span class="string">&quot;imei&quot;</span>];</span><br><span class="line">mins = [<span class="number">5</span>,<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组遍历</span></span><br><span class="line"><span class="comment">//java语法：数组遍历</span></span><br><span class="line"><span class="keyword">for</span>(GRCRouteLineResultDTO item : list) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ql写法：</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">item = list.get(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map 遍历</span></span><br><span class="line"><span class="comment">//java语法：map遍历</span></span><br><span class="line"><span class="keyword">for</span>(String key : map.keySet()) &#123;</span><br><span class="line">  System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ql写法：</span></span><br><span class="line">keySet = map.keySet();</span><br><span class="line">objArr = keySet.toArray();</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;objArr.length;i++) &#123;</span><br><span class="line">  key = objArr[i];</span><br><span class="line">  System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="QLExpress-脚本中定义function"><a href="#QLExpress-脚本中定义function" class="headerlink" title="QLExpress 脚本中定义function"></a>QLExpress 脚本中定义function</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> add(a,<span class="number">4</span>) + sub(a,<span class="number">9</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="扩展操作符：Operator"><a href="#扩展操作符：Operator" class="headerlink" title="扩展操作符：Operator"></a>扩展操作符：Operator</h4><p><strong>替换if then else 等关键字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runner.addOperatorWithAlias(<span class="string">&quot;如果&quot;</span>, <span class="string">&quot;if&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">runner.addOperatorWithAlias(<span class="string">&quot;则&quot;</span>, <span class="string">&quot;then&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">runner.addOperatorWithAlias(<span class="string">&quot;否则&quot;</span>, <span class="string">&quot;else&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">exp = <span class="string">&quot;如果  (语文+数学+英语&gt;270) 则 &#123;return 1;&#125; 否则 &#123;return 0;&#125;&quot;</span>;</span><br><span class="line">DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">runner.execute(exp,context,<span class="keyword">null</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h5 id="如何自定义Operator"><a href="#如何自定义Operator" class="headerlink" title="如何自定义Operator"></a>如何自定义Operator</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个继承自com.ql.util.express.Operator的操作符</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinOperator</span> <span class="keyword">extends</span> <span class="title">Operator</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">executeInner</span><span class="params">(Object[] list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Object opdata1 = list[<span class="number">0</span>];</span><br><span class="line">		Object opdata2 = list[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(opdata1 <span class="keyword">instanceof</span> java.util.List)&#123;</span><br><span class="line">			((java.util.List)opdata1).add(opdata2);</span><br><span class="line">			<span class="keyword">return</span> opdata1;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			java.util.List result = <span class="keyword">new</span> java.util.ArrayList();</span><br><span class="line">			result.add(opdata1);</span><br><span class="line">			result.add(opdata2);</span><br><span class="line">			<span class="keyword">return</span> result;				</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="如何使用Operator"><a href="#如何使用Operator" class="headerlink" title="如何使用Operator"></a>如何使用Operator</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、addOperator</span></span><br><span class="line">ExpressRunner runner = <span class="keyword">new</span> ExpressRunner();</span><br><span class="line">DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">runner.addOperator(<span class="string">&quot;join&quot;</span>,<span class="keyword">new</span> JoinOperator());</span><br><span class="line">Object r = runner.execute(<span class="string">&quot;1 join 2 join 3&quot;</span>, context, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">System.out.println(r);</span><br><span class="line"><span class="comment">//返回结果  [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、replaceOperator</span></span><br><span class="line">ExpressRunner runner = <span class="keyword">new</span> ExpressRunner();</span><br><span class="line">DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">runner.replaceOperator(<span class="string">&quot;+&quot;</span>,<span class="keyword">new</span> JoinOperator());</span><br><span class="line">Object r = runner.execute(<span class="string">&quot;1 + 2 + 3&quot;</span>, context, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">System.out.println(r);</span><br><span class="line"><span class="comment">//返回结果  [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、addFunction</span></span><br><span class="line">ExpressRunner runner = <span class="keyword">new</span> ExpressRunner();</span><br><span class="line">DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">runner.addFunction(<span class="string">&quot;join&quot;</span>,<span class="keyword">new</span> JoinOperator());</span><br><span class="line">Object r = runner.execute(<span class="string">&quot;join(1,2,3)&quot;</span>, context, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">System.out.println(r);</span><br><span class="line"><span class="comment">//返回结果  [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="绑定java类或者对象的method"><a href="#绑定java类或者对象的method" class="headerlink" title="绑定java类或者对象的method"></a>绑定java类或者对象的method</h5><p>addFunctionOfClassMethod+addFunctionOfServiceMethod</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanExample</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upper</span><span class="params">(String abc)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> abc.toUpperCase();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">anyContains</span><span class="params">(String str, String searchStr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] s = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (searchStr.contains(c+<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runner.addFunctionOfClassMethod(<span class="string">&quot;取绝对值&quot;</span>, Math.class.getName(), <span class="string">&quot;abs&quot;</span>,</span><br><span class="line">				<span class="keyword">new</span> String[] &#123; <span class="string">&quot;double&quot;</span> &#125;, <span class="keyword">null</span>);</span><br><span class="line">runner.addFunctionOfClassMethod(<span class="string">&quot;转换为大写&quot;</span>, BeanExample.class.getName(),</span><br><span class="line">				<span class="string">&quot;upper&quot;</span>, <span class="keyword">new</span> String[] &#123; <span class="string">&quot;String&quot;</span> &#125;, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">runner.addFunctionOfServiceMethod(<span class="string">&quot;打印&quot;</span>, System.out, <span class="string">&quot;println&quot;</span>,<span class="keyword">new</span> String[] &#123; <span class="string">&quot;String&quot;</span> &#125;, <span class="keyword">null</span>);</span><br><span class="line">runner.addFunctionOfServiceMethod(<span class="string">&quot;contains&quot;</span>, <span class="keyword">new</span> BeanExample(), <span class="string">&quot;anyContains&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> Class[] &#123; String.class, String.class &#125;, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">String exp = “取绝对值(-<span class="number">100</span>);转换为大写(\<span class="string">&quot;hello world\&quot;);打印(\&quot;你好吗？\&quot;);contains(&quot;</span>helloworld<span class="string">&quot;,\&quot;aeiou\&quot;)”;</span></span><br><span class="line"><span class="string">runner.execute(exp, context, null, false, false);</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="macro-宏定义"><a href="#macro-宏定义" class="headerlink" title="macro 宏定义"></a>macro 宏定义</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runner.addMacro(<span class="string">&quot;计算平均成绩&quot;</span>, <span class="string">&quot;(语文+数学+英语)/3.0&quot;</span>);</span><br><span class="line">runner.addMacro(<span class="string">&quot;是否优秀&quot;</span>, <span class="string">&quot;计算平均成绩&gt;90&quot;</span>);</span><br><span class="line">IExpressContext&lt;String, Object&gt; context =<span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">context.put(<span class="string">&quot;语文&quot;</span>, <span class="number">88</span>);</span><br><span class="line">context.put(<span class="string">&quot;数学&quot;</span>, <span class="number">99</span>);</span><br><span class="line">context.put(<span class="string">&quot;英语&quot;</span>, <span class="number">95</span>);</span><br><span class="line">Object result = runner.execute(<span class="string">&quot;是否优秀&quot;</span>, context, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">System.out.println(r);</span><br><span class="line"><span class="comment">//返回结果true</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="编译脚本，查询外部需要定义的变量和函数。"><a href="#编译脚本，查询外部需要定义的变量和函数。" class="headerlink" title="编译脚本，查询外部需要定义的变量和函数。"></a>编译脚本，查询外部需要定义的变量和函数。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String express = <span class="string">&quot;int 平均分 = (语文+数学+英语+综合考试.科目2)/4.0;return 平均分&quot;</span>;</span><br><span class="line">ExpressRunner runner = <span class="keyword">new</span> ExpressRunner(<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">String[] names = runner.getOutVarNames(express);</span><br><span class="line"><span class="keyword">for</span>(String s:names)&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;var : &quot;</span> + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="keyword">var</span> : 数学</span><br><span class="line"><span class="keyword">var</span> : 综合考试</span><br><span class="line"><span class="keyword">var</span> : 英语</span><br><span class="line"><span class="keyword">var</span> : 语文</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>规则引擎</category>
      </categories>
      <tags>
        <tag>规则引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础1-数据类型</title>
    <url>/2020/03/24/Redis-%E5%9F%BA%E7%A1%801-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。<br>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。<br>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。<br>可以存储三种类型：1）字符串    2）整型    3）浮点型</p>
<h6 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h6><p>​    String是最常用的数据类型，普通的key/value都可以归为此类，value其实不仅是String，也可以是数字。<br>比如想知道什么时候封锁一个IP地址(访问超过几次)。INCRBY命令让这些变得很容易，通过原子递增保持计数。</p>
<hr>
<span id="more"></span>

<h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）**"></a>Hash（哈希）**</h4><p>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>
<h6 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h6><p>​    比如我们要存储一个用户的信息，包含以下信息：<br>​    用户ID，为查找的key<br>​    存储的value用户对象包含姓名name，年龄age，生日birthday 等信息</p>
<h6 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h6><p>​    Redis的Hash对应的Value内部实际就是一个HashMap，实际有两种不同的实现，<br>​    注意：如果成员较少时，Redis为了节省内存会采用类似一维数组方式存储，对应的value RedisObject的encoding为zipmap，当成员数量增大时会自动转成真正的HashMap，此时encoding为ht。</p>
<hr>
<h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<h6 id="应用场景：-2"><a href="#应用场景：-2" class="headerlink" title="应用场景："></a>应用场景：</h6><p>​    最新消息排行。<br>​    消息队列。利用Lists的push的操作，将任务存储在list中，然后工作线程再用pop操作将任务取出进行执行。</p>
<h6 id="实现方式：-1"><a href="#实现方式：-1" class="headerlink" title="实现方式："></a>实现方式：</h6><p>​    redis list的实现是一个双向链表，可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销，redis内部的很多实现，包括发送缓冲队列等也都用的是这个数据结构。</p>
<hr>
<h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<h6 id="应用场景：-3"><a href="#应用场景：-3" class="headerlink" title="应用场景："></a>应用场景：</h6><p>​    set类似list，特殊之处是set可以自动排重。<br>​    set还提供了某个成员是否在一个set内的接口，这个也是list没有的。<br>比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。</p>
<p>​    Redis还为集合提供了求交集、并集、差集等操作。</p>
<h6 id="实现方式：-2"><a href="#实现方式：-2" class="headerlink" title="实现方式："></a>实现方式：</h6><p>​    set内部实现是一个value永远为null的HashMap，实际就是通过hash的方式快速排重的</p>
<hr>
<h4 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>​zset的成员是唯一的,但分数(score)却可以重复。</p>
<h6 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h6><p>​    sorted set的使用场景与set类似，区别是set不是自动有序的，而sorted set可以通过用户额外提供一个优先级(score)的参数来为成员排序，并且是插入有序的，即自动排序。</p>
<p>​    比如:twitter 的public timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础2-String命令</title>
    <url>/2020/03/24/Redis-%E5%9F%BA%E7%A1%802-String%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="设置key值"><a href="#设置key值" class="headerlink" title="设置key值"></a>设置key值</h4><p>命令用于设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。</p>
<h6 id="命令-SET-KEY-NAME-VALUE"><a href="#命令-SET-KEY-NAME-VALUE" class="headerlink" title="命令:SET KEY_NAME VALUE"></a>命令:SET KEY_NAME VALUE</h6><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>在 Redis 2.6.12 以前版本， SET 命令总是返回 OK 。<br>从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。</p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><p>1）对不存在的键进行设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET key &quot;value&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET key</span><br><span class="line">&quot;value&quot;</span><br></pre></td></tr></table></figure>

<p>2)对已存在的键进行设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET key &quot;new-value&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET key</span><br><span class="line">&quot;new-value&quot;</span><br></pre></td></tr></table></figure>
<hr>
<span id="more"></span>

<h4 id="获取Key值"><a href="#获取Key值" class="headerlink" title="获取Key值"></a>获取Key值</h4><p>用于获取指定 key 的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。</p>
<h6 id="命令-GET-KEY-NAME"><a href="#命令-GET-KEY-NAME" class="headerlink" title="命令:GET KEY_NAME"></a>命令:GET KEY_NAME</h6><h6 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h6><p>​    返回 key 的值，如果 key 不存在时，返回 nil。 如果 key 不是字符串类型，那么返回一个错误。</p>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><p>1）对不存在的 key 或字符串类型 key 进行 GET</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET db</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET db redis</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET db</span></span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure>

<p>2)对不是字符串类型的 key 进行 GET</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DEL db</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LPUSH db redis mongodb mysql</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET db</span></span><br><span class="line">(error) ERR Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="GETRANGE-key-start-end-字符串值的子字符"><a href="#GETRANGE-key-start-end-字符串值的子字符" class="headerlink" title="GETRANGE key start end (字符串值的子字符)"></a>GETRANGE key start end (字符串值的子字符)</h4><p>用于获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。</p>
<h6 id="命令：GETRANGE-KEY-NAME-start-end"><a href="#命令：GETRANGE-KEY-NAME-start-end" class="headerlink" title="命令：GETRANGE KEY_NAME start end"></a>命令：GETRANGE KEY_NAME start end</h6><h6 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h6><p>​    截取得到的子字符串。</p>
<p>实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET mykey &quot;This is my test key&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GETRANGE mykey 0 3</span><br><span class="line">&quot;This&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; GETRANGE mykey 0 -1</span><br><span class="line">&quot;This is my test key&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="GETSET-key-value-值设为-value-，并返回-key-的旧值"><a href="#GETSET-key-value-值设为-value-，并返回-key-的旧值" class="headerlink" title="GETSET key value(值设为 value ，并返回 key 的旧值)"></a>GETSET key value(值设为 value ，并返回 key 的旧值)</h4><p>用于对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</p>
<h6 id="命令-GETBIT-KEY-NAME-OFFSET"><a href="#命令-GETBIT-KEY-NAME-OFFSET" class="headerlink" title="命令:GETBIT KEY_NAME OFFSET"></a>命令:GETBIT KEY_NAME OFFSET</h6><h6 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h6><p>字符串值指定偏移量上的位(bit)。<br>当偏移量 OFFSET 比字符串值的长度大，或者 key 不存在时，返回 0</p>
<hr>
<h4 id="GETBIT-key-offset-对-key-所储存的字符串值，获取指定偏移量上的位"><a href="#GETBIT-key-offset-对-key-所储存的字符串值，获取指定偏移量上的位" class="headerlink" title="GETBIT key offset(对 key 所储存的字符串值，获取指定偏移量上的位)"></a>GETBIT key offset(对 key 所储存的字符串值，获取指定偏移量上的位)</h4><p>用于对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</p>
<h6 id="命令-GETBIT-KEY-NAME-OFFSET-1"><a href="#命令-GETBIT-KEY-NAME-OFFSET-1" class="headerlink" title="命令:GETBIT KEY_NAME OFFSET"></a>命令:GETBIT KEY_NAME OFFSET</h6><h6 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h6><p>字符串值指定偏移量上的位(bit)。<br>当偏移量 OFFSET 比字符串值的长度大，或者 key 不存在时，返回 0 。</p>
<hr>
<h4 id="MGET-key1-key2-所有-一个或多个-给定-key-的值"><a href="#MGET-key1-key2-所有-一个或多个-给定-key-的值" class="headerlink" title="MGET key1 [key2..] (所有(一个或多个)给定 key 的值)"></a>MGET key1 [key2..] (所有(一个或多个)给定 key 的值)</h4><p>返回所有(一个或多个)给定 key 的值。 如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。</p>
<h6 id="命令-MGET-KEY1-KEY2-KEYN"><a href="#命令-MGET-KEY1-KEY2-KEYN" class="headerlink" title="命令: MGET KEY1 KEY2 .. KEYN"></a>命令: MGET KEY1 KEY2 .. KEYN</h6><h6 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h6><p>一个包含所有给定 key 的值的列表。</p>
<h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET key1 &quot;hello&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; SET key2 &quot;world&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; MGET key1 key2 someOtherKey</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SETBIT-key-offset-value-设置或清除指定偏移量上的位-bit"><a href="#SETBIT-key-offset-value-设置或清除指定偏移量上的位-bit" class="headerlink" title="SETBIT key offset value(设置或清除指定偏移量上的位(bit))"></a>SETBIT key offset value(设置或清除指定偏移量上的位(bit))</h4><p>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</p>
<h6 id="命令-Setbit-KEY-NAME-OFFSET"><a href="#命令-Setbit-KEY-NAME-OFFSET" class="headerlink" title="命令:Setbit KEY_NAME OFFSET"></a>命令:Setbit KEY_NAME OFFSET</h6><h6 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h6><p>指定偏移量原来储存的位。</p>
<hr>
<h4 id="SETEX-key-seconds-value-设置过期时间，秒"><a href="#SETEX-key-seconds-value-设置过期时间，秒" class="headerlink" title="SETEX key seconds value(设置过期时间，秒)"></a>SETEX key seconds value(设置过期时间，秒)</h4><p>为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。<br>命令：SETEX KEY_NAME TIMEOUT VALUE</p>
<h6 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h6><p>设置成功时返回 OK 。</p>
<h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SETEX mykey 60 redis</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">60</span><br><span class="line">redis 127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;redis</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SETNX-key-value-key-不存在时设置-key-的值"><a href="#SETNX-key-value-key-不存在时设置-key-的值" class="headerlink" title="SETNX key value(key 不存在时设置 key 的值)"></a>SETNX key value(key 不存在时设置 key 的值)</h4><p>命令在指定的 key 不存在时，为 key 设置指定的值。</p>
<h6 id="命令-SETNX-KEY-NAME-VALUE"><a href="#命令-SETNX-KEY-NAME-VALUE" class="headerlink" title="命令: SETNX KEY_NAME VALUE"></a>命令: SETNX KEY_NAME VALUE</h6><h6 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h6><p>设置成功，返回 1 。 设置失败，返回 0 。</p>
<h6 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXISTS job                <span class="comment"># job 不存在</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SETNX job <span class="string">&quot;programmer&quot;</span>    <span class="comment"># job 设置成功</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SETNX job <span class="string">&quot;code-farmer&quot;</span>   <span class="comment"># 尝试覆盖 job ，失败</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET job                   <span class="comment"># 没有被覆盖</span></span></span><br><span class="line">&quot;programmer&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SETRANGE-key-offset-value-用-value-参数覆写给定-key-所储存的字符串值，从偏移量-offset-开始。"><a href="#SETRANGE-key-offset-value-用-value-参数覆写给定-key-所储存的字符串值，从偏移量-offset-开始。" class="headerlink" title="SETRANGE key offset value(用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。)"></a>SETRANGE key offset value(用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。)</h4><p>命令用指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始。</p>
<h6 id="命令：SETRANGE-KEY-NAME-OFFSET-VALUE"><a href="#命令：SETRANGE-KEY-NAME-OFFSET-VALUE" class="headerlink" title="命令：SETRANGE KEY_NAME OFFSET VALUE"></a>命令：SETRANGE KEY_NAME OFFSET VALUE</h6><h6 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h6><p>被修改后的字符串长度。</p>
<h6 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET key1 &quot;Hello World&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; SETRANGE key1 6 &quot;Redis&quot;</span><br><span class="line">(integer) 11</span><br><span class="line">redis 127.0.0.1:6379&gt; GET key1</span><br><span class="line">&quot;Hello Redis&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="STRLEN-key-key-所储存的字符串值的长度"><a href="#STRLEN-key-key-所储存的字符串值的长度" class="headerlink" title="STRLEN key(key 所储存的字符串值的长度)"></a>STRLEN key(key 所储存的字符串值的长度)</h4><p>用于获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。</p>
<h6 id="命令：STRLEN-KEY-NAME"><a href="#命令：STRLEN-KEY-NAME" class="headerlink" title="命令：STRLEN KEY_NAME"></a>命令：STRLEN KEY_NAME</h6><h6 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h6><p>字符串值的长度。 当 key 不存在时，返回 0。</p>
<h6 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h6><p>获取字符串的长度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET mykey <span class="string">&quot;Hello world&quot;</span></span> </span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> STRLEN mykey <span class="comment">#获取字符串的长度</span></span></span><br><span class="line">(integer) 11</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> STRLEN nonexisting <span class="comment">#不存在的 key 长度为 0</span></span></span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="MSET-key-value-key-value-同时设置一个或多个-key-value-对"><a href="#MSET-key-value-key-value-同时设置一个或多个-key-value-对" class="headerlink" title="MSET key value key value . . . (同时设置一个或多个 key-value 对)"></a>MSET key value key value . . . (同时设置一个或多个 key-value 对)</h4><p>命令用于同时设置一个或多个 key-value 对。</p>
<h6 id="命令：MSET-key1-value1-key2-value2-keyN-valueN"><a href="#命令：MSET-key1-value1-key2-value2-keyN-valueN" class="headerlink" title="命令：MSET key1 value1 key2 value2 .. keyN valueN"></a>命令：MSET key1 value1 key2 value2 .. keyN valueN</h6><h6 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h6><p>总是返回 OK 。</p>
<h6 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; MSET key1 &quot;Hello&quot; key2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET key1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; GET key2</span><br><span class="line">1) &quot;World&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="MSETNX-key-value-key-value-…-同时设置一个或多个对，当且仅当所有给定-key-都不存在。"><a href="#MSETNX-key-value-key-value-…-同时设置一个或多个对，当且仅当所有给定-key-都不存在。" class="headerlink" title="MSETNX key value key value …(同时设置一个或多个对，当且仅当所有给定 key 都不存在。)"></a>MSETNX key value key value …(同时设置一个或多个对，当且仅当所有给定 key 都不存在。)</h4><p>命令用于同时设置一个或多个 key-value 对。</p>
<h6 id="命令：MSETNX-key1-value1-key2-value2-keyN-valueN"><a href="#命令：MSETNX-key1-value1-key2-value2-keyN-valueN" class="headerlink" title="命令：MSETNX key1 value1 key2 value2 .. keyN valueN"></a>命令：MSETNX key1 value1 key2 value2 .. keyN valueN</h6><h6 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h6><p>当所有 key 都成功设置，返回 1 。 如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。</p>
<h6 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">对不存在的 key 进行 MSETNX</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> MSETNX rmdbs <span class="string">&quot;MySQL&quot;</span> nosql <span class="string">&quot;MongoDB&quot;</span> key-value-store <span class="string">&quot;redis&quot;</span></span> </span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> MGET rmdbs nosql key-value-store</span> </span><br><span class="line">1) &quot;MySQL&quot;</span><br><span class="line">2) &quot;MongoDB&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MSET 的给定 key 当中有已存在的 key</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> MSETNX rmdbs <span class="string">&quot;Sqlite&quot;</span> language <span class="string">&quot;python&quot;</span>  <span class="comment"># rmdbs 键已经存在，操作失败</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXISTS language                       <span class="comment"># 因为 MSET 是原子性操作，language 没有被设置</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET rmdbs                             <span class="comment"># rmdbs 也没有被修改</span></span></span><br><span class="line">&quot;MySQL&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="PSETEX-key-milliseconds-value-设置过期时间，毫秒"><a href="#PSETEX-key-milliseconds-value-设置过期时间，毫秒" class="headerlink" title="PSETEX key milliseconds value(设置过期时间，毫秒)"></a>PSETEX key milliseconds value(设置过期时间，毫秒)</h4><p>命令以毫秒为单位设置 key 的生存时间。</p>
<h6 id="命令：PSETEX-key1-EXPIRY-IN-MILLISECONDS-value1"><a href="#命令：PSETEX-key1-EXPIRY-IN-MILLISECONDS-value1" class="headerlink" title="命令：PSETEX key1 EXPIRY_IN_MILLISECONDS value1"></a>命令：PSETEX key1 EXPIRY_IN_MILLISECONDS value1</h6><h6 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h6><p>设置成功时返回 OK 。</p>
<h6 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PSETEX mykey 1000 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; PTTL mykey</span><br><span class="line">999</span><br><span class="line">redis 127.0.0.1:6379&gt; GET mykey</span><br><span class="line">1) &quot;Hello&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="INCR-key-将-key-中储存的数字值增一。"><a href="#INCR-key-将-key-中储存的数字值增一。" class="headerlink" title="INCR key(将 key 中储存的数字值增一。)"></a>INCR key(将 key 中储存的数字值增一。)</h4><p>Incr 命令将 key 中储存的数字值增一。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>本操作的值限制在 64 位(bit)有符号数字表示之内。</p>
<h6 id="命令：INCR-KEY-NAME"><a href="#命令：INCR-KEY-NAME" class="headerlink" title="命令：INCR KEY_NAME"></a>命令：INCR KEY_NAME</h6><h6 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h6><p>执行 INCR 命令之后 key 的值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET page_view 20</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCR page_view</span></span><br><span class="line">(integer) 21</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET page_view    <span class="comment"># 数字值在 Redis 中以字符串的形式保存</span></span></span><br><span class="line">&quot;21&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="INCRBY-key-increment（储存的值加上给定的增量值）"><a href="#INCRBY-key-increment（储存的值加上给定的增量值）" class="headerlink" title="INCRBY key increment（储存的值加上给定的增量值）"></a>INCRBY key increment（储存的值加上给定的增量值）</h4><p>Incrby 命令将 key 中储存的数字加上指定的增量值。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>本操作的值限制在 64 位(bit)有符号数字表示之内。</p>
<h6 id="命令：INCRBY-KEY-NAME-INCR-AMOUNT"><a href="#命令：INCRBY-KEY-NAME-INCR-AMOUNT" class="headerlink" title="命令：INCRBY KEY_NAME INCR_AMOUNT"></a>命令：INCRBY KEY_NAME INCR_AMOUNT</h6><h6 id="返回值-15"><a href="#返回值-15" class="headerlink" title="返回值"></a>返回值</h6><p>加上指定的增量值之后， key 的值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> key 存在且是数字值</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET rank 50</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBY rank 20</span></span><br><span class="line">(integer) 70</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET rank</span></span><br><span class="line">&quot;70&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> key 不存在时</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXISTS counter</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBY counter 30</span></span><br><span class="line">(integer) 30</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET counter</span></span><br><span class="line">&quot;30&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> key 不是数字值时</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET book <span class="string">&quot;long long ago...&quot;</span></span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBY book 200</span></span><br><span class="line">(error) ERR value is not an integer or out of range</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="INCRBYFLOAT-key-increment-值加上给定的浮点增量值"><a href="#INCRBYFLOAT-key-increment-值加上给定的浮点增量值" class="headerlink" title="INCRBYFLOAT key increment(值加上给定的浮点增量值)"></a>INCRBYFLOAT key increment(值加上给定的浮点增量值)</h4><p>为 key 中所储存的值加上指定的浮点数增量值。<br>如果 key 不存在，那么 INCRBYFLOAT 会先将 key 的值设为 0 ，再执行加法操作。</p>
<h6 id="命令：INCRBYFLOAT-KEY-NAME-INCR-AMOUNT"><a href="#命令：INCRBYFLOAT-KEY-NAME-INCR-AMOUNT" class="headerlink" title="命令：INCRBYFLOAT KEY_NAME INCR_AMOUNT"></a>命令：INCRBYFLOAT KEY_NAME INCR_AMOUNT</h6><h6 id="返回值-16"><a href="#返回值-16" class="headerlink" title="返回值"></a>返回值</h6><p>执行命令之后 key 的值。</p>
<h6 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 值和增量都不是指数符号</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET mykey 10.50</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBYFLOAT mykey 0.1</span></span><br><span class="line">&quot;10.6&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 值和增量都是指数符号</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET mykey 314e-2</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET mykey                <span class="comment"># 用 SET 设置的值可以是指数符号</span></span></span><br><span class="line">&quot;314e-2&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBYFLOAT mykey 0      <span class="comment"># 但执行 INCRBYFLOAT 之后格式会被改成非指数符号</span></span></span><br><span class="line">&quot;3.14&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以对整数类型执行</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET mykey 3</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBYFLOAT mykey 1.1</span></span><br><span class="line">&quot;4.1&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后跟的 0 会被移除</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET mykey 3.0</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET mykey                                    <span class="comment"># SET 设置的值小数部分可以是 0</span></span></span><br><span class="line">&quot;3.0&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCRBYFLOAT mykey 1.000000000000000000000    <span class="comment"># 但 INCRBYFLOAT 会将无用的 0 忽略掉，有需要的话，将浮点变为整数</span></span></span><br><span class="line">&quot;4&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET mykey</span></span><br><span class="line">&quot;4&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="DECR-key-将-key-中储存的数字值减一"><a href="#DECR-key-将-key-中储存的数字值减一" class="headerlink" title="DECR key(将 key 中储存的数字值减一)"></a>DECR key(将 key 中储存的数字值减一)</h4><p>命令将 key 中储存的数字值减一。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>本操作的值限制在 64 位(bit)有符号数字表示之内。</p>
<h6 id="命令：DECR-KEY-NAME"><a href="#命令：DECR-KEY-NAME" class="headerlink" title="命令：DECR KEY_NAME"></a>命令：DECR KEY_NAME</h6><h6 id="返回值-17"><a href="#返回值-17" class="headerlink" title="返回值"></a>返回值</h6><p>执行命令之后 key 的值。</p>
<h6 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对存在的数字值 key 进行 DECR</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET failure_times 10</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DECR failure_times</span></span><br><span class="line">(integer) 9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对不存在的 key 值进行 DECR</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXISTS count</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DECR count</span></span><br><span class="line">(integer) -1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对存在但不是数值的 key 进行 DECR</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET company YOUR_CODE_SUCKS.LLC</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DECR company</span></span><br><span class="line">(error) ERR value is not an integer or out of range</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="DECRBY-key-decrement-值减去给定的减量值"><a href="#DECRBY-key-decrement-值减去给定的减量值" class="headerlink" title="DECRBY key decrement(值减去给定的减量值)"></a>DECRBY key decrement(值减去给定的减量值)</h4><p>命令将 key 所储存的值减去指定的减量值。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>本操作的值限制在 64 位(bit)有符号数字表示之内。</p>
<h6 id="命令：DECRBY-KEY-NAME-DECREMENT-AMOUNT"><a href="#命令：DECRBY-KEY-NAME-DECREMENT-AMOUNT" class="headerlink" title="命令：DECRBY KEY_NAME DECREMENT_AMOUNT"></a>命令：DECRBY KEY_NAME DECREMENT_AMOUNT</h6><h6 id="返回值-18"><a href="#返回值-18" class="headerlink" title="返回值"></a>返回值</h6><p>减去指定减量值之后， key 的值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对已存在的 key 进行 DECRBY</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET count 100</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DECRBY count 20</span></span><br><span class="line">(integer) 80</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对不存在的 key 进行DECRBY</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXISTS pages</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DECRBY pages 10</span></span><br><span class="line">(integer) -10</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="APPEND-key-value-在原来值后添加字符串"><a href="#APPEND-key-value-在原来值后添加字符串" class="headerlink" title="APPEND key value(在原来值后添加字符串)"></a>APPEND key value(在原来值后添加字符串)</h4><p>用于为指定的 key 追加值。<br>如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。<br>如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。</p>
<h6 id="命令-APPEND-KEY-NAME-NEW-VALUE"><a href="#命令-APPEND-KEY-NAME-NEW-VALUE" class="headerlink" title="命令: APPEND KEY_NAME NEW_VALUE"></a>命令: APPEND KEY_NAME NEW_VALUE</h6><h6 id="返回值-19"><a href="#返回值-19" class="headerlink" title="返回值"></a>返回值</h6><p>追加指定值之后， key 中字符串的长度。</p>
<h6 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对不存在的 key 执行 APPEND</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXISTS myphone               <span class="comment"># 确保 myphone 不存在</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> APPEND myphone <span class="string">&quot;nokia&quot;</span>       <span class="comment"># 对不存在的 key 进行 APPEND ，等同于 SET myphone &quot;nokia&quot;</span></span></span><br><span class="line">(integer) 5                         # 字符长度</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对已存在的字符串进行 APPEND</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> APPEND myphone <span class="string">&quot; - 1110&quot;</span>     <span class="comment"># 长度从 5 个字符增加到 12 个字符</span></span></span><br><span class="line">(integer) 12</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET myphone</span></span><br><span class="line">&quot;nokia - 1110&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础4-Hash命令</title>
    <url>/2020/03/24/Redis-%E5%9F%BA%E7%A1%804-Hash%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="HDEL-key-field1-field2-删除一个或多个"><a href="#HDEL-key-field1-field2-删除一个或多个" class="headerlink" title="HDEL key field1 field2(删除一个或多个)"></a>HDEL key field1 field2(删除一个或多个)</h4><p>命令用于删除哈希表 key 中的一个或多个指定字段，不存在的字段将被忽略。</p>
<h6 id="命令-HDEL-KEY-NAME-FIELD1-FIELDN"><a href="#命令-HDEL-KEY-NAME-FIELD1-FIELDN" class="headerlink" title="命令:HDEL KEY_NAME FIELD1.. FIELDN"></a>命令:HDEL KEY_NAME FIELD1.. FIELDN</h6><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>被成功删除字段的数量，不包括被忽略的字段。</p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HDEL myhash field1</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HDEL myhash field2</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<span id="more"></span>

<h4 id="HEXISTS-key-field-是否存在"><a href="#HEXISTS-key-field-是否存在" class="headerlink" title="HEXISTS key field (是否存在)"></a>HEXISTS key field (是否存在)</h4><p>命令用于查看哈希表的指定字段是否存在。</p>
<h6 id="命令-HEXISTS-KEY-NAME-FIELD-NAME"><a href="#命令-HEXISTS-KEY-NAME-FIELD-NAME" class="headerlink" title="命令:HEXISTS KEY_NAME FIELD_NAME"></a>命令:HEXISTS KEY_NAME FIELD_NAME</h6><h6 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h6><p>如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。</p>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HEXISTS myhash field1</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HEXISTS myhash field2</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HGET-key-field-获取值"><a href="#HGET-key-field-获取值" class="headerlink" title="HGET key field (获取值)"></a>HGET key field (获取值)</h4><p>命令用于返回哈希表中指定字段的值。</p>
<h6 id="命令-HGET-KEY-NAME-FIELD-NAME"><a href="#命令-HGET-KEY-NAME-FIELD-NAME" class="headerlink" title="命令:HGET KEY_NAME FIELD_NAME"></a>命令:HGET KEY_NAME FIELD_NAME</h6><h6 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h6><p>返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对不存在的键进行设置</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET site redis redis.com</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HGET site redis</span></span><br><span class="line">&quot;redis.com&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字段不存在</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HGET site mysql</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HGETALL-key-获取所有字段和值"><a href="#HGETALL-key-获取所有字段和值" class="headerlink" title="HGETALL key(获取所有字段和值)"></a>HGETALL key(获取所有字段和值)</h4><p>命令用于返回哈希表中，所有的字段和值。<br>在返回值里，紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍。</p>
<h6 id="命令-HGETALL-KEY-NAME"><a href="#命令-HGETALL-KEY-NAME" class="headerlink" title="命令:HGETALL KEY_NAME"></a>命令:HGETALL KEY_NAME</h6><h6 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h6><p>以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET myhash field1 <span class="string">&quot;Hello&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET myhash field2 <span class="string">&quot;World&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HGETALL myhash</span></span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;World&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HINCRBY-key-field-increment-字段的整数值加上增量-increment"><a href="#HINCRBY-key-field-increment-字段的整数值加上增量-increment" class="headerlink" title="HINCRBY key field increment (字段的整数值加上增量 increment)"></a>HINCRBY key field increment (字段的整数值加上增量 increment)</h4><p>命令用于为哈希表中的字段值加上指定增量值。<br>增量也可以为负数，相当于对指定字段进行减法操作。<br>如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。<br>如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。<br>对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。<br>本操作的值被限制在 64 位(bit)有符号数字表示之内。</p>
<h6 id="命令-HINCRBY-KEY-NAME-FIELD-NAME-INCR-BY-NUMBER"><a href="#命令-HINCRBY-KEY-NAME-FIELD-NAME-INCR-BY-NUMBER" class="headerlink" title="命令:HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER"></a>命令:HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER</h6><h6 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h6><p>执行 HINCRBY 命令之后，哈希表中字段的值。</p>
<h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET myhash field 5</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBY myhash field 1</span></span><br><span class="line">(integer) 6</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBY myhash field -1</span></span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBY myhash field -10</span></span><br><span class="line">(integer) -5</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HINCRBYFLOAT-key-field-increment-字段的浮点数值加上增量-increment"><a href="#HINCRBYFLOAT-key-field-increment-字段的浮点数值加上增量-increment" class="headerlink" title="HINCRBYFLOAT key field increment(字段的浮点数值加上增量 increment )"></a>HINCRBYFLOAT key field increment(字段的浮点数值加上增量 increment )</h4><p>命令用于为哈希表中的字段值加上指定浮点数增量值。<br>如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。</p>
<h6 id="命令-HINCRBYFLOAT-key-field-increment"><a href="#命令-HINCRBYFLOAT-key-field-increment" class="headerlink" title="命令:HINCRBYFLOAT key field increment"></a>命令:HINCRBYFLOAT key field increment</h6><h6 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h6><p>执行 Hincrbyfloat 命令之后，哈希表中字段的值。</p>
<h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET mykey field 10.50</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBYFLOAT mykey field 0.1</span></span><br><span class="line">&quot;10.6&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBYFLOAT mykey field -5</span></span><br><span class="line">&quot;5.6&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET mykey field 5.0e3</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBYFLOAT mykey field 2.0e2</span></span><br><span class="line">&quot;5200&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HKEYS-key（获取所有哈希表中的字段）"><a href="#HKEYS-key（获取所有哈希表中的字段）" class="headerlink" title="HKEYS key（获取所有哈希表中的字段）"></a>HKEYS key（获取所有哈希表中的字段）</h4><p>命令用于获取哈希表中的所有域（field）。</p>
<h6 id="命令-HKEYS-key"><a href="#命令-HKEYS-key" class="headerlink" title="命令:HKEYS key"></a>命令:HKEYS key</h6><h6 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h6><p>包含哈希表中所有域（field）列表。 当 key 不存在时，返回一个空列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HKEYS myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field2&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HLEN-key-获取哈希表中字段的数量"><a href="#HLEN-key-获取哈希表中字段的数量" class="headerlink" title="HLEN key(获取哈希表中字段的数量)"></a>HLEN key(获取哈希表中字段的数量)</h4><p>命令用于获取哈希表中字段的数量。</p>
<h6 id="命令：HLEN-key"><a href="#命令：HLEN-key" class="headerlink" title="命令：HLEN key"></a>命令：HLEN key</h6><h6 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h6><p>哈希表中字段的数量。 当 key 不存在时，返回 0 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HLEN myhash</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HMGET-key-field1-field2-获取所有给定字段的值"><a href="#HMGET-key-field1-field2-获取所有给定字段的值" class="headerlink" title="HMGET key field1 field2(获取所有给定字段的值)"></a>HMGET key field1 field2(获取所有给定字段的值)</h4><p>命令用于返回哈希表中，一个或多个给定字段的值。<br>如果指定的字段不存在于哈希表，那么返回一个 nil 值。</p>
<h6 id="命令-HMGET-KEY-NAME-FIELD1…FIELDN"><a href="#命令-HMGET-KEY-NAME-FIELD1…FIELDN" class="headerlink" title="命令: HMGET KEY_NAME FIELD1…FIELDN"></a>命令: HMGET KEY_NAME FIELD1…FIELDN</h6><h6 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h6><p>一个包含多个给定字段关联值的表，表值的排列顺序和指定字段的请求顺序一样。</p>
<h6 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HMGET myhash field1 field2 nofield</span><br><span class="line">1) &quot;foo&quot;</span><br><span class="line">2) &quot;bar&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HMSET-key-field1-value1-field2-value2-同时将多个-field-value-域-值-对设置到哈希表-key-中。"><a href="#HMSET-key-field1-value1-field2-value2-同时将多个-field-value-域-值-对设置到哈希表-key-中。" class="headerlink" title="HMSET key field1 value1 field2 value2 (同时将多个 field-value (域-值)对设置到哈希表 key 中。)"></a>HMSET key field1 value1 field2 value2 (同时将多个 field-value (域-值)对设置到哈希表 key 中。)</h4><p>命令用于为哈希表中的字段赋值 。<br>如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。<br>如果字段已经存在于哈希表中，旧值将被覆盖。</p>
<h6 id="命令：HSET-KEY-NAME-FIELD-VALUE"><a href="#命令：HSET-KEY-NAME-FIELD-VALUE" class="headerlink" title="命令：HSET KEY_NAME FIELD VALUE"></a>命令：HSET KEY_NAME FIELD VALUE</h6><h6 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h6><p>如果字段是哈希表中的一个新建字段，并且值设置成功，返回 1 。 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回 0 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;foo&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET website google &quot;www.g.cn&quot;       # 设置一个新域</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt;HSET website google &quot;www.google.com&quot; # 覆盖一个旧域</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HSET-key-field-value（-key-中的字段-field-的值设为-value）"><a href="#HSET-key-field-value（-key-中的字段-field-的值设为-value）" class="headerlink" title="HSET key field value（ key 中的字段 field 的值设为 value）"></a>HSET key field value（ key 中的字段 field 的值设为 value）</h4><p>命令用于为哈希表中的字段赋值 。<br>如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。<br>如果字段已经存在于哈希表中，旧值将被覆盖。</p>
<h6 id="命令-HSET-KEY-NAME-FIELD-VALUE"><a href="#命令-HSET-KEY-NAME-FIELD-VALUE" class="headerlink" title="命令:HSET KEY_NAME FIELD VALUE"></a>命令:HSET KEY_NAME FIELD VALUE</h6><h6 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h6><p>如果字段是哈希表中的一个新建字段，并且值设置成功，返回 1 。 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回 0 。</p>
<h6 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;foo&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET website google &quot;www.g.cn&quot;       # 设置一个新域</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt;HSET website google &quot;www.google.com&quot; # 覆盖一个旧域</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HSETNX-key-field-value-字段-field-不存在时，设置哈希表字段的值。"><a href="#HSETNX-key-field-value-字段-field-不存在时，设置哈希表字段的值。" class="headerlink" title="HSETNX key field value(字段 field 不存在时，设置哈希表字段的值。)"></a>HSETNX key field value(字段 field 不存在时，设置哈希表字段的值。)</h4><p>命令用于为哈希表中不存在的的字段赋值 。<br>如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。<br>如果字段已经存在于哈希表中，操作无效。<br>如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。</p>
<h6 id="命令-HSETNX-KEY-NAME-FIELD-VALUE"><a href="#命令-HSETNX-KEY-NAME-FIELD-VALUE" class="headerlink" title="命令:HSETNX KEY_NAME FIELD VALUE"></a>命令:HSETNX KEY_NAME FIELD VALUE</h6><h6 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h6><p>设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0 。</p>
<h6 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSETNX myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HSETNX myhash field1 &quot;bar&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;foo&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; HSETNX nosql key-value-store redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HSETNX nosql key-value-store redis       # 操作无效， key-value-store 已存在</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="HVALS-key-获取哈希表中所有值"><a href="#HVALS-key-获取哈希表中所有值" class="headerlink" title="HVALS key(获取哈希表中所有值)"></a>HVALS key(获取哈希表中所有值)</h4><p>命令返回哈希表所有域(field)的值。</p>
<h6 id="命令-HVALS-KEY-NAME-FIELD-VALUE"><a href="#命令-HVALS-KEY-NAME-FIELD-VALUE" class="headerlink" title="命令: HVALS KEY_NAME FIELD VALUE"></a>命令: HVALS KEY_NAME FIELD VALUE</h6><h6 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h6><p>一个包含哈希表中所有域(field)值的列表。 当 key 不存在时，返回一个空表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HSET myhash field2 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; HVALS myhash</span><br><span class="line">1) &quot;foo&quot;</span><br><span class="line">2) &quot;bar&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 空哈希表/不存在的key</span></span><br><span class="line">redis 127.0.0.1:6379&gt; EXISTS not_exists</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; HVALS not_exists</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础5-Set命令</title>
    <url>/2020/03/25/Redis-%E5%9F%BA%E7%A1%805-Set%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="SADD-key-member1-member2-（向集合添加一个或多个成员）"><a href="#SADD-key-member1-member2-（向集合添加一个或多个成员）" class="headerlink" title="SADD key member1 [member2]（向集合添加一个或多个成员）"></a>SADD key member1 [member2]（向集合添加一个或多个成员）</h4><p>命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。<br>假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。<br>当集合 key 不是集合类型时，返回一个错误。</p>
<h6 id="命令-SADD-KEY-NAME-VALUE1-VALUEN"><a href="#命令-SADD-KEY-NAME-VALUE1-VALUEN" class="headerlink" title="命令: SADD KEY_NAME VALUE1..VALUEN"></a>命令: SADD KEY_NAME VALUE1..VALUEN</h6><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>被添加到集合中的新元素的数量，不包括被忽略的元素。</p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<span id="more"></span>

<h4 id="SCARD-key-集合成员数"><a href="#SCARD-key-集合成员数" class="headerlink" title="SCARD key(集合成员数)"></a>SCARD key(集合成员数)</h4><p>命令返回集合中元素的数量。</p>
<h6 id="命令-SCARD-KEY-NAME"><a href="#命令-SCARD-KEY-NAME" class="headerlink" title="命令: SCARD KEY_NAME"></a>命令: SCARD KEY_NAME</h6><h6 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h6><p>集合的数量。 当集合 key 不存在时，返回 0 。</p>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; SCARD myset</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SDIFF-key1-key2-（返回给定所有集合的差集）"><a href="#SDIFF-key1-key2-（返回给定所有集合的差集）" class="headerlink" title="SDIFF key1 [key2] （返回给定所有集合的差集）"></a>SDIFF key1 [key2] （返回给定所有集合的差集）</h4><p>命令将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖。<br>key1 = {a,b,c,d}<br>key2 = {c}<br>key3 = {a,c,e}<br>SDIFF key1 key2 key3 = {b,d}</p>
<h6 id="命令-SDIFFSTORE-DESTINATION-KEY-KEY1-KEYN"><a href="#命令-SDIFFSTORE-DESTINATION-KEY-KEY1-KEYN" class="headerlink" title="命令:SDIFFSTORE DESTINATION_KEY KEY1..KEYN"></a>命令:SDIFFSTORE DESTINATION_KEY KEY1..KEYN</h6><h6 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h6><p>结果集中的元素数量。</p>
<h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SDIFFSTORE destset myset myset2</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) &quot;foo&quot;</span><br><span class="line">2) &quot;bar&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SDIFFSTORE-destination-key1-key2-（返回给定所有集合的差集并存储在-destination-中）"><a href="#SDIFFSTORE-destination-key1-key2-（返回给定所有集合的差集并存储在-destination-中）" class="headerlink" title="SDIFFSTORE destination key1 [key2] （返回给定所有集合的差集并存储在 destination 中）"></a>SDIFFSTORE destination key1 [key2] （返回给定所有集合的差集并存储在 destination 中）</h4><p>命令移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<h6 id="命令BLPOP-LIST1-LIST2-LISTN-TIMEOUT"><a href="#命令BLPOP-LIST1-LIST2-LISTN-TIMEOUT" class="headerlink" title="命令BLPOP LIST1 LIST2 .. LISTN TIMEOUT"></a>命令BLPOP LIST1 LIST2 .. LISTN TIMEOUT</h6><h6 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h6><p>如果列表为空，返回一个 nil 。<br>否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。</p>
<h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; BLPOP list1 100</span><br><span class="line"></span><br><span class="line">在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回 nil 。</span><br><span class="line">(nil)</span><br><span class="line">(100.06s)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SINTER-key1-key2-（返回给定所有集合的交集）"><a href="#SINTER-key1-key2-（返回给定所有集合的交集）" class="headerlink" title="SINTER key1 [key2] （返回给定所有集合的交集）"></a>SINTER key1 [key2] （返回给定所有集合的交集）</h4><p>命令返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</p>
<h6 id="命令：SINTER-KEY-KEY1-KEYN"><a href="#命令：SINTER-KEY-KEY1-KEYN" class="headerlink" title="命令：SINTER KEY KEY1..KEYN"></a>命令：SINTER KEY KEY1..KEYN</h6><h6 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h6><p>交集成员的列表。</p>
<h6 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SINTER myset myset2</span><br><span class="line">1) &quot;hello&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SINTERSTORE-destination-key1-key2-（返回给定所有集合的交集并存储在-destination-中）"><a href="#SINTERSTORE-destination-key1-key2-（返回给定所有集合的交集并存储在-destination-中）" class="headerlink" title="SINTERSTORE destination key1 [key2] （返回给定所有集合的交集并存储在 destination 中）"></a>SINTERSTORE destination key1 [key2] （返回给定所有集合的交集并存储在 destination 中）</h4><p>命令将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。</p>
<h6 id="命令：SINTERSTORE-DESTINATION-KEY-KEY-KEY1-KEYN"><a href="#命令：SINTERSTORE-DESTINATION-KEY-KEY-KEY1-KEYN" class="headerlink" title="命令：SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN"></a>命令：SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN</h6><h6 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h6><p>返回存储交集的集合的元素数量。</p>
<h6 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SINTERSTORE myset myset1 myset2</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;hello&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SISMEMBER-key-member-判断-member-元素是否是集合-key-的成员"><a href="#SISMEMBER-key-member-判断-member-元素是否是集合-key-的成员" class="headerlink" title="SISMEMBER key member (判断 member 元素是否是集合 key 的成员)"></a>SISMEMBER key member (判断 member 元素是否是集合 key 的成员)</h4><p>命令判断成员元素是否是集合的成员。</p>
<h6 id="命令：SISMEMBER-KEY-VALUE"><a href="#命令：SISMEMBER-KEY-VALUE" class="headerlink" title="命令：SISMEMBER KEY VALUE"></a>命令：SISMEMBER KEY VALUE</h6><h6 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h6><p>如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0 。</p>
<h6 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SISMEMBER myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SISMEMBER myset1 &quot;world&quot;</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SMEMBERS-key-返回集合中的所有成员"><a href="#SMEMBERS-key-返回集合中的所有成员" class="headerlink" title="SMEMBERS key (返回集合中的所有成员)"></a>SMEMBERS key (返回集合中的所有成员)</h4><p>命令返回集合中的所有的成员。 不存在的集合 key 被视为空集合。</p>
<h6 id="命令：SMEMBERS-key"><a href="#命令：SMEMBERS-key" class="headerlink" title="命令：SMEMBERS key"></a>命令：SMEMBERS key</h6><h6 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h6><p>集合中的所有成员。</p>
<h6 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset1</span><br><span class="line">1) &quot;World&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SMOVE-source-destination-member-（将-member-元素从-source-集合移动到-destination-集合）"><a href="#SMOVE-source-destination-member-（将-member-元素从-source-集合移动到-destination-集合）" class="headerlink" title="SMOVE source destination member （将 member 元素从 source 集合移动到 destination 集合）"></a>SMOVE source destination member （将 member 元素从 source 集合移动到 destination 集合）</h4><p>命令将指定成员 member 元素从 source 集合移动到 destination 集合。<br>SMOVE 是原子性操作。<br>如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。<br>当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。<br>当 source 或 destination 不是集合类型时，返回一个错误。</p>
<h6 id="命令：-SMOVE-SOURCE-DESTINATION-MEMBER"><a href="#命令：-SMOVE-SOURCE-DESTINATION-MEMBER" class="headerlink" title="命令： SMOVE SOURCE DESTINATION MEMBER"></a>命令： SMOVE SOURCE DESTINATION MEMBER</h6><h6 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h6><p>如果成员元素被成功移除，返回 1 。 如果成员元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。</p>
<h6 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SMOVE myset1 myset2 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset1</span><br><span class="line">1) &quot;World&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) &quot;foo&quot;</span><br><span class="line">2) &quot;bar&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SPOP-key-移除并返回集合中的一个随机元素"><a href="#SPOP-key-移除并返回集合中的一个随机元素" class="headerlink" title="SPOP key (移除并返回集合中的一个随机元素)"></a>SPOP key (移除并返回集合中的一个随机元素)</h4><p>命令用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。<br>该命令类似 <a href="https://www.runoob.com/redis/sets-srandmember.html">Srandmember</a> 命令，但 SPOP 将随机元素从集合中移除并返回，而 Srandmember 则仅仅返回随机元素，而不对集合进行任何改动。</p>
<h6 id="命令：SPOP-key-count"><a href="#命令：SPOP-key-count" class="headerlink" title="命令：SPOP key [count]"></a>命令：SPOP key [count]</h6><h6 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h6><p>被移除的随机元素。 当集合不存在或是空集时，返回 nil 。</p>
<p>实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;one&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;two&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;three&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SPOP myset</span></span><br><span class="line">&quot;one&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SMEMBERS myset</span></span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;four&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;five&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SPOP myset 3</span></span><br><span class="line">1) &quot;five&quot;</span><br><span class="line">2) &quot;four&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SMEMBERS myset</span></span><br><span class="line">1) &quot;three&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SRANDMEMBER-key-count-返回集合中一个或多个随机数"><a href="#SRANDMEMBER-key-count-返回集合中一个或多个随机数" class="headerlink" title="SRANDMEMBER key [count] (返回集合中一个或多个随机数)"></a>SRANDMEMBER key [count] (返回集合中一个或多个随机数)</h4><p>命令用于返回集合中的一个随机元素。<br>从 Redis 2.6 版本开始， Srandmember 命令接受可选的 count 参数：</p>
<ul>
<li>如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。</li>
<li>如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。</li>
</ul>
<p>该操作和 SPOP 相似，但 SPOP 将随机元素从集合中移除并返回，而 Srandmember 则仅仅返回随机元素，而不对集合进行任何改动。</p>
<h6 id="命令-SRANDMEMBER-KEY-count"><a href="#命令-SRANDMEMBER-KEY-count" class="headerlink" title="命令:SRANDMEMBER KEY count"></a>命令:SRANDMEMBER KEY count</h6><h6 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h6><p>只提供集合 key 参数时，返回一个元素；如果集合为空，返回 nil 。<br>如果提供了 count 参数，那么返回一个数组；如果集合为空，返回空数组</p>
<h6 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SRANDMEMBER myset1</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; SRANDMEMBER myset1 2</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SREM-key-member1-member2-（移除集合中一个或多个成员）"><a href="#SREM-key-member1-member2-（移除集合中一个或多个成员）" class="headerlink" title="SREM key member1 [member2] （移除集合中一个或多个成员）"></a>SREM key member1 [member2] （移除集合中一个或多个成员）</h4><p>命令用于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。<br>当 key 不是集合类型，返回一个错误。<br>在 Redis 2.4 版本以前， SREM 只接受单个成员值。</p>
<h6 id="命令：SREM-KEY-MEMBER1-MEMBERN"><a href="#命令：SREM-KEY-MEMBER1-MEMBERN" class="headerlink" title="命令：SREM KEY MEMBER1..MEMBERN"></a>命令：SREM KEY MEMBER1..MEMBERN</h6><h6 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h6><p>被成功移除的元素的数量，不包括被忽略的元素。</p>
<h6 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SREM myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SREM myset1 &quot;foo&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset1</span><br><span class="line">1) &quot;bar&quot;</span><br><span class="line">2) &quot;world&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SUNION-key1-key2-（返回所有给定集合的并集）"><a href="#SUNION-key1-key2-（返回所有给定集合的并集）" class="headerlink" title="SUNION key1 [key2] （返回所有给定集合的并集）"></a>SUNION key1 [key2] （返回所有给定集合的并集）</h4><p>命令返回给定集合的并集。不存在的集合 key 被视为空集。</p>
<h6 id="命令：SUNION-KEY-KEY1-KEYN"><a href="#命令：SUNION-KEY-KEY1-KEYN" class="headerlink" title="命令：SUNION KEY KEY1..KEYN"></a>命令：SUNION KEY KEY1..KEYN</h6><h6 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h6><p>并集成员的列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD key1 <span class="string">&quot;a&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD key1 <span class="string">&quot;b&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD key1 <span class="string">&quot;c&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD key2 <span class="string">&quot;c&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD key2 <span class="string">&quot;d&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD key2 <span class="string">&quot;e&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SUNION key1 key2</span></span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;e&quot;</span><br><span class="line">5) &quot;d&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SUNIONSTORE-destination-key1-key2-（所有给定集合的并集存储在-destination-集合中）"><a href="#SUNIONSTORE-destination-key1-key2-（所有给定集合的并集存储在-destination-集合中）" class="headerlink" title="SUNIONSTORE destination key1 [key2] （所有给定集合的并集存储在 destination 集合中）"></a>SUNIONSTORE destination key1 [key2] （所有给定集合的并集存储在 destination 集合中）</h4><p>命令将给定集合的并集存储在指定的集合 destination 中。如果 destination 已经存在，则将其覆盖。</p>
<h6 id="命令：SUNIONSTORE-DESTINATION-KEY-KEY1-KEYN"><a href="#命令：SUNIONSTORE-DESTINATION-KEY-KEY1-KEYN" class="headerlink" title="命令：SUNIONSTORE DESTINATION KEY KEY1..KEYN"></a>命令：SUNIONSTORE DESTINATION KEY KEY1..KEYN</h6><h6 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h6><p>结果集中的元素数量。</p>
<h6 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset2 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SUNIONSTORE myset myset1 myset2</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;bar&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">4) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="SSCAN-key-cursor-MATCH-pattern-COUNT-count-（迭代集合中的元素）"><a href="#SSCAN-key-cursor-MATCH-pattern-COUNT-count-（迭代集合中的元素）" class="headerlink" title="SSCAN key cursor [MATCH pattern][COUNT count] （迭代集合中的元素）"></a>SSCAN key cursor [MATCH pattern][COUNT count] （迭代集合中的元素）</h4><p>命令用于迭代集合中键的元素。</p>
<h6 id="命令：SSCAN-key-cursor-MATCH-pattern-COUNT-count"><a href="#命令：SSCAN-key-cursor-MATCH-pattern-COUNT-count" class="headerlink" title="命令：SSCAN key cursor [MATCH pattern] [COUNT count]"></a>命令：SSCAN key cursor [MATCH pattern] [COUNT count]</h6><h6 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h6><p>数组列表。</p>
<h6 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;hi&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD myset1 &quot;bar&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sscan myset1 0 match h*</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;hello&quot;</span><br><span class="line">   2) &quot;h1&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础3-List命令</title>
    <url>/2020/03/24/Redis-%E5%9F%BA%E7%A1%803-List%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="BLPOP-key1-key2-timeout-移出并获取列表的第一个元素"><a href="#BLPOP-key1-key2-timeout-移出并获取列表的第一个元素" class="headerlink" title="BLPOP key1 [key2 ] timeout (移出并获取列表的第一个元素)"></a>BLPOP key1 [key2 ] timeout (移出并获取列表的第一个元素)</h4><p>命令移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<h6 id="命令BLPOP-LIST1-LIST2-LISTN-TIMEOUT"><a href="#命令BLPOP-LIST1-LIST2-LISTN-TIMEOUT" class="headerlink" title="命令BLPOP LIST1 LIST2 .. LISTN TIMEOUT"></a>命令BLPOP LIST1 LIST2 .. LISTN TIMEOUT</h6><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>如果列表为空，返回一个 nil 。<br>否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。<br><strong>实例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; BLPOP list1 100</span><br><span class="line">在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回 nil 。</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<hr>
<span id="more"></span>

<h4 id="BRPOP-key1-key2-timeout-移出并获取列表的最后一个元素"><a href="#BRPOP-key1-key2-timeout-移出并获取列表的最后一个元素" class="headerlink" title="BRPOP key1 [key2 ] timeout (移出并获取列表的最后一个元素)"></a>BRPOP key1 [key2 ] timeout (移出并获取列表的最后一个元素)</h4><p>命令移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<h6 id="命令：BRPOP-LIST1-LIST2-LISTN-TIMEOUT"><a href="#命令：BRPOP-LIST1-LIST2-LISTN-TIMEOUT" class="headerlink" title="命令：BRPOP LIST1 LIST2 .. LISTN TIMEOUT"></a>命令：BRPOP LIST1 LIST2 .. LISTN TIMEOUT</h6><h6 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h6><p>假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。<br>反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。<br><strong>实例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> DEL list1 list2</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH list1 a b c</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> BRPOP list1 list2 0</span></span><br><span class="line">1) &quot;list1&quot;</span><br><span class="line">2) &quot;c&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="BRPOPLPUSH-source-destination-timeout-从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它"><a href="#BRPOPLPUSH-source-destination-timeout-从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它" class="headerlink" title="BRPOPLPUSH source destination timeout (从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它)"></a>BRPOPLPUSH source destination timeout (从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它)</h4><p>Redis Brpoplpush 命令从列表中取出最后一个元素，并插入到另外一个列表的头部；<br> 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<h6 id="命令：BRPOPLPUSH-LIST1-ANOTHER-LIST-TIMEOUT"><a href="#命令：BRPOPLPUSH-LIST1-ANOTHER-LIST-TIMEOUT" class="headerlink" title="命令：BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT"></a>命令：BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT</h6><h6 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h6><p>假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。<br>反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。</p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 非空列表</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> BRPOPLPUSH msg reciver 500</span></span><br><span class="line">&quot;hello moto&quot;                        # 弹出元素的值</span><br><span class="line">(3.38s)                             # 等待时长</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LLEN reciver</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE reciver 0 0</span></span><br><span class="line">1) &quot;hello moto&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 空列表</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> BRPOPLPUSH msg reciver 1</span></span><br><span class="line">(nil)</span><br><span class="line">(1.34s)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LINDEX-key-index-（通过索引获取列表中的元素）"><a href="#LINDEX-key-index-（通过索引获取列表中的元素）" class="headerlink" title="LINDEX key index （通过索引获取列表中的元素）"></a>LINDEX key index （通过索引获取列表中的元素）</h4><p>命令用于通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</p>
<h6 id="命令：LINDEX-KEY-NAME-INDEX-POSITION"><a href="#命令：LINDEX-KEY-NAME-INDEX-POSITION" class="headerlink" title="命令：LINDEX KEY_NAME INDEX_POSITION"></a>命令：LINDEX KEY_NAME INDEX_POSITION</h6><h6 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h6><p>列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">非空列表</span></span><br><span class="line">redis 127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; LINDEX mylist 0</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; LINDEX mylist -1</span><br><span class="line">&quot;World&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; LINDEX mylist 3        # index不在 mylist 的区间范围内</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LINSERT-key-BEFORE-AFTER-pivot-value-在列表的元素前或者后插入元素"><a href="#LINSERT-key-BEFORE-AFTER-pivot-value-在列表的元素前或者后插入元素" class="headerlink" title="LINSERT key BEFORE|AFTER pivot value (在列表的元素前或者后插入元素)"></a>LINSERT key BEFORE|AFTER pivot value (在列表的元素前或者后插入元素)</h4><p>命令用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。<br>当列表不存在时，被视为空列表，不执行任何操作。<br>如果 key 不是列表类型，返回一个错误。</p>
<h6 id="命令：LINSERT-key-BEFORE-AFTER-pivot-value"><a href="#命令：LINSERT-key-BEFORE-AFTER-pivot-value" class="headerlink" title="命令：LINSERT key BEFORE|AFTER pivot value"></a>命令：LINSERT key BEFORE|AFTER pivot value</h6><h6 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h6><p>如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。<br>如果 key 不存在或为空列表，返回 0 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 非空列表</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;Hello&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;World&quot;</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LINSERT mylist BEFORE <span class="string">&quot;World&quot;</span> <span class="string">&quot;There&quot;</span></span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist 0 -1</span></span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;There&quot;</span><br><span class="line">3) &quot;World&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LLEN-key-（获取列表长度）"><a href="#LLEN-key-（获取列表长度）" class="headerlink" title="LLEN key （获取列表长度）"></a>LLEN key （获取列表长度）</h4><p>命令用于返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误。</p>
<h6 id="命令：LLEN-KEY-NAME"><a href="#命令：LLEN-KEY-NAME" class="headerlink" title="命令：LLEN KEY_NAME"></a>命令：LLEN KEY_NAME</h6><h6 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h6><p>列表的长度。</p>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH list1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH list1 &quot;bar&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; LLEN list1</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LPOP-key-移出并获取列表的第一个元素"><a href="#LPOP-key-移出并获取列表的第一个元素" class="headerlink" title="LPOP key(移出并获取列表的第一个元素)"></a>LPOP key(移出并获取列表的第一个元素)</h4><p>命令用于移除并返回列表的第一个元素。</p>
<h6 id="命令：-Lpop-KEY-NAME"><a href="#命令：-Lpop-KEY-NAME" class="headerlink" title="命令： Lpop KEY_NAME"></a>命令： Lpop KEY_NAME</h6><h6 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h6><p>列表的第一个元素。 当列表 key 不存在时，返回 nil 。</p>
<h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH list1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH list1 &quot;bar&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; LPOP list1</span><br><span class="line">&quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LPUSH-key-value1-value2-将一个或多个值插入到列表头部"><a href="#LPUSH-key-value1-value2-将一个或多个值插入到列表头部" class="headerlink" title="LPUSH key value1 [value2] (将一个或多个值插入到列表头部)"></a>LPUSH key value1 [value2] (将一个或多个值插入到列表头部)</h4><p>命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。<br>当 key 存在但不是列表类型时，返回一个错误。</p>
<h6 id="命令：-LPUSH-KEY-NAME-VALUE1-VALUEN"><a href="#命令：-LPUSH-KEY-NAME-VALUE1-VALUEN" class="headerlink" title="命令： LPUSH KEY_NAME VALUE1.. VALUEN"></a>命令： LPUSH KEY_NAME VALUE1.. VALUEN</h6><h6 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h6><p>执行 LPUSH 命令后，列表的长度。</p>
<h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH list1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list1 &quot;bar&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;bar&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LPUSHX-key-value-（将一个值插入到已存在的列表头部）"><a href="#LPUSHX-key-value-（将一个值插入到已存在的列表头部）" class="headerlink" title="LPUSHX key value （将一个值插入到已存在的列表头部）"></a>LPUSHX key value （将一个值插入到已存在的列表头部）</h4><p>命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。<br>当 key 存在但不是列表类型时，返回一个错误。</p>
<h6 id="命令：-LPUSHX-KEY-NAME-VALUE1-VALUEN"><a href="#命令：-LPUSHX-KEY-NAME-VALUE1-VALUEN" class="headerlink" title="命令： LPUSHX KEY_NAME VALUE1.. VALUEN"></a>命令： LPUSHX KEY_NAME VALUE1.. VALUEN</h6><h6 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h6><p>执行 LPUSH 命令后，列表的长度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSHX list1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list1 &quot;bar&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;bar&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LRANGE-key-start-stop-（获取列表指定范围内的元素）"><a href="#LRANGE-key-start-stop-（获取列表指定范围内的元素）" class="headerlink" title="LRANGE key start stop （获取列表指定范围内的元素）"></a>LRANGE key start stop （获取列表指定范围内的元素）</h4><p>返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。<br>其中<br>0 表示列表的第一个元素，<br>1 表示列表的第二个元素，<br>-1 表示列表的最后一个元素，<br>-2 表示列表的倒数第二个元素，以此类推。</p>
<h6 id="命令：-LRANGE-KEY-NAME-START-END"><a href="#命令：-LRANGE-KEY-NAME-START-END" class="headerlink" title="命令： LRANGE KEY_NAME START END"></a>命令： LRANGE KEY_NAME START END</h6><h6 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h6><p>一个列表，包含指定区间内的元素</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;one&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;two&quot;</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;three&quot;</span></span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist 0 0</span></span><br><span class="line">1) &quot;one&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist -3 2</span></span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist -100 100</span></span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist 5 10</span></span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LREM-key-count-value-移除列表元素"><a href="#LREM-key-count-value-移除列表元素" class="headerlink" title="LREM key count value (移除列表元素)"></a>LREM key count value (移除列表元素)</h4><p>根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。<br>COUNT 的值可以是以下几种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count &gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。</span><br><span class="line">count &lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。</span><br><span class="line">count = 0 : 移除表中所有与 VALUE 相等的值。</span><br></pre></td></tr></table></figure>

<h6 id="命令：LREM-KEY-NAME-COUNT-VALUE"><a href="#命令：LREM-KEY-NAME-COUNT-VALUE" class="headerlink" title="命令：LREM KEY_NAME COUNT VALUE"></a>命令：LREM KEY_NAME COUNT VALUE</h6><h6 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h6><p>被移除元素的数量。 列表不存在时返回 0 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;hello&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;hello&quot;</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;foo&quot;</span></span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;hello&quot;</span></span></span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LREM mylist -2 <span class="string">&quot;hello&quot;</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist 0 -1</span></span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LSET-key-index-value（通过索引设置列表元素的值）"><a href="#LSET-key-index-value（通过索引设置列表元素的值）" class="headerlink" title="LSET key index value（通过索引设置列表元素的值）"></a>LSET key index value（通过索引设置列表元素的值）</h4><p>通过索引来设置元素的值。<br>当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误。</p>
<h6 id="命令：LSET-KEY-NAME-INDEX-VALUE"><a href="#命令：LSET-KEY-NAME-INDEX-VALUE" class="headerlink" title="命令：LSET KEY_NAME INDEX VALUE"></a>命令：LSET KEY_NAME INDEX VALUE</h6><h6 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h6><p>操作成功返回 ok ，否则返回错误信息。</p>
<h6 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; LSET mylist 0 &quot;bar&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1: &quot;bar&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;foo&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="LTRIM-key-start-stop-（对一个列表进行修剪-trim-）"><a href="#LTRIM-key-start-stop-（对一个列表进行修剪-trim-）" class="headerlink" title="LTRIM key start stop （对一个列表进行修剪(trim)）"></a>LTRIM key start stop （对一个列表进行修剪(trim)）</h4><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。<br>下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，<br>以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p>
<h6 id="命令：LTRIM-KEY-NAME-START-STOP"><a href="#命令：LTRIM-KEY-NAME-START-STOP" class="headerlink" title="命令：LTRIM KEY_NAME START STOP"></a>命令：LTRIM KEY_NAME START STOP</h6><h6 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h6><p>操作成功返回 ok ，否则返回错误信息。</p>
<h6 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; LTRIM mylist 1 -1</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br><span class="line">3) &quot;bar&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="RPOP-key-（移除列表的最后一个元素，返回值为移除的元素。）"><a href="#RPOP-key-（移除列表的最后一个元素，返回值为移除的元素。）" class="headerlink" title="RPOP key （移除列表的最后一个元素，返回值为移除的元素。）"></a>RPOP key （移除列表的最后一个元素，返回值为移除的元素。）</h4><p>命令用于移除列表的最后一个元素，返回值为移除的元素。</p>
<h6 id="命令：RPOP-KEY-NAME"><a href="#命令：RPOP-KEY-NAME" class="headerlink" title="命令：RPOP KEY_NAME"></a>命令：RPOP KEY_NAME</h6><h6 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h6><p>被移除的元素。<br>当列表不存在时，返回 nil 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;one&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;two&quot;</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="string">&quot;three&quot;</span></span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> RPOP mylist</span></span><br><span class="line">&quot;three&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> LRANGE mylist 0 -1</span></span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="RPOPLPUSH-source-destination-移除列表的最后一个元素，并将该元素添加到另一个列表并返回"><a href="#RPOPLPUSH-source-destination-移除列表的最后一个元素，并将该元素添加到另一个列表并返回" class="headerlink" title="RPOPLPUSH source destination(移除列表的最后一个元素，并将该元素添加到另一个列表并返回)"></a>RPOPLPUSH source destination(移除列表的最后一个元素，并将该元素添加到另一个列表并返回)</h4><p>命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</p>
<h6 id="命令：RPOPLPUSH-SOURCE-KEY-NAME-DESTINATION-KEY-NAME"><a href="#命令：RPOPLPUSH-SOURCE-KEY-NAME-DESTINATION-KEY-NAME" class="headerlink" title="命令：RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME"></a>命令：RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME</h6><h6 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h6><p>被弹出的元素。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; RPOPLPUSH mylist myotherlist</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="RPUSH-key-value1-value2-在列表中添加一个或多个值"><a href="#RPUSH-key-value1-value2-在列表中添加一个或多个值" class="headerlink" title="RPUSH key value1 value2(在列表中添加一个或多个值)"></a>RPUSH key value1 value2(在列表中添加一个或多个值)</h4><p>命令用于将一个或多个值插入到列表的尾部(最右边)。<br>如果列表不存在，一个空列表会被创建并执行 RPUSH 操作。<br>当列表存在但不是列表类型时，返回一个错误。</p>
<h6 id="命令：RPUSH-KEY-NAME-VALUE1-VALUEN"><a href="#命令：RPUSH-KEY-NAME-VALUE1-VALUEN" class="headerlink" title="命令：RPUSH KEY_NAME VALUE1..VALUEN"></a>命令：RPUSH KEY_NAME VALUE1..VALUEN</h6><h6 id="返回值-15"><a href="#返回值-15" class="headerlink" title="返回值"></a>返回值</h6><p>执行 RPUSH 操作后，列表的长度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;bar&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br><span class="line">3) &quot;bar&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="RPUSHX-key-value-（为已存在的列表添加值）"><a href="#RPUSHX-key-value-（为已存在的列表添加值）" class="headerlink" title="RPUSHX key value （为已存在的列表添加值）"></a>RPUSHX key value （为已存在的列表添加值）</h4><p>命令用于将一个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效。</p>
<h6 id="命令：RPUSHX-KEY-NAME-VALUE1-VALUEN"><a href="#命令：RPUSHX-KEY-NAME-VALUE1-VALUEN" class="headerlink" title="命令：RPUSHX KEY_NAME VALUE1..VALUEN"></a>命令：RPUSHX KEY_NAME VALUE1..VALUEN</h6><h6 id="返回值-16"><a href="#返回值-16" class="headerlink" title="返回值"></a>返回值</h6><p>执行 Rpushx 操作后，列表的长度。</p>
<h6 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSH mylist &quot;foo&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; RPUSHX mylist2 &quot;bar&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;foo&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础6-ZSet命令</title>
    <url>/2020/03/28/Redis-%E5%9F%BA%E7%A1%806-ZSet%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础7-基础命令</title>
    <url>/2020/07/05/Redis-%E5%9F%BA%E7%A1%807-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="连接redis服务"><a href="#连接redis服务" class="headerlink" title="连接redis服务"></a>连接redis服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a password</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="运维常用的server端命令"><a href="#运维常用的server端命令" class="headerlink" title="运维常用的server端命令"></a>运维常用的server端命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">time 查看时间戳与微秒数</span><br><span class="line">dbsize 查看当前库中的key数量</span><br><span class="line">bgrewriteaof 后台进程重写aof</span><br><span class="line">bgsave       后台保存rdb快照</span><br><span class="line">save         保存rdb快照</span><br><span class="line">lastsave     上次保存时间</span><br><span class="line">slaveof      设为slave服务器</span><br><span class="line">flushall     清空所有db</span><br><span class="line">flushdb      清空当前db</span><br><span class="line">shutdown[&quot;&quot;|save|nosave]     断开连接,关闭服务器</span><br><span class="line">slowlog   显示慢查询</span><br><span class="line">info      显示服务器信息</span><br><span class="line">config get 获取配置信息</span><br><span class="line">config set 设置配置信息</span><br><span class="line">monitor    打开控制台</span><br><span class="line">sync       主从同步</span><br><span class="line">client list 客户端列表</span><br><span class="line">client kill 关闭某个客户端</span><br><span class="line">client setname 为客户端设置名字</span><br><span class="line">client getname 获取客户端名字</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="运维时观察参数"><a href="#运维时观察参数" class="headerlink" title="运维时观察参数"></a>运维时观察参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1: 内存</span><br><span class="line"><span class="meta">#</span><span class="bash"> memory</span></span><br><span class="line">used_memory:859192 数据结构的空间</span><br><span class="line">used_memory_rss:7634944 实占空间</span><br><span class="line">mem_fragmentation_ratio:8.89 前2者的比例,1.n为佳</span><br><span class="line">2: 主从复制</span><br><span class="line"><span class="meta">#</span><span class="bash"> replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.1.128</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line"></span><br><span class="line">3:持久化</span><br><span class="line"><span class="meta">#</span><span class="bash"> persistence</span></span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_last_save_time:1375224063</span><br><span class="line"></span><br><span class="line">4: fork耗时</span><br><span class="line"><span class="meta">#</span><span class="bash"> status</span></span><br><span class="line">latest_fork_usec:936  上次持久化花费微秒</span><br><span class="line"></span><br><span class="line">5: 慢日志</span><br><span class="line">config get/set slowlog-log-slower-than</span><br><span class="line">config get/set slowlog-max-len </span><br><span class="line">slow log get 获取慢日志</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Redis-数据备份与恢复"><a href="#Redis-数据备份与恢复" class="headerlink" title="Redis 数据备份与恢复"></a>Redis 数据备份与恢复</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份数据</span></span><br><span class="line">SAVE</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台备份数据</span></span><br><span class="line">BGSAVE</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令</span></span><br><span class="line">CONFIG GET dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-Jedis方法汇总</title>
    <url>/2020/05/20/Redis-%E8%BF%9B%E9%98%B61-Java(Jedis)/</url>
    <content><![CDATA[<h4 id="Java建立Redis链接"><a href="#Java建立Redis链接" class="headerlink" title="Java建立Redis链接"></a>Java建立Redis链接</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aicai.qa.tools.statics.config.SysConfigUtil;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.BinaryClient;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JedisPool pool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RedisUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pool == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String ip = SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getString(<span class="string">&quot;redis.host&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port = SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getInt(<span class="string">&quot;redis.port&quot;</span>);</span><br><span class="line">            String password = SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getString(<span class="string">&quot;redis.password&quot;</span>);</span><br><span class="line">            JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getInt(<span class="string">&quot;redis.maxTotal&quot;</span>));</span><br><span class="line">            jedisPoolConfig.setMaxIdle(SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getInt(<span class="string">&quot;redis.maxIdle&quot;</span>));</span><br><span class="line">            jedisPoolConfig.setMaxWaitMillis(SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getLong(<span class="string">&quot;redis.maxWaitMillis&quot;</span>));</span><br><span class="line">            jedisPoolConfig.setTestOnBorrow(SysConfigUtil.getSysConfigUtil(<span class="string">&quot;redis.properties&quot;</span>).getBoolean(<span class="string">&quot;redis.testOnBorrow&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(password)) &#123;</span><br><span class="line">                <span class="comment">// redis 设置了密码</span></span><br><span class="line">                pool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, ip, port, <span class="number">10000</span>, password);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// redis 未设置密码</span></span><br><span class="line">                pool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, ip, port, <span class="number">10000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回满足pattern表达式的所有key</span></span><br><span class="line"><span class="comment">     * keys(*)</span></span><br><span class="line"><span class="comment">     * 返回所有的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">keys</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key判断值得类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.type(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RedisUtil <span class="title">getRedisUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="String操作"><a href="#String操作" class="headerlink" title="String操作"></a>String操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定key的值,如果key不存在返回null，如果该Key存储的不是字符串，会抛出一个错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        String value = <span class="keyword">null</span>;</span><br><span class="line">        value = jedis.get(key);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key的值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定的key,也可以传入一个包含key的数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">del</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.del(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key向指定的value值追加值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">append</span><span class="params">(String key, String str)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.append(key, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">exists</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.exists(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key value,如果key已经存在则返回0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">setnx</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.setnx(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key value并指定这个键值的有效期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setex</span><span class="params">(String key, <span class="keyword">int</span> seconds, String value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.setex(key, seconds, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key 和offset 从指定的位置开始将原先value替换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">setrange</span><span class="params">(String key, <span class="keyword">int</span> offset, String str)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.setrange(key, offset, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过批量的key获取批量的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">mget</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.mget(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量的设置key:value,也可以一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keysValues</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mset</span><span class="params">(String... keysValues)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.mset(keysValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量的设置key:value,可以一个,如果key已经存在则会失败,操作会回滚</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keysValues</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">msetnx</span><span class="params">(String... keysValues)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.msetnx(keysValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key的值,并返回一个旧值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSet</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.getSet(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过下标 和key 获取指定下标位置的 value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startOffset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endOffset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getrange</span><span class="params">(String key, <span class="keyword">int</span> startOffset, <span class="keyword">int</span> endOffset)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.getrange(key, startOffset, endOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key 对value进行加值+1操作,当value不是int类型时会返回错误,当key不存在是则value为1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.incr(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key给指定的value加值,如果key不存在,则这是value为该值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incrBy</span><span class="params">(String key, <span class="keyword">long</span> integer)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.incrBy(key, integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对key的值做减减操作,如果key不存在,则设置key为-1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.decr(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减去指定的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decrBy</span><span class="params">(String key, <span class="keyword">long</span> integer)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.decrBy(key, integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key获取value值的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">strLen</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.strlen(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key给field设置指定的值,如果key不存在则先创建,如果field已经存在,返回0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hsetnx</span><span class="params">(String key, String field, String value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.hsetnx(key, field, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过key给field设置指定的值,如果key不存在,则先创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hset</span><span class="params">(String key, String field, String value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = getJedis();</span><br><span class="line">        <span class="keyword">return</span> jedis.hset(key, field, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Hash操作"><a href="#Hash操作" class="headerlink" title="Hash操作"></a>Hash操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key同时设置 hash的多个field</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hmset</span><span class="params">(String key, Map&lt;String, String&gt; hash)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hmset(key, hash);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key 和 field 获取指定的 value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> failed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hget</span><span class="params">(String key, String failed)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hget(key, failed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置key的超时时间为seconds</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">expire</span><span class="params">(String key, <span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.expire(key, seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key 和 fields 获取指定的value 如果没有对应的value则返回null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fields 可以是 一个String 也可以是 String数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hmget</span><span class="params">(String key, String... fields)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hmget(key, fields);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key给指定的field的value加上给定的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">hincrby</span><span class="params">(String key, String field, Long value)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hincrBy(key, field, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key和field判断是否有指定的value存在</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">hexists</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hexists(key, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回field的数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">hlen</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hlen(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key 删除指定的 field</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fields 可以是 一个 field 也可以是 一个数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">hdel</span><span class="params">(String key, String... fields)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hdel(key, fields);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回所有的field</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">hkeys</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hkeys(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回所有和key有关的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hvals</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hvals(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取所有的field和value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">hgetall</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.hgetAll(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="List操作"><a href="#List操作" class="headerlink" title="List操作"></a>List操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key向list头部添加字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strs 可以是一个string 也可以是string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回list的value个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">lpush</span><span class="params">(String key, String... strs)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.lpush(key, strs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key向list尾部添加字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strs 可以是一个string 也可以是string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回list的value个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">rpush</span><span class="params">(String key, String... strs)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.rpush(key, strs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key在list指定的位置之前或者之后 添加字符串元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> where LIST_POSITION枚举类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pivot list里面的value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 添加的value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">linsert</span><span class="params">(String key, BinaryClient.LIST_POSITION where,</span></span></span><br><span class="line"><span class="params"><span class="function">                    String pivot, String value)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.linsert(key, where, pivot, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key设置list指定下标位置的value</span></span><br><span class="line"><span class="comment"> * 如果下标超过list里面value的个数则报错</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 从0开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 成功返回OK</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">lset</span><span class="params">(String key, Long index, String value)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.lset(key, index, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key从对应的list中删除指定的count个 和 value相同的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count 当count为0时删除全部</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回被删除的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">lrem</span><span class="params">(String key, <span class="keyword">long</span> count, String value)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.lrem(key, count, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key保留list中从strat下标开始到end下标结束的value值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 成功返回OK</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ltrim</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.ltrim(key, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key从list的头部删除一个value,并返回该value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lpop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.lpop(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key从list尾部删除一个value,并返回该元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> String <span class="title">rpop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.rpop(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key从一个list的尾部删除一个value并添加到另一个list的头部,并返回该value</span></span><br><span class="line"><span class="comment"> * 如果第一个list为空或者不存在则返回null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srckey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dstkey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">rpoplpush</span><span class="params">(String srckey, String dstkey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.rpoplpush(srckey, dstkey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取list中指定下标位置的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果没有返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">lindex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.lindex(key, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回list的长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">llen</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.llen(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取list指定下标位置的value</span></span><br><span class="line"><span class="comment"> * 如果start 为 0 end 为 -1 则返回全部的list中的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.lrange(key, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Set操作"><a href="#Set操作" class="headerlink" title="Set操作"></a>Set操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key向指定的set中添加value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> members 可以是一个String 也可以是一个String数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 添加成功的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">sadd</span><span class="params">(String key, String... members)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sadd(key, members);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key删除set中对应的value值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> members 可以是一个String 也可以是一个String数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">srem</span><span class="params">(String key, String... members)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.srem(key, members);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key随机删除一个set中的value并返回该值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.spop(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取set中的差集</span></span><br><span class="line"><span class="comment"> * 以第一个set为标准</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keys 可以 是一个string 则返回set中所有的value 也可以是string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sdiff</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sdiff(keys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取set中的差集并存入到另一个key中</span></span><br><span class="line"><span class="comment"> * 以第一个set为标准</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dstkey 差集存入的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keys   可以 是一个string 则返回set中所有的value 也可以是string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">sdiffstore</span><span class="params">(String dstkey, String... keys)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sdiffstore(dstkey, keys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取指定set中的交集</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keys 可以 是一个string 也可以是一个string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sinter</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sinter(keys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取指定set中的交集 并将结果存入新的set中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dstkey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keys   可以 是一个string 也可以是一个string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">sinterstore</span><span class="params">(String dstkey, String... keys)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sinterstore(dstkey, keys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回所有set的并集</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keys 可以 是一个string 也可以是一个string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sunion</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sunion(keys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回所有set的并集,并存入到新的set中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dstkey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keys   可以 是一个string 也可以是一个string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">sunionstore</span><span class="params">(String dstkey, String... keys)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sunionstore(dstkey, keys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key将set中的value移除并添加到第二个set中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srckey 需要移除的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dstkey 添加的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member set中的value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">smove</span><span class="params">(String srckey, String dstkey, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.smove(srckey, dstkey, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取set中value的个数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">scard</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.scard(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key判断value是否是set中的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">sismember</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.sismember(key, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取set中随机的value,不删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">srandmember</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.srandmember(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取set中所有的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">smembers</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.smembers(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="ZSet操作"><a href="#ZSet操作" class="headerlink" title="ZSet操作"></a>ZSet操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key向zset中添加value,score,其中score就是用来排序的</span></span><br><span class="line"><span class="comment"> * 如果该value已经存在则根据score更新元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zadd</span><span class="params">(String key, <span class="keyword">double</span> score, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zadd(key, score, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key删除在zset中指定的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> members 可以 是一个string 也可以是一个string数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zrem</span><span class="params">(String key, String... members)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zrem(key, members);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key增加该zset中value的score的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">zincrby</span><span class="params">(String key, <span class="keyword">double</span> score, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zincrby(key, score, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回zset中value的排名</span></span><br><span class="line"><span class="comment"> * 下标从小到大排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zrank</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zrank(key, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回zset中value的排名</span></span><br><span class="line"><span class="comment"> * 下标从大到小排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zrevrank</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zrevrank(key, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key将获取score从start到end中zset的value</span></span><br><span class="line"><span class="comment"> * socre从大到小排序</span></span><br><span class="line"><span class="comment"> * 当start为0 end为-1时返回全部</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrevrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zrevrange(key, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回指定score内zset中的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrangebyscore</span><span class="params">(String key, String max, String min)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zrevrangeByScore(key, max, min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回指定score内zset中的value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> max, <span class="keyword">double</span> min)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zrevrangeByScore(key, max, min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回指定区间内zset中value的数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zcount</span><span class="params">(String key, String min, String max)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zcount(key, min, max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key返回zset中的value个数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zcard</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zcard(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key获取zset中value的score值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">zscore</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zscore(key, member);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key删除给定区间内的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zremrangeByRank</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zremrangeByRank(key, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key删除指定score内的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">zremrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> start, <span class="keyword">double</span> end)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = getJedis();</span><br><span class="line">    <span class="keyword">return</span> jedis.zremrangeByScore(key, start, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="jedis-对-key-操作案例"><a href="#jedis-对-key-操作案例" class="headerlink" title="jedis 对 key 操作案例"></a>jedis 对 key 操作案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jedis对key的操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTest</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">	System.out.println(jedis.flushDB());<span class="comment">// 清空数据</span></span><br><span class="line">	System.out.println(jedis.echo(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 判断key否存在</span></span><br><span class="line">	System.out.println(jedis.exists(<span class="string">&quot;foo&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	jedis.set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;values&quot;</span>);</span><br><span class="line">	jedis.set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;values&quot;</span>);</span><br><span class="line">	System.out.println(jedis.exists(<span class="string">&quot;key&quot;</span>));<span class="comment">// 判断是否存在</span></span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 如果数据库没有任何key，返回nil，否则返回数据库中一个随机的key。</span></span><br><span class="line">	String randomKey = jedis.randomKey();</span><br><span class="line">	System.out.println(<span class="string">&quot;randomKey: &quot;</span> + randomKey);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 设置60秒后该key过期</span></span><br><span class="line">	jedis.expire(<span class="string">&quot;key&quot;</span>, <span class="number">60</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// key有效毫秒数</span></span><br><span class="line">	System.out.println(jedis.pttl(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 移除key的过期时间</span></span><br><span class="line">	jedis.persist(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取key的类型, &quot;string&quot;, &quot;list&quot;, &quot;set&quot;. &quot;none&quot; none表示key不存在</span></span><br><span class="line">	System.out.println(<span class="string">&quot;type: &quot;</span> + jedis.type(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 导出key的值</span></span><br><span class="line">	<span class="keyword">byte</span>[] bytes = jedis.dump(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">	System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 将key重命名</span></span><br><span class="line">	jedis.renamenx(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;keytest&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;key是否存在: &quot;</span> + jedis.exists(<span class="string">&quot;key&quot;</span>));<span class="comment">// 判断是否存在</span></span><br><span class="line">	System.out.println(<span class="string">&quot;keytest是否存在: &quot;</span> + jedis.exists(<span class="string">&quot;keytest&quot;</span>));<span class="comment">// 判断是否存在</span></span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 查询匹配的key</span></span><br><span class="line">	<span class="comment">// KEYS       * 匹配数据库中所有 key 。</span></span><br><span class="line">	<span class="comment">// KEYS       h?llo 匹配 hello ， hallo 和 hxllo 等。</span></span><br><span class="line">	<span class="comment">// KEYS       h*llo 匹配 hllo 和 heeeeello 等。</span></span><br><span class="line">	<span class="comment">// KEYS       h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。</span></span><br><span class="line">	<span class="comment">// 特殊符号用 \ 隔开。</span></span><br><span class="line">	Set&lt;String&gt; set = jedis.keys(<span class="string">&quot;k*&quot;</span>);</span><br><span class="line">	System.out.println(set);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 删除key</span></span><br><span class="line">	jedis.del(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">	System.out.println(jedis.exists(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jedis对字符串(String)的相关操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	jedis.set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	System.out.println(jedis.get(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 使用append 向字符串后面添加</span></span><br><span class="line">	jedis.append(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot; world&quot;</span>);</span><br><span class="line">	System.out.println(jedis.get(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// set覆盖字符串</span></span><br><span class="line">	jedis.set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">	System.out.println(jedis.get(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 设置过期时间</span></span><br><span class="line">	jedis.setex(<span class="string">&quot;hello2&quot;</span>, <span class="number">2</span>, <span class="string">&quot;world2&quot;</span>);</span><br><span class="line">	System.out.println(jedis.get(<span class="string">&quot;hello2&quot;</span>));</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(jedis.get(<span class="string">&quot;hello2&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 一次添加多个key-value对</span></span><br><span class="line">	jedis.mset(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">	<span class="comment">// 获取a和b的value</span></span><br><span class="line">	List&lt;String&gt; valus = jedis.mget(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">	System.out.println(valus);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 批量删除</span></span><br><span class="line">	jedis.del(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">	System.out.println(jedis.exists(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">	System.out.println(jedis.exists(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jedis对链表(Lists)的操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String key = <span class="string">&quot;mylist&quot;</span>;</span><br><span class="line">	jedis.del(key);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 队列添加元素</span></span><br><span class="line">	jedis.rpush(key, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">	jedis.rpush(key, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">	jedis.rpush(key, <span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">	jedis.rpush(key, <span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">	jedis.rpush(key, <span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 队列长度</span></span><br><span class="line">	System.out.println(<span class="string">&quot;lenth: &quot;</span> + jedis.llen(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 打印队列，从索引0开始，到倒数第1个（全部元素）</span></span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 索引为1的元素</span></span><br><span class="line">	System.out.println(<span class="string">&quot;index of 1: &quot;</span> + jedis.lindex(key, <span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 设置队列里面一个元素的值，当index超出范围时会返回一个error。</span></span><br><span class="line">	jedis.lset(key, <span class="number">1</span>, <span class="string">&quot;aa22&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;index of 1: &quot;</span> + jedis.lindex(key, <span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 从队列的右边入队一个元素</span></span><br><span class="line">	jedis.rpush(key, <span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>);<span class="comment">// 先-2，后-1入队列</span></span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 从队列的左边入队一个或多个元素</span></span><br><span class="line">	jedis.lpush(key, <span class="string">&quot;second element&quot;</span>, <span class="string">&quot;first element&quot;</span>);<span class="comment">// 先second</span></span><br><span class="line">	<span class="comment">// element，后first</span></span><br><span class="line">	<span class="comment">// elementF入队列</span></span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 从队列的右边出队一个元素</span></span><br><span class="line">	System.out.println(jedis.rpop(key));</span><br><span class="line">	<span class="comment">// 从队列的左边出队一个元素</span></span><br><span class="line">	System.out.println(jedis.lpop(key));</span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// count &gt; 0: 从头往尾移除值为 value 的元素，count为移除的个数。</span></span><br><span class="line">	<span class="comment">// count &lt; 0: 从尾往头移除值为 value 的元素，count为移除的个数。</span></span><br><span class="line">	<span class="comment">// count = 0: 移除所有值为 value 的元素。</span></span><br><span class="line">	jedis.lrem(key, <span class="number">1</span>, <span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 即最右边的那个元素也会被包含在内。 如果start比list的尾部下标大的时候，会返回一个空列表。</span></span><br><span class="line">	<span class="comment">// 如果stop比list的实际尾部大的时候，Redis会当它是最后一个元素的下标。</span></span><br><span class="line">	System.out.println(jedis.lrange(key, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 删除区间以外的元素</span></span><br><span class="line">	System.out.println(jedis.ltrim(key, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;all elements: &quot;</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jedis对集合(Sets)的操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 清空数据</span></span><br><span class="line">	System.out.println(jedis.flushDB());</span><br><span class="line">	String key = <span class="string">&quot;myset&quot;</span>;</span><br><span class="line">	String key2 = <span class="string">&quot;myset2&quot;</span>;</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 集合添加元素</span></span><br><span class="line">	jedis.sadd(key, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">	jedis.sadd(key2, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取集合里面的元素数量</span></span><br><span class="line">	System.out.println(jedis.scard(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获得两个集合的交集，并存储在一个关键的结果集</span></span><br><span class="line">	jedis.sinterstore(<span class="string">&quot;destination&quot;</span>, key, key2);</span><br><span class="line">	System.out.println(jedis.smembers(<span class="string">&quot;destination&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获得两个集合的并集，并存储在一个关键的结果集</span></span><br><span class="line">	jedis.sunionstore(<span class="string">&quot;destination&quot;</span>, key, key2);</span><br><span class="line">	System.out.println(jedis.smembers(<span class="string">&quot;destination&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// key集合中，key2集合没有的元素，并存储在一个关键的结果集</span></span><br><span class="line">	jedis.sdiffstore(<span class="string">&quot;destination&quot;</span>, key, key2);</span><br><span class="line">	System.out.println(jedis.smembers(<span class="string">&quot;destination&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 确定某个元素是一个集合的成员</span></span><br><span class="line">	System.out.println(jedis.sismember(key, <span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 从key集合里面随机获取一个元素</span></span><br><span class="line">	System.out.println(jedis.srandmember(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// aaa从key移动到key2集合</span></span><br><span class="line">	jedis.smove(key, key2, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">	System.out.println(jedis.smembers(key));</span><br><span class="line">	System.out.println(jedis.smembers(key2));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 删除并获取一个集合里面的元素</span></span><br><span class="line">	System.out.println(jedis.spop(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 从集合里删除一个或多个元素</span></span><br><span class="line">	jedis.srem(key2, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">	System.out.println(jedis.smembers(key2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jedis对有序集合(Sorted Sets)的操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSortSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 清空数据</span></span><br><span class="line">	System.out.println(jedis.flushDB());</span><br><span class="line">	String key = <span class="string">&quot;mysortset&quot;</span>;</span><br><span class="line">	 </span><br><span class="line">	Map&lt;String, Double&gt; scoreMembers = <span class="keyword">new</span> HashMap&lt;String, Double&gt;();</span><br><span class="line">	scoreMembers.put(<span class="string">&quot;aaa&quot;</span>, <span class="number">1001.0</span>);</span><br><span class="line">	scoreMembers.put(<span class="string">&quot;bbb&quot;</span>, <span class="number">1002.0</span>);</span><br><span class="line">	scoreMembers.put(<span class="string">&quot;ccc&quot;</span>, <span class="number">1003.0</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 添加数据</span></span><br><span class="line">	jedis.zadd(key, <span class="number">1004.0</span>, <span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">	jedis.zadd(key, scoreMembers);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取一个排序的集合中的成员数量</span></span><br><span class="line">	System.out.println(jedis.zcard(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 返回的成员在指定范围内的有序集合，以0表示有序集第一个成员，以1表示有序集第二个成员，以此类推。</span></span><br><span class="line">	<span class="comment">// 负数下标，以-1表示最后一个成员，-2表示倒数第二个成员</span></span><br><span class="line">	Set&lt;String&gt; coll = jedis.zrange(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">	System.out.println(coll);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 返回的成员在指定范围内的逆序集合</span></span><br><span class="line">	coll = jedis.zrevrange(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">	System.out.println(coll);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 元素下标</span></span><br><span class="line">	System.out.println(jedis.zscore(key, <span class="string">&quot;bbb&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 删除元素</span></span><br><span class="line">	System.out.println(jedis.zrem(key, <span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">	System.out.println(jedis.zrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 给定值范围内的成员数</span></span><br><span class="line">	System.out.println(jedis.zcount(key, <span class="number">1002.0</span>, <span class="number">1003.0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	Jedis对哈希(Hashs)的操作</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 清空数据</span></span><br><span class="line">	System.out.println(jedis.flushDB());</span><br><span class="line">	String key = <span class="string">&quot;myhash&quot;</span>;</span><br><span class="line">	Map&lt;String, String&gt; hash = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">	hash.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">	hash.put(<span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">	hash.put(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;33&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 添加数据</span></span><br><span class="line">	jedis.hmset(key, hash);</span><br><span class="line">	jedis.hset(key, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;44&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取hash的所有元素(key值)</span></span><br><span class="line">	System.out.println(jedis.hkeys(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取hash中所有的key对应的value值</span></span><br><span class="line">	System.out.println(jedis.hvals(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取hash里所有元素的数量</span></span><br><span class="line">	System.out.println(jedis.hlen(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取hash中全部的域和值,以Map&lt;String, String&gt; 的形式返回</span></span><br><span class="line">	Map&lt;String, String&gt; elements = jedis.hgetAll(key);</span><br><span class="line">	System.out.println(elements);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 判断给定key值是否存在于哈希集中</span></span><br><span class="line">	System.out.println(jedis.hexists(key, <span class="string">&quot;bbb&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取hash里面指定字段对应的值</span></span><br><span class="line">	System.out.println(jedis.hmget(key, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 获取指定的值</span></span><br><span class="line">	System.out.println(jedis.hget(key, <span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 删除指定的值</span></span><br><span class="line">	System.out.println(jedis.hdel(key, <span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">	System.out.println(jedis.hgetAll(key));</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 为key中的域 field 的值加上增量 increment</span></span><br><span class="line">	System.out.println(jedis.hincrBy(key, <span class="string">&quot;bbb&quot;</span>, <span class="number">100</span>));</span><br><span class="line">	System.out.println(jedis.hgetAll(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jedis操作事务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Transaction t = jedis.multi();</span><br><span class="line">	t.set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">	Response&lt;String&gt; response = t.get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">	 </span><br><span class="line">	t.zadd(<span class="string">&quot;foo&quot;</span>, <span class="number">1</span>, <span class="string">&quot;barowitch&quot;</span>);</span><br><span class="line">	t.zadd(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, <span class="string">&quot;barinsky&quot;</span>);</span><br><span class="line">	t.zadd(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, <span class="string">&quot;barikoviev&quot;</span>);</span><br><span class="line">	Response&lt;Set&lt;String&gt;&gt; sose = t.zrange(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>); <span class="comment">//  返回全部相应并以有序集合的方式返回</span></span><br><span class="line">	System.out.println(response);</span><br><span class="line">	System.out.println(sose);</span><br><span class="line">	t.exec(); <span class="comment">// 此行注意，不能缺少</span></span><br><span class="line">	 </span><br><span class="line">	String foolbar = response.get(); <span class="comment">// Response.get() 可以从响应中获取数据</span></span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">int</span> soseSize = sose.get().size(); <span class="comment">// sose.get() 会立即调用set方法</span></span><br><span class="line">	System.out.println(foolbar);</span><br><span class="line">	System.out.println(sose.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jedis操作管道</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionPipeling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pipeline p = jedis.pipelined();<span class="comment">//开一个管道</span></span><br><span class="line"> </span><br><span class="line">        p.set(<span class="string">&quot;fool&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">        p.zadd(<span class="string">&quot;foo&quot;</span>, <span class="number">1</span>, <span class="string">&quot;barowitch&quot;</span>);</span><br><span class="line">        p.zadd(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, <span class="string">&quot;barinsky&quot;</span>);</span><br><span class="line">        p.zadd(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, <span class="string">&quot;barikoviev&quot;</span>);</span><br><span class="line">        Response&lt;String&gt; pipeString = p.get(<span class="string">&quot;fool&quot;</span>);</span><br><span class="line">        Response&lt;Set&lt;String&gt;&gt; sose = p.zrange(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(pipeString);</span><br><span class="line">        System.out.println(sose);</span><br><span class="line"> </span><br><span class="line">        p.sync();<span class="comment">//提交</span></span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(p.get(<span class="string">&quot;fool&quot;</span>));</span><br><span class="line">        System.out.println(p.zrange(<span class="string">&quot;foo&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> soseSize = sose.get().size();</span><br><span class="line">        Set&lt;String&gt; setBack = sose.get();</span><br><span class="line"> </span><br><span class="line">        System.out.println(soseSize);</span><br><span class="line">        System.out.println(setBack);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-基础8-配置文件讲解</title>
    <url>/2020/07/05/Redis-%E5%9F%BA%E7%A1%808-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Redis配置文件样例</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note on units: when memory size is needed, it is possible to specifiy</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> it <span class="keyword">in</span> the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 1k =&gt; 1000 bytes</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid</span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定Redis监听端口，默认端口为6379</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果指定0端口，表示Redis不监听TCP连接</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑定的主机地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the path <span class="keyword">for</span> the unix socket that will be used to listen <span class="keyword">for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incoming connections. There is no default, so Redis will not listen</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> on a unix socket when not specified.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># unixsocket /tmp/redis.sock</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocketperm 755</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> debug (很多信息, 对开发／测试比较有用)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> notice (moderately verbose, what you want <span class="keyword">in</span> production probably)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel verbose</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志记录方式，默认为标准输出，如果配置为redis为守护进程方式运行，而这里又配置为标准输出，则日志将会发送给/dev/null</span></span><br><span class="line">logfile stdout</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">enable</span> logging to the system logger, just <span class="built_in">set</span> <span class="string">&#x27;syslog-enabled&#x27;</span> to yes,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and optionally update the other syslog parameters to suit your needs.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-enabled no</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the syslog identity.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-ident redis</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-facility local0</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置数据库的数量，默认数据库为0，可以使用select &lt;dbid&gt;命令在连接上指定数据库id</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dbid是从0到‘databases’-1的数目</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### SNAPSHOTTING  #################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Save the DB on disk:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#   满足以下条件将会同步数据:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   900秒（15分钟）内有1个更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   300秒（5分钟）内有10个更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   60秒内有10000个更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Note: 可以把所有“save”行注释掉，这样就取消同步操作了</span></span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定本地数据库文件名，默认值为dump.rdb</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 工作目录.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定本地数据库存放目录，文件名由上一个dbfilename配置项指定</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Also the Append Only File will be created inside this directory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意，这里只能指定一个目录，不能指定文件名</span></span><br><span class="line">dir ./</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################ REPLICATION #################################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> so <span class="keyword">for</span> example it is possible to configure the slave to save the DB with a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> different interval, or to listen to another port, and so on.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置当本机为slav服务时，设置master服务的ip地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当master服务设置了密码保护时，slav服务连接master的密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下文的“requirepass”配置项可以指定密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> When a slave lost the connection with the master, or when the replication</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is still <span class="keyword">in</span> progress, the slave can act <span class="keyword">in</span> two different ways:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 1) if slave-serve-stale-data is set to &#x27;yes&#x27; (the default) the slave will</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    still reply to client requests, possibly with out of data data, or the</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    data <span class="built_in">set</span> may just be empty <span class="keyword">if</span> this is the first synchronization.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 2) if slave-serve-stale data is set to &#x27;no&#x27; the slave will reply with</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    an error <span class="string">&quot;SYNC with master in progress&quot;</span> to all the kind of commands</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    but to INFO and SLAVEOF.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">slave-serve-stale-data yes</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Slaves send PINGs to server <span class="keyword">in</span> a predefined interval. It<span class="string">&#x27;s possible to change</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> this interval with the repl_ping_slave_period option. The default value is 10</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> seconds.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># repl-ping-slave-period 10</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> The following option sets a timeout for both Bulk transfer I/O timeout and</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> master data or ping response timeout. The default value is 60 seconds.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># It is important to make sure that this value is greater than the value</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> specified for repl-ping-slave-period otherwise a timeout will be detected</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> every time there is low traffic between the master and the slave.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># repl-timeout 60</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">################################# SECURITY ###################################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Warning: since Redis is pretty fast an outside user can try up to</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 150k passwords per second against a good box. This means that you should</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> use a very strong password otherwise it will be very easy to break.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth &lt;password&gt;命令提供密码，默认关闭</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> requirepass foobared</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Command renaming.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># It is possilbe to change the name of dangerous commands in a shared</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> environment. For instance the CONFIG command may be renamed into something</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> of hard to guess so that it will be still available for internal-use</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> tools but not available for general clients.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Example:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># It is also possilbe to completely kill a command renaming it into</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> an empty string:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># rename-command CONFIG &quot;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">################################## LIMITS ####################################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 如果设置maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> maxclients 128</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Don&#x27;</span>t use more memory than the specified amount of bytes.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> When the memory <span class="built_in">limit</span> is reached Redis will try to remove keys with an</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> EXPIRE <span class="built_in">set</span>. It will try to start freeing keys that are going to expire</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> little time and preserve keys with a longer time to live.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis will also try to remove objects from free lists <span class="keyword">if</span> possible.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># If all this fails, Redis will start to reply with errors to commands</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that will use more memory, like SET, LPUSH, and so on, and will <span class="built_in">continue</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to reply to most read-only commands like GET.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># WARNING: maxmemory can be a good idea mainly if you want to use Redis as a</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&#x27;state&#x27;</span> server or cache, not as a real DB. When Redis is used as a real</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> database the memory usage will grow over the weeks, it will be obvious <span class="keyword">if</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> it is going to use too much memory <span class="keyword">in</span> the long run, and you<span class="string">&#x27;ll have the time</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> to upgrade. With maxmemory after the limit is reached you&#x27;</span>ll start to get</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> errors <span class="keyword">for</span> write operations, and this may even lead to DB inconsistency.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is reached? You can select among five behavior:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-lru -&gt; remove the key with an expire <span class="built_in">set</span> using an LRU algorithm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-random -&gt; remove a random key with an expire <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> allkeys-&gt;random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> noeviction -&gt; don<span class="string">&#x27;t expire at all, just return an error on write operations</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Note: with all the kind of policies, Redis will return an error on write</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">       operations, when there are not suitable keys for eviction.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash">#       At the date of writing this commands are: set setnx setex append</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">       getset mset msetnx exec sort</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># The default is:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># maxmemory-policy volatile-lru</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> LRU and minimal TTL algorithms are not precise algorithms but approximated</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> algorithms (in order to save memory), so you can select as well the sample</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> size to check. For instance for default Redis will check three keys and</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> pick the one that was used less recently, you can change the sample size</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> using the following configuration directive.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># maxmemory-samples 3</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Note that you can have both the async dumps and the append only file if you</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> like (you have to comment the &quot;save&quot; statements above to disable the dumps).</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Still if append only mode is enabled Redis will load the data from the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> log file at startup ignoring the dump.rdb file.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> log file in background when it gets too big.</span></span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定更新日志文件名，默认为appendonly.aof</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> appendfilename appendonly.aof</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> The fsync() call tells the Operating System to actually write data on disk</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> instead to wait for more data in the output buffer. Some OS will really flush</span></span> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> data on disk, some other OS will just try to do it ASAP.</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定更新日志条件，共有3个可选值：</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> no:表示等操作系统进行数据缓存同步到磁盘（快）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> always:表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> everysec:表示每秒同步一次（折衷，默认值）</span></span></span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> appendfsync no</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> When the AOF fsync policy is set to always or everysec, and a background</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> saving process (a background save or AOF log background rewriting) is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> performing a lot of I/O against the disk, in some Linux configurations</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Redis may block too long on the fsync() call. Note that there is no fix for</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> this currently, as even performing fsync in a different thread will block</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> our synchronous write(2) call.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># In order to mitigate this problem it&#x27;</span>s possible to use the following option</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that will prevent fsync() from being called <span class="keyword">in</span> the main process <span class="keyword">while</span> a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BGSAVE or BGREWRITEAOF is <span class="keyword">in</span> progress.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># This means that while another child is saving the durability of Redis is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the same as <span class="string">&quot;appendfsync none&quot;</span>, that <span class="keyword">in</span> pratical terms means that it is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> possible to lost up to 30 seconds of <span class="built_in">log</span> <span class="keyword">in</span> the worst scenario (with the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> default Linux settings).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you have latency problems turn this to <span class="string">&quot;yes&quot;</span>. Otherwise leave it as</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;no&quot;</span> that is the safest pick from the point of view of durability.</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis is able to automatically rewrite the <span class="built_in">log</span> file implicitly calling</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BGREWRITEAOF when the AOF <span class="built_in">log</span> size will growth by the specified percentage.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> latest rewrite (or <span class="keyword">if</span> no rewrite happened since the restart, the size of</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the AOF at startup is used).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># This base size is compared to the current size. If the current size is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you need to specify a minimal size <span class="keyword">for</span> the AOF file to be rewritten, this</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is useful to avoid rewriting the AOF file even <span class="keyword">if</span> the percentage increase</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> is reached but it is still pretty small.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Specify a precentage of zero in order to disable the automatic AOF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rewrite feature.</span></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# SLOW LOG ###################################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The Redis Slow Log is a system to <span class="built_in">log</span> queries that exceeded a specified</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> but just the time needed to actually execute the <span class="built_in">command</span> (this is the only</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> stage of <span class="built_in">command</span> execution <span class="built_in">where</span> the thread is blocked and can not serve</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> other requests <span class="keyword">in</span> the meantime).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can configure the slow <span class="built_in">log</span> with two parameters: one tells Redis</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> what is the execution time, <span class="keyword">in</span> microseconds, to exceed <span class="keyword">in</span> order <span class="keyword">for</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span> to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slow <span class="built_in">log</span>. When a new <span class="built_in">command</span> is logged the oldest one is removed from the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> queue of logged commands.</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following time is expressed <span class="keyword">in</span> microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to one second. Note that a negative number disables the slow <span class="built_in">log</span>, <span class="keyword">while</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a value of zero forces the logging of every <span class="built_in">command</span>.</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> There is no <span class="built_in">limit</span> to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can reclaim memory used by the slow <span class="built_in">log</span> with SLOWLOG RESET.</span></span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### VIRTUAL MEMORY ###############################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## WARNING! Virtual Memory is deprecated in Redis 2.4</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The use of Virtual Memory is strongly discouraged.</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## WARNING! Virtual Memory is deprecated in Redis 2.4</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The use of Virtual Memory is strongly discouraged.</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Virtual Memory allows Redis to work with datasets bigger than the actual</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> amount of RAM needed to hold the whole dataset <span class="keyword">in</span> memory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> In order to <span class="keyword">do</span> so very used keys are taken <span class="keyword">in</span> memory <span class="keyword">while</span> the other keys</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> are swapped into a swap file, similarly to what operating systems <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with memory pages.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定是否启用虚拟内存机制，默认值为no，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把vm-enabled设置为yes，根据需要设置好接下来的三个VM参数，就可以启动VM了</span></span><br><span class="line">vm-enabled no</span><br><span class="line"><span class="meta">#</span><span class="bash"> vm-enabled yes</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is the path of the Redis swap file. As you can guess, swap files</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> can<span class="string">&#x27;t be shared by different Redis instances, so make sure to use a swap</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> file for every redis process you are running. Redis will complain if the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> swap file is already in use.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># Redis交换文件最好的存储是SSD（固态硬盘）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> *** WARNING *** if you are using a shared hosting the default of putting</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> the swap file under /tmp is not secure. Create a dir with access granted</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> only to Redis user and configure Redis to create the swap file there.</span></span></span><br><span class="line">vm-swap-file /tmp/redis.swap</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> With vm-max-memory 0 the system will swap everything it can. Not a good</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> default, just specify the max amount of RAM you can in bytes, but it&#x27;</span>s</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> better to leave some margin. For instance specify an amount of RAM</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> that<span class="string">&#x27;s more or less between 60 and 80% of your free RAM.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多少，所有索引数据都是内存存储的（Redis的索引数据就是keys）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 也就是说当vm-max-memory设置为0的时候，其实是所有value都存在于磁盘。默认值为0</span></span></span><br><span class="line">vm-max-memory 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 建议如果存储很多小对象，page大小最后设置为32或64bytes；如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值</span></span></span><br><span class="line">vm-page-size 32</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 设置swap文件中的page数量由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个pages将消耗1byte的内存</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> swap空间总容量为 vm-page-size * vm-pages</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># With the default of 32-bytes memory pages and 134217728 pages Redis will</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> use a 4 GB swap file, that will use 16 MB of RAM for the page table.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># It&#x27;</span>s better to use the smallest acceptable value <span class="keyword">for</span> your application,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> but the default is large <span class="keyword">in</span> order to work <span class="keyword">in</span> most conditions.</span></span><br><span class="line">vm-pages 134217728</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Max number of VM I/O threads running at the same time.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This threads are used to <span class="built_in">read</span>/write data from/to swap file, since they</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> also encode and decode objects from disk to memory or the reverse, a bigger</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> number of threads can <span class="built_in">help</span> with big objects even <span class="keyword">if</span> they can<span class="string">&#x27;t help with</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> I/O itself as the physical device may not be able to couple with many</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> reads/writes operations at the same time.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 设置访问swap文件的I/O线程数，最后不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟，默认值为4</span></span></span><br><span class="line">vm-max-threads 4</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">############################## ADVANCED CONFIG ###############################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Hashes are encoded in a special way (much more memory efficient) when they</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> have at max a given numer of elements, and the biggest element does not</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> exceed a given threshold. You can configure this limits with the following</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> configuration directives.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span></span></span><br><span class="line">hash-max-zipmap-entries 512</span><br><span class="line">hash-max-zipmap-value 64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Similarly to hashes, small lists are also encoded in a special way in order</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> to save a lot of space. The special representation is only used when</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> you are under the following limits:</span></span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Sets have a special encoding in just one case: when a set is composed</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> of just strings that happens to be integers in radix 10 in the range</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> of 64 bit signed integers.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> The following configuration setting sets the limit in the size of the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> set in order to use this special memory saving encoding.</span></span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Similarly to hashes and lists, sorted sets are also specially encoded in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> order to save a lot of space. This encoding is only used when the length and</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> elements of a sorted set are below the following limits:</span></span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> order to help rehashing the main Redis hash table (the one mapping top-level</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> keys to values). The hash table implementation redis uses (see dict.c)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> performs a lazy rehashing: the more operation you run into an hash table</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> that is rhashing, the more rehashing &quot;steps&quot; are performed, so if the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> server is idle the rehashing is never complete and some more memory is used</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> by the hash table.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> The default is to use this millisecond 10 times every second in order to</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> active rehashing the main dictionaries, freeing memory when possible.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="bash"># If unsure:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> not a good thing in your environment that Redis can reply form time to time</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> to queries with 2 milliseconds delay.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定是否激活重置哈希，默认为开启</span></span></span><br><span class="line">activerehashing yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">################################# INCLUDES ###################################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> include /path/to/local.conf</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> include /path/to/other.conf</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis Redis基础 Redis配置</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-Gateway</title>
    <url>/2021/11/24/SpringCloud-Gateway/</url>
    <content><![CDATA[<h4 id="Gateway-API网关"><a href="#Gateway-API网关" class="headerlink" title="Gateway(API网关)"></a>Gateway(API网关)</h4><h5 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h5><p>API网关作用就是把各个服务对外提供的API汇聚起来，让外界看起来是一个统一的接口。同时也可在网关中提供额外的功能。</p>
<p><strong>总结：网关就是所有项目的一个统一入口。</strong></p>
<hr>
<h4 id="网关组成"><a href="#网关组成" class="headerlink" title="网关组成"></a>网关组成</h4><p><strong>网关 = 路由转发 + 过滤器（编写额外功能）</strong></p>
<ul>
<li><p>路由转发</p>
<p>接收外界请求，通过网关的路由转发，转发到后端的服务上。</p>
<p>如果只有这个一个功能看起来和之前学习的Nginx反向代理服务器很像，外界访问nginx，由nginx做负载均衡，后把请求转发到对应服务器上。</p>
</li>
<li><p>过滤器</p>
<p>网关非常重要的功能就是过滤器。</p>
<p>对于我们来说比较常用的功能有网关的容错、限流以及请求及相应的额外处理。</p>
</li>
</ul>
<span id="more"></span>

<hr>
<h4 id="Spring-Cloud-Gateway-介绍"><a href="#Spring-Cloud-Gateway-介绍" class="headerlink" title="Spring Cloud Gateway 介绍"></a>Spring Cloud Gateway 介绍</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Spring Cloud Gateway是Spring Cloud 的二级子项目，提供了微服务网关功能，包含：权限安全、监控/指标等功能。</p>
<h5 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h5><ul>
<li><p>Route</p>
<p>Route中文称为路由，Gateway里面的Route是主要学习内容，一个Gateway项目可以包含多个Route。</p>
<p>一个路由包含ID、URI、Predicate集合、Filter集合。</p>
</li>
<li><p>Predicate</p>
<p>谓词时学习Gateway比较重要的一点，简单点理解谓词就是一些附加条件和内容</p>
</li>
<li><p>Filter</p>
<p>所有生效的Filter都是GatewayFilter的实例。在Gateway运行过程中Filter负责在代理服务“之前”或“之后”去做一些事情</p>
</li>
</ul>
<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p><img src="/2021/11/24/SpringCloud-Gateway/gateway%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="gateway流程图"></p>
<hr>
<h4 id="Gateway-入门案例"><a href="#Gateway-入门案例" class="headerlink" title="Gateway 入门案例"></a>Gateway 入门案例</h4><ul>
<li><h5 id="Predicate-功能介绍"><a href="#Predicate-功能介绍" class="headerlink" title="Predicate 功能介绍"></a>Predicate 功能介绍</h5></li>
</ul>
<table>
<thead>
<tr>
<th>规则</th>
<th>实例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Path</td>
<td>- Path=/auth/**</td>
<td>当请求的路径为auth开头的时，转发到 serverAuth 服务器上</td>
</tr>
<tr>
<td>Before</td>
<td>- Before=2021-11-20T17:53:00.000+08:00</td>
<td>在某个时间之前的请求才会被转发到 <a href="http://localhost:9023服务器上">http://localhost:9023服务器上</a></td>
</tr>
<tr>
<td>After</td>
<td>- Before=2021-11-20T17:53:00.000+08:00</td>
<td>在某个时间之后的请求才会被转发</td>
</tr>
<tr>
<td>Between</td>
<td>- Between=2021-11-20T17:53:00.000+08:00, 2021-11-20T18:10:00.000+08:00</td>
<td>在某个时间段之间的才会被转发</td>
</tr>
<tr>
<td>Cookie</td>
<td>- Cookie=cookiename, cookievalue</td>
<td>路由匹配请求存在cookie名为cookiename，cookie内容匹配cookievalue的</td>
</tr>
<tr>
<td>Header</td>
<td>- Header=X-Request-Id, \d+</td>
<td>携带参数X-Request-Id或者满足\d+的请求头才会匹配</td>
</tr>
<tr>
<td>Host</td>
<td>- Host=<a href="http://www.hd123.com/">www.hd123.com</a></td>
<td>当主机名为<a href="http://www.hd123.com的时候直接转发到http//localhost:9023%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">www.hd123.com的时候直接转发到http://localhost:9023服务器上</a></td>
</tr>
<tr>
<td>Method</td>
<td>- Method=GET</td>
<td>只有GET方法才会匹配转发请求，还可以限定POST、PUT等请求方式</td>
</tr>
<tr>
<td>Query</td>
<td>- Query=abc,jqk</td>
<td>必须有查询名称为 abc。 值为 jqk 才进行转发</td>
</tr>
<tr>
<td>RemoteAdd</td>
<td>- RemoteAddr=127.0.0.1</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><h5 id="Filter-功能介绍"><a href="#Filter-功能介绍" class="headerlink" title="Filter 功能介绍"></a>Filter 功能介绍</h5></li>
</ul>
<table>
<thead>
<tr>
<th>规则</th>
<th>实例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>AddRequestHeader</strong></td>
<td>- AddRequestHeader=MyHeader,jqk</td>
<td>添加请求头参数，参数和值之间使用逗号分隔</td>
</tr>
<tr>
<td><strong>AddRequestParamete</strong></td>
<td>- AddRequestParameter=name,bjsxt</td>
<td>添加请求表单参数，多个参数需要有多个过滤器。</td>
</tr>
<tr>
<td><strong>AddResponseHeader</strong></td>
<td>- AddResponseHeader=MyHeader, jqk</td>
<td>添加响应头</td>
</tr>
<tr>
<td><strong>PrefixPath</strong></td>
<td></td>
<td>匹配所有前缀满足条件的URI</td>
</tr>
<tr>
<td><strong>StripPrefix</strong></td>
<td>- StripPrefix=1</td>
<td>跳过路由uri中前几段后发送给下游</td>
</tr>
<tr>
<td>FallbackHeadersent</td>
<td></td>
<td>可以添加降级时的异常信息</td>
</tr>
<tr>
<td>CircuitBreakerment</td>
<td></td>
<td>实现熔断时使用，支持CircuitBreaker和Hystrix两种pt;</td>
</tr>
<tr>
<td>FallbackHeadersent</td>
<td></td>
<td>可以添加降级时的异常信息</td>
</tr>
<tr>
<td>DedupeResponseHeader</td>
<td></td>
<td>对指定响应头去重复</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td></td>
<td>限流过滤器。</td>
</tr>
<tr>
<td>RedirectTo</td>
<td></td>
<td>重定向。有两个参数，status和url。其中status应该300系列重定向状态码</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td></td>
<td>删除请求头参数</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td></td>
<td>删除响应头参数</td>
</tr>
<tr>
<td>RemoveRequestParameter</td>
<td></td>
<td>删除请求参数</td>
</tr>
<tr>
<td>RewritePath</td>
<td></td>
<td>重写请求路径</td>
</tr>
<tr>
<td>RewriteResponseHeader</td>
<td></td>
<td>重写响应头参数</td>
</tr>
<tr>
<td>SaveSession</td>
<td></td>
<td>如果项目中使用Spring Security和Spring Session整合时，此属性特别重要</td>
</tr>
<tr>
<td>SecureHeaders</td>
<td></td>
<td>具有权限验证时，建议的头信息内容</td>
</tr>
<tr>
<td>SetPath</td>
<td></td>
<td>当前请求路径为/red/blue时会将/blue发送给下游。</td>
</tr>
<tr>
<td>SetRequestHeader</td>
<td></td>
<td>替换请求参数头数。不是添加</td>
</tr>
<tr>
<td>SetResponseHeader</td>
<td></td>
<td>替换响应头参数</td>
</tr>
<tr>
<td>SetStatus</td>
<td></td>
<td>设置响应状态码</td>
</tr>
<tr>
<td>Retry</td>
<td></td>
<td>设置重试次数</td>
</tr>
<tr>
<td>RequestSize</td>
<td></td>
<td>请求最大大小。包含maxSize参数，可以有单位“KB”或“MB”默认为“B”</td>
</tr>
<tr>
<td>ModifyRequestBody</td>
<td></td>
<td>修改请求内容</td>
</tr>
<tr>
<td>ModifyResponseBody</td>
<td></td>
<td>修改响应体</td>
</tr>
</tbody></table>
<hr>
<h4 id="gateway限流（基于redis的lua令牌桶算法）"><a href="#gateway限流（基于redis的lua令牌桶算法）" class="headerlink" title="gateway限流（基于redis的lua令牌桶算法）"></a>gateway限流（基于redis的lua令牌桶算法）</h4><ul>
<li>令牌桶算法可以说是对漏桶算法的一种改进。</li>
<li>在桶中放令牌，请求获取令牌后才能继续执行。如果桶中没有令牌，请求可以选择进行等待或者直接拒绝。</li>
<li>由于桶中令牌是按照一定速率放置的，所以可以一定程度解决突发访问。如果桶中令牌最多有100个，qps最大为100</li>
</ul>
<p><img src="/2021/11/24/SpringCloud-Gateway/gateway%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="gateway流程图"></p>
<p><strong>代码中配置限流key</strong></p>
<p>just()方法参数表示根据什么进行限流。实例中是根据主机名进行限流。参数值影响Redis中key中红色部分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbcComponet</span> <span class="keyword">implements</span> <span class="title">KeyResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">resolve</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="网关配置文件"><a href="#网关配置文件" class="headerlink" title="网关配置文件"></a>网关配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dee5dbc7-a29a-4bdc-a483-5fbdf7ebb5bc</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dee5dbc7-a29a-4bdc-a483-5fbdf7ebb5bc</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment">#开启从注册中心动态创建路由功能，利用微服务名进行路由</span></span><br><span class="line">          <span class="attr">lowerCaseServiceId:</span> <span class="literal">true</span> <span class="comment"># 开启大小写转换</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># - id: routeOrder</span></span><br><span class="line">        <span class="comment">#   uri: lb://serverOrder</span></span><br><span class="line">        <span class="comment">#   predicates:</span></span><br><span class="line">        <span class="comment">#       - Path=/auth/** #地址匹配</span></span><br><span class="line">        <span class="comment">#       - Weight=group,9</span></span><br><span class="line">        <span class="comment">#   filters:</span></span><br><span class="line">        <span class="comment">#    - StripPrefix=1 #去除前缀数量</span></span><br><span class="line">           </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">routeAuth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://serverAuth</span></span><br><span class="line">          <span class="comment">#uri: http://www.google.com</span></span><br><span class="line">          <span class="comment">#uri: http://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment">#PATH</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Path=/auth/**</span> <span class="comment">#地址匹配</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Weight=group,1</span></span><br><span class="line">              <span class="comment">#- Query=smile #只要请求中包含 smile 属性的参数即可匹配路由</span></span><br><span class="line">              <span class="comment">#- Query=keep, pu. #当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由。</span></span><br><span class="line">              <span class="comment">#- RemoteAddr=192.168.1.1/24 指定的ip才可以进行转发</span></span><br><span class="line">            <span class="comment">#DATE</span></span><br><span class="line">              <span class="comment">#- After=2021-11-20T17:53:00.000+08:00  #大于设定时间，路由才会匹配</span></span><br><span class="line">              <span class="comment">#- Before=2021-11-20T17:53:00.000+08:00 #小于设定时间，路由才会匹配</span></span><br><span class="line">              <span class="comment">#- Between=2021-11-20T17:53:00.000+08:00, 2021-11-20T18:10:00.000+08:00</span></span><br><span class="line">            <span class="comment">#COOKIE</span></span><br><span class="line">              <span class="comment">#- Cookie=cookiename, cookievalue #路由匹配请求存在cookie名为cookiename，cookie内容匹配cookievalue的</span></span><br><span class="line">            <span class="comment">#HEADER</span></span><br><span class="line">              <span class="comment">#- Header=X-Request-Id, \d+ #路由匹配存在名为X-Request-Id，内容为正则匹配的value(数字的header的请求)，将请求转发</span></span><br><span class="line">              <span class="comment">#- Host=**.baidu.com #路由匹配请求头中 host属性为 **.baidu.com  将请求转发</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">RemoteAddr=127.0.0.1</span> <span class="comment">#允许访问的客户端地址。</span></span><br><span class="line">            <span class="comment">#Method</span></span><br><span class="line">              <span class="comment">#- Method=GET,POST #指定的请求方法，才可以进行转发</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment">#去除前缀数量</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddRequestHeader=MyHeader,</span> <span class="string">jqk</span> <span class="comment">#添加请求头参数，参数和值之间使用逗号分隔</span></span><br><span class="line">            <span class="comment">#- AddRequestParameter=name,bjsxt #添加请求表单参数，多个参数需要有多个过滤器。</span></span><br><span class="line">            <span class="comment">#- RemoveRequestHeader=X-Request-Foo #去掉请求头信息 X-Request-Foo</span></span><br><span class="line">            <span class="comment">#- RemoveResponseHeader=X-Request-Foo #去掉某个回执头信息：</span></span><br><span class="line"><span class="comment">#            - name: Hystrix # 熔断降级</span></span><br><span class="line"><span class="comment">#              args:</span></span><br><span class="line"><span class="comment">#                name: fallbackcmd</span></span><br><span class="line"><span class="comment">#                fallbackUri: forward:/fallback</span></span><br><span class="line"><span class="comment">#          - name: RequestRateLimiter #限流</span></span><br><span class="line"><span class="comment">#            args:</span></span><br><span class="line"><span class="comment">#              key-resolver: &#x27;#&#123;@abcComponet&#125;&#x27;</span></span><br><span class="line"><span class="comment">#              redis-rate-limiter.replenishRate: 10</span></span><br><span class="line"><span class="comment">#              redis-rate-limiter.burstCapacity: 3</span></span><br><span class="line"><span class="comment">#      default-filters:</span></span><br><span class="line"><span class="comment">#        - name: Hystrix</span></span><br><span class="line"><span class="comment">#          args:</span></span><br><span class="line"><span class="comment">#            name: fallbackcmd</span></span><br><span class="line"><span class="comment">#            fallbackUri: forward:/fallback</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意点：gateway 依赖会与 spring-boot-starter-web 冲突</span></span><br><span class="line"><span class="comment">gateway构建与Spring 5+，基于Spring boot 2.x响应式的、非阻塞式的API，同时，他支持webSockets和spring框架紧密集成</span></span><br><span class="line"><span class="comment">报错原因：启动时默认使用了spring-boot-starter-web的内置容器，不支持非阻塞 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网关依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 熔断器依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--限流redis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网关</category>
      </categories>
      <tags>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-Nacos</title>
    <url>/2021/11/24/SpringCloud-Nacos/</url>
    <content><![CDATA[<h4 id="SpringCloud-集成-Nacos"><a href="#SpringCloud-集成-Nacos" class="headerlink" title="SpringCloud 集成 Nacos"></a>SpringCloud 集成 Nacos</h4><ul>
<li><p>版本依赖关系查看</p>
<p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">SpringCloud组件版本关系查看</a></p>
</li>
<li><p>创建服务项目，pom依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<h4 id="服务注册到Nacos"><a href="#服务注册到Nacos" class="headerlink" title="服务注册到Nacos"></a>服务注册到Nacos</h4><ul>
<li><p><strong>生成配置文件：bootstrap.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="comment"># 命名空间</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">f1d837cd-b90f-4df4-b766-1d0f22b12597</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="comment"># 命名空间</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">f1d837cd-b90f-4df4-b766-1d0f22b12597</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">gateway</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>启动类加入注解：@EnableDiscoveryClient，用于服务注册</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GatewayApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>权限认证</strong></p>
<p>修改nacos配置⽂件：nacos\conf\application.properties</p>
<p>nacos.core.auth.caching.enabled=true</p>
<p>修改项⽬配置⽂件：bootstrap.yml</p>
</li>
</ul>
<p><img src="/2021/11/24/SpringCloud-Nacos/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E9%85%8D%E7%BD%AE.png" alt="权限认证"></p>
<hr>
<h4 id="Nacos作为配置中心"><a href="#Nacos作为配置中心" class="headerlink" title="Nacos作为配置中心"></a>Nacos作为配置中心</h4><ul>
<li><p><strong>配置列表新增配置</strong></p>
<p><img src="/2021/11/24/SpringCloud-Nacos/nacos%E6%96%B0%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="nacos新增配置"></p>
</li>
</ul>
<ul>
<li><p><strong>Data ID格式： {prefix}-{spring.profiles.active}.{file-extension}</strong></p>
<ul>
<li><strong>prefix</strong>：默认为spring.application.name的值，也可以通过spring.cloud.nacos.config.prefix指定值;</li>
<li><strong>spring.profiles.active</strong>：当前环境对应的profile，如dev，sit，uat。当spring.profiles.active为null时，拼接⽅式变为： {prefix}.{file-extension};</li>
<li><strong>file-extension</strong>：取值为properties或者yaml，对应配置⽂件类型; </li>
</ul>
</li>
<li><p><strong>修改配置⽂件bootstrap.yml</strong></p>
<p><img src="/2021/11/24/SpringCloud-Nacos/%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.png" alt="指定配置文件格式"></p>
</li>
<li><p><strong>增加Controller获取配置值</strong></p>
<ul>
<li>@RefreshScope 注解⽀持配置内容动态刷新</li>
</ul>
<p><img src="/2021/11/24/SpringCloud-Nacos/%E5%8A%A0%E5%85%A5%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE%E6%B3%A8%E8%A7%A3.png" alt="加入动态刷新配置注解"></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解-@Qualifier</title>
    <url>/2020/04/19/Spring%E6%B3%A8%E8%A7%A3-Qualifier/</url>
    <content><![CDATA[<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p>在Controller 中需要注入 service 那么我这个 service 有两个实现类如何区分开着两个 impl呢？</p>
<p>Qualifier 的意思是合格者，通过这个标识，表明哪个实现类才是我们需要的，添加 @Qualifier 注解，需要注意的是 @Qualifier 的参数名称为我们之前定义@Service注解之一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseService</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;implBaseService1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplBaseService1</span> <span class="keyword">implements</span> <span class="title">BaseService</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;implBaseService2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplBaseService2</span> <span class="keyword">implements</span> <span class="title">BaseService</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Qualifier(&quot;implBaseService1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseService baseService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring注解</category>
      </categories>
      <tags>
        <tag>Spring注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解-Transactional</title>
    <url>/2020/07/05/Spring%E6%B3%A8%E8%A7%A3-Transactional/</url>
    <content><![CDATA[<h4 id="开启注解方式"><a href="#开启注解方式" class="headerlink" title="开启注解方式"></a>开启注解方式</h4><ul>
<li>xml中配置事务配置中心</li>
<li>@EnableTransactionManagement 注解开启事务管理功能</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="Transaction不生效情况"><a href="#Transaction不生效情况" class="headerlink" title="@Transaction不生效情况"></a>@Transaction不生效情况</h4><ul>
<li>@Transaction 在private 、protected方法是不生效的</li>
<li>在同一个 bean里，嵌套的public @Transactional 也不生效，因为同一个类中函数相互调用的时候，内部函数添加@Transactional注解无效。@Transactional注解只有外部调用才有效。</li>
</ul>
<p>解决方法：</p>
<p>​    另外一个 @service bean 中新建一个 @Transaction 方法</p>
<hr>
<h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><table>
<thead>
<tr>
<th>事务传播行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Transactional(propagation=Propagation.<strong>REQUIRED</strong>)</td>
<td><strong>如果有事务， 那么加入事务， 没有的话新建一个</strong>(默认情况)</td>
</tr>
<tr>
<td>@Transactional(propagation=Propagation.<strong>NOT_SUPPORTED</strong>)</td>
<td>容器不为这个方法开启事务</td>
</tr>
<tr>
<td>@Transactional(propagation=Propagation.<strong>REQUIRES_NEW</strong>)</td>
<td>不管是否存在事务，都创建一个新的事务，原来的挂起，新的执行完毕，继续执行老的事务</td>
</tr>
<tr>
<td>@Transactional(propagation=Propagation.<strong>MANDATORY</strong>)</td>
<td>必须在一个已有的事务中执行，否则抛出异常</td>
</tr>
<tr>
<td>@Transactional(propagation=Propagation.<strong>NEVER</strong>)</td>
<td>必须在一个没有的事务中执行，否则抛出异常(与Propagation.MANDATORY相反)</td>
</tr>
<tr>
<td>@Transactional(propagation=Propagation.<strong>SUPPORTS</strong>)</td>
<td>如果其他bean调用这个方法，在其他bean中声明事务，那就用事务。如果其他bean没有声明事务，那就不用事务</td>
</tr>
</tbody></table>
<hr>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table>
<thead>
<tr>
<th>隔离级别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Transactional(isolation = Isolation.<strong>READ_UNCOMMITTED</strong>)</td>
<td>读取未提交数据(会出现脏读， 不可重复读)，基本不使用</td>
</tr>
<tr>
<td>@Transactional(isolation = Isolation.<strong>READ_COMMITTED</strong>)(SQLSERVER默认)</td>
<td>读取已提交数据(会出现不可重复读和幻读)</td>
</tr>
<tr>
<td>@Transactional(isolation = Isolation.<strong>REPEATABLE_READ</strong>)</td>
<td>可重复读(会出现幻读)</td>
</tr>
<tr>
<td>@Transactional(isolation = Isolation.<strong>SERIALIZABLE</strong>)</td>
<td>串行化</td>
</tr>
</tbody></table>
<hr>
<h4 id="回滚机制"><a href="#回滚机制" class="headerlink" title="回滚机制"></a>回滚机制</h4><p>​    默认配置下，Spring 只有抛出 非受检异常（unchecked exception） 才回滚该事务，也就是抛出的异常为RuntimeException的子类(Errors也会导致事务回滚)。而抛出checked异常则不会导致事务回滚。</p>
<p>​     rollbackFor、rollbackForClassName用于设置那些异常需要回滚；noRollbackFor、noRollbackForClassName用于设置那些异常不需要回滚。他们就是在设置事务的回滚规则。</p>
<hr>
<h4 id="超时属性"><a href="#超时属性" class="headerlink" title="超时属性"></a>超时属性</h4><p>​    timeout用于设置事务的超时属性。</p>
<hr>
<h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><p>​    readOnly用于设置事务是否只读属性。</p>
]]></content>
      <categories>
        <category>Spring注解</category>
      </categories>
      <tags>
        <tag>Spring注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解-缓存注解</title>
    <url>/2020/04/19/Spring%E6%B3%A8%E8%A7%A3-%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="Spring缓存功能注解：-Cacheable、-CachePut、-CacheEvict、-Caching"><a href="#Spring缓存功能注解：-Cacheable、-CachePut、-CacheEvict、-Caching" class="headerlink" title="Spring缓存功能注解：@Cacheable、@CachePut、@CacheEvict、@Caching"></a>Spring缓存功能注解：@Cacheable、@CachePut、@CacheEvict、@Caching</h4><hr>
<h4 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h4><p>@Cacheable可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。@Cacheable可以指定三个属性，value、key和condition。</p>
<p>使用Spring Cache需要我们做两方面的事：<br>（1）声明某些方法使用缓存</p>
<p>（2）配置Spring对Cache的支持</p>
<span id="more"></span>

<h5 id="value-属性指定-Cache-名称"><a href="#value-属性指定-Cache-名称" class="headerlink" title="value 属性指定 Cache 名称"></a>value 属性指定 Cache 名称</h5><p> value属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(“cache1”)</span><span class="comment">//Cache是发生在cache1上的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(&#123;“cache1”, “cache2”&#125;)</span><span class="comment">//Cache是发生在cache1和cache2上的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用key属性自定义key"><a href="#使用key属性自定义key" class="headerlink" title="使用key属性自定义key"></a>使用key属性自定义key</h5><p>key属性是用来指定Spring缓存方法的返回结果时对应的key的。该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。我们这里先来看看自定义策略，至于默认策略会在后文单独介绍。</p>
<p>自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。下面是几个使用参数作为key的示例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#id”)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#p0”)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#user.id”)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#p0.id”)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="condition属性指定发生条件"><a href="#condition属性指定发生条件" class="headerlink" title="condition属性指定发生条件"></a>condition属性指定发生条件</h5><p>​    有的时候我们可能并不希望缓存一个方法所有的返回结果。通过condition属性可以实现这一功能。condition属性默认为空，表示将缓存所有的调用情形。其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下示例表示只有当user的id为偶数时才会进行缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value=&#123;“users”&#125;, key=”#user.id”, condition=”#user.id%2==0”)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">   System.out.println(“find user by user “ + user);</span><br><span class="line">   <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h4><p>在支持Spring Cache的环境下，对于使用@Cacheable标注的方法，Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，如果存在就不再执行该方法，而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。@CachePut也可以声明一个方法支持缓存功能。与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。 </p>
<p> @CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CachePut(“users”)//每次都会执行方法，并将结果存入指定的缓存中</span><br><span class="line">public User find(Integer id) &#123;</span><br><span class="line">   return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
<hr>
<h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h4><p>CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。@CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。其中value、key和condition的语义与@Cacheable对应的属性类似。即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；condition表示清除操作发生的条件。下面我们来介绍一下新出现的两个属性 <strong>allEntries</strong> 和 <strong>beforeInvocation</strong> 。</p>
<p><strong>allEntries</strong> </p>
<p>​    allEntries是boolean类型，表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。有的时候我们需要Cache一下清除所有的元素，这比一个一个清除元素更有效率。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value=”users”, allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   System.out.println(“delete user by id: “ + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>beforeInvocation</strong> </p>
<p>​    清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value=”users”, beforeInvocation=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   System.out.println(“delete user by id: “ + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
<hr>
<h4 id="Cacheing"><a href="#Cacheing" class="headerlink" title="@Cacheing"></a>@Cacheing</h4><p>​    他接收的是一个数组，以及put、able、evict等参数。那么这个注解什么时候会用到呢？举个例子，如果我们的方法操做了多个表数据的时候，我们就需要多个缓存。比如要同时清空a和b的用户的数据，那么就需要使用caching来连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Caching(evict = &#123;@CacheEvict(valie= &quot;id&quot;, key = &quot;#uuid&quot;),</span></span><br><span class="line"><span class="meta">                      @CacheEvict(value= &#123;&quot;list&quot;, &quot;other&quot;&#125;, allEntries = true)&#125;)</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="项目整合SpringBoot缓存注解"><a href="#项目整合SpringBoot缓存注解" class="headerlink" title="项目整合SpringBoot缓存注解"></a>项目整合SpringBoot缓存注解</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  引入mybatis --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>然后用这个配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//启用缓存，这个注解很重要；  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 缓存管理器. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate&lt;?,?&gt; redisTemplate)</span> </span>&#123;  </span><br><span class="line">        RedisCacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate);  </span><br><span class="line">       cacheManager.setDefaultExpiration(<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置缓存的时间</span></span><br><span class="line">       <span class="keyword">return</span> cacheManager;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * RedisTemplate缓存操作类,类似于jdbcTemplate的一个类; </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 虽然CacheManager也能获取到Cache对象，但是操作起来没有那么灵活； </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 这里在扩展下：RedisTemplate这个类不见得很好操作，我们可以在进行扩展一个我们 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 自己的缓存类，比如：RedisStorage类; </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory : 通过Spring进行注入，参数在application.properties进行配置； </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;  </span><br><span class="line">       RedisTemplate&lt;String, String&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;String, String&gt;();  </span><br><span class="line">       redisTemplate.setConnectionFactory(factory);  </span><br><span class="line"></span><br><span class="line">       <span class="comment">//key序列化方式;（不然会出现乱码;）,但是如果方法上有Long等非String类型的话，会报类型转换错误；  </span></span><br><span class="line">       <span class="comment">//所以在没有自己定义key生成策略的时候，以下这个代码建议不要这么写，可以不配置或者自己实现ObjectRedisSerializer  </span></span><br><span class="line">       <span class="comment">//或者JdkSerializationRedisSerializer序列化方式;  </span></span><br><span class="line">       RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();<span class="comment">//Long类型不可以会出现异常信息;  </span></span><br><span class="line">       redisTemplate.setKeySerializer(redisSerializer);  </span><br><span class="line">       redisTemplate.setHashKeySerializer(redisSerializer);  </span><br><span class="line">          redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">       <span class="keyword">return</span> redisTemplate;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring注解</category>
      </categories>
      <tags>
        <tag>Spring注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解-lombok</title>
    <url>/2020/04/21/Spring%E6%B3%A8%E8%A7%A3-lombok/</url>
    <content><![CDATA[<h4 id="Lombok常用注解及其功能"><a href="#Lombok常用注解及其功能" class="headerlink" title="Lombok常用注解及其功能"></a>Lombok常用注解及其功能</h4><ul>
<li>@Data 注解：这个注解包含范围最广，它包含 getter、 setter、ToString、EqualsAndHashCode、RequireArgsConstructor注解，即当使用当前注解时，会自动生成包含的所有方法。</li>
<li>@Builder 注解：使用此注解可以通过 builder 方法初始化对象</li>
<li>@Getter 注解：使用此注解会生成对应的 getter 方法</li>
<li>@Setter 注解：使用此注解会生成对应的 setter 方法</li>
<li>@NoArgsConstructor 注解：使用此注解会生成对应的无参构造方法</li>
<li>@AllArgsConstructor 注解：使用此注解会生成对应的全参构造方法</li>
<li>@RequiredArgsConstructor 注解：会生成构造方法（可能带参数也可能不带参数），如果带参数，这参数只能是以final修饰的未经初始化的字段，或者是以@NonNull注解的未经初始化的字段</li>
<li>@ToString 注解：使用此注解会自动重写对应的 toString 方法</li>
<li>@EqualsAndHashCode注解：使用此注解会自动重写对应的 equals 和 hashCode 方法</li>
<li>@Slf4j：在需要打印日志的类中使用，当项目中使用了slf4j打印日志框架时使用该注解，会简化日志的打印流程，只需要调用 info 方法即可</li>
<li>@Log4j：在需要打印日志的类中使用，当项目中使用了log4j打印日志框架时使用此注解，会简化日志的打印流程，只需要调用 info 方法即可</li>
<li>@NonNull 对方法参数进行 null 检查</li>
<li>@Synchronized 给方法加上同步锁</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="注解案例详解"><a href="#注解案例详解" class="headerlink" title="注解案例详解"></a>注解案例详解</h4><ul>
<li><p>@Getter and @Setter</p>
<p>默认生成的方法是public的，如果要修改方法修饰符可以设置<strong>AccessLevel</strong>的值，例如：**@Getter(access = AccessLevel.PROTECTED)**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter(AccessLevel.PROTECTED)</span> <span class="meta">@Setter</span> <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>@ToString</p>
<p>它会按顺序（以逗号分隔）打印你的类名称以及每个字段。可以这样设置不包含哪些字段**@ToString(exclude = “id”)** / <strong>@ToString(exclude = {“id”,”name”})</strong></p>
<p>如果继承的有父类的话，可以设置<strong>callSuper</strong> 让其调用父类的toString()方法，例如：**@ToString(callSuper = true)**</p>
</li>
<li><p>@RequiredArgsConstructor </p>
<p>会生成构造方法（可能带参数也可能不带参数），如果带参数，这参数只能是以final修饰的未经初始化的字段，或者是以@NonNull注解的未经初始化的字段</p>
<p>@RequiredArgsConstructor(staticName = “of”)会生成一个of()的静态方法，并把构造方法设置为私有的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring注解</category>
      </categories>
      <tags>
        <tag>Spring注解</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/04/07/git/</url>
    <content><![CDATA[<h4 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure>
<hr>
<span id="more"></span>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示当前的Git配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑Git配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config -e [--global]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">&quot;[email address]”</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">git 修改当前的project的用户名的命令为：</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string"> git config user.name 你的目标用户名;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">git修改当前的project提交邮箱的命令为：</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string"> git config user.email 你的目标邮箱名;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">如果你要修改当前全局的用户名和邮箱时，需要在上面的两条命令中添加一个参数，–global，代表的是全局。命令分别为：</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string"> git config  --global user.name 你的目标用户名；</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string"> git config  --global user.email 你的目标邮箱名;</span></span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -p</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交时显示所有diff信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line">git checkout -b appoint_box（别名） origin/feature/20181128_1491627_appoint_box_1（分支名）</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在当前commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tag信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的代码差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line">可以得到cimmit id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从本地master拉取代码更新当前分支：branch 一般为master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase [branch]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote update  --更新远程仓储</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载远程仓库的所有变动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span>  </span><br></pre></td></tr></table></figure>
<hr>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure>

<p>参考网址：<a href="https://www.jianshu.com/p/46ffff059092">https://www.jianshu.com/p/46ffff059092</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础1_引入及入口</title>
    <url>/2020/06/27/jQuery-%E5%9F%BA%E7%A1%801-%E5%BC%95%E5%85%A5%E5%8F%8A%E5%85%A5%E5%8F%A3/</url>
    <content><![CDATA[<h4 id="css-和-js-引入"><a href="#css-和-js-引入" class="headerlink" title="css 和 js 引入"></a>css 和 js 引入</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.12.3.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种：jQuery入口函数</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种：jQuery入口函数</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种：JavaScript 入口函数</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="jQuery-入口函数与-JavaScript-入口函数的区别："><a href="#jQuery-入口函数与-JavaScript-入口函数的区别：" class="headerlink" title="jQuery 入口函数与 JavaScript 入口函数的区别："></a>jQuery 入口函数与 JavaScript 入口函数的区别：</h4><ul>
<li>jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li>
<li>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li>
</ul>
<p><strong>load 和 ready 区别</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>window.onload</th>
<th>$(document).ready()</th>
</tr>
</thead>
<tbody><tr>
<td>执行时机</td>
<td>必须等待网页全部加载完毕（包括图片等），然后再执行包裹代码</td>
<td>只需要等待网页中的DOM接口加载完毕，就能执行包裹代码</td>
</tr>
<tr>
<td>执行次数</td>
<td>只能执行一次，如果第二次，那么第一次的执行会被覆盖</td>
<td>可以执行多次，第N此都不会被上一次覆盖</td>
</tr>
<tr>
<td>简写方案</td>
<td>无</td>
<td>$(function(){     });</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础2_选择器</title>
    <url>/2020/06/28/jQuery-%E5%9F%BA%E7%A1%802-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<ul>
<li>元素选择器<ul>
<li>$(“p”)</li>
</ul>
</li>
<li>id 选择器<ul>
<li>$(“#id”)</li>
</ul>
</li>
<li>class 选择器<ul>
<li>$(.test)</li>
</ul>
</li>
</ul>
<hr>
<span id="more"></span>

<p>示例</p>
<p>$(“*”)        选取所有元素    <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_all2">在线实例</a>    </p>
<p>$(this)        选取当前 HTML 元素    <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_this">在线实例</a>    </p>
<p>$(“p.intro”)    选取 class 为 intro 的 </p><p> 元素        <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_pclass">在线实例</a>    </p>
<p>$(“:button”)    选取所有 type=”button” 的 <input> 元素 和 <button> 元素    <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_button2">在线实例</a>    </button></p>
<p>$(“p:first”)    选取第一个 </p><p> 元素    <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_pfirst">在线实例</a>    </p>
<p>$(“ul li:first”)    选取第一个 <ul> 元素的第一个 <li> 元素    <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_ullifirst">在线实例</a>    </li></ul></p>
<p>$(“ul li:first-child”)    选取每个 <ul> 元素的第一个 <li> 元素        <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_ullifirstchild">在线实例</a>    </li></ul></p>
<p>$(“[href]”)    选取带有 href 属性的元素        <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_hrefattr">在线实例</a>    </p>
<p>$(“a[target=’_blank’]”)    选取所有 target 属性值等于 “_blank” 的 <a> 元素        <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_hrefattrblank">在线实例</a>    </a></p>
<p>$(“a[target!=’_blank’]”)    选取所有 target 属性值不等于 “_blank” 的 <a> 元素        <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_hrefattrnotblank">在线实例</a>    </a></p>
<p>$(“tr:even”)    选取偶数位置的 <tr> 元素        <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_even">在线实例</a>    </tr></p>
<p>$(“tr:odd”)    选取奇数位置的 <tr> 元素    <a href="https://www.runoob.com/try/try.php?filename=tryjquery_sel_odd">在线实例</a>    </tr></p>
<p>$(‘span:contains(Life)’).addClass(‘hightLight’) 选择包含文本Life的所有元素</p>
<p>$(‘div:eq(1)’).addClass(‘hightLight’)    :eq(1)选择第二段落</p>
]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础3_事件学习</title>
    <url>/2020/06/28/jQuery-%E5%9F%BA%E7%A1%803-%E4%BA%8B%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><ul>
<li><p>bind 绑定事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bind(eventType,data,handler)</span></span><br><span class="line"><span class="comment">	eventType 指定事件类型的字符串，click（单击），double-click（双击），focus（聚焦），blur（失焦）</span></span><br><span class="line"><span class="comment">	data 传递到事件处理函数进行处理的数据。</span></span><br><span class="line"><span class="comment">	handler 事件处理函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例一：使用bind()方法为按钮附加点击事件</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.bold&#x27;</span>).bind(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;You have clicked the Bold button&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&#x27;.italic&#x27;</span>).bind(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;You have clicked the Italic button&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例二：把点击事件同时应用到两个按钮</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).bind(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;You hava clicked the &#x27;</span> + $(<span class="built_in">this</span>).text() + <span class="string">&#x27; button&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">界面代码示例</span></span><br><span class="line"><span class="comment">&lt;body&gt;</span></span><br><span class="line"><span class="comment">	&lt;span class=&quot;bold buttons&quot;&gt;Bold&lt;/span&gt;</span></span><br><span class="line"><span class="comment">	&lt;span class=&quot;italic buttons&quot;&gt;Italic&lt;/span&gt;</span></span><br><span class="line"><span class="comment">&lt;/body&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>直接附加绑定事件：click（单击），double-click（双击），focus（聚焦），blur（失焦）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">直接附加事件有一下几种：</span></span><br><span class="line"><span class="comment">	click（单击），double-click（双击），focus（聚焦），blur（失焦）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例一</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;You hava clicked the &#x27;</span> + $(<span class="built_in">this</span>).text() + <span class="string">&#x27; button&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>trigger 绑定自动触发事件,基本不用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">trigger(eventType)</span></span><br><span class="line"><span class="comment">	eventType	是字符串，指定事件的类型，即单击、双击、聚焦等等。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).bind(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;You have clicked the &quot;</span> +$(<span class="built_in">this</span>).text()+<span class="string">&quot; buttons&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&#x27;.italic&#x27;</span>).trigger(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>hover 在按钮上应用悬停效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hover() 方法规定当鼠标指针悬停在被选元素上时要运行的两个函数。</span></span><br><span class="line"><span class="comment">	$(selector).hover(inFunction,outFunction)</span></span><br><span class="line"><span class="comment">	inFunction	必需。规定 mouseover 事件发生时运行的函数。</span></span><br><span class="line"><span class="comment">	outFunction	可选。规定 mouseout 事件发生时运行的函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).hover(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;hoverClass&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;hoverClass&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="禁用事件"><a href="#禁用事件" class="headerlink" title="禁用事件"></a>禁用事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	从指定元素 删除事件</span></span><br><span class="line"><span class="comment">		unbind(eventType,handler)</span></span><br><span class="line"><span class="comment">		unbind(eventType)</span></span><br><span class="line"><span class="comment">		unbind()</span></span><br><span class="line"><span class="comment">		eventType	click（单击），double-click（双击），focus（聚焦），blur（失焦）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).bind(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;You have clicked the &quot;</span> +$(<span class="built_in">this</span>).text()+<span class="string">&quot; buttons&quot;</span>);</span><br><span class="line">        $(<span class="string">&#x27;.italic&#x27;</span>).unbind(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<p>鼠标事件</p>
<ol>
<li><p>mousedown</p>
<p>鼠标在指定元素上被<strong>按下</strong>就会被触发。</p>
</li>
<li><p>mouseup</p>
<p>鼠标指针在元素上并<strong>释放</strong>鼠标键，触发</p>
</li>
<li><p>mouseover</p>
<p>鼠标指针<strong>进入</strong>指定元素的区域(包含子元素)，触发</p>
</li>
<li><p>mouseout</p>
<p>鼠标指针<strong>离开</strong>指定元素的区域，触发</p>
</li>
<li><p>mouseenter</p>
<p>当鼠标指针<strong>穿过</strong>指定（进入）被选元素时，会发生 mouseenter 事件。</p>
<p><strong>注意：</strong>与  mouseover 事件不同，mouseenter 事件只有在鼠标指针进入被选元素时被触发，mouseover 事件在鼠标指针进入任意子元素时也会被触发</p>
</li>
<li><p>mouseleave</p>
<p>当鼠标指针离开被选元素时，会发生 mouseleave 事件。</p>
<p><strong>注意：</strong>与  mouseout 事件不同，mouseleave 事件只有在鼠标指针离开被选元素时被触发，mouseout 事件在鼠标指针离开任意子元素时也会被触发。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;You have clicked the &quot;</span> +$(<span class="built_in">this</span>).text()+<span class="string">&quot; buttons&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">   $(<span class="string">&quot;.buttons&quot;</span>).mouseup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;You have clicked the &quot;</span> +$(<span class="built_in">this</span>).text()+<span class="string">&quot; buttons&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;You have clicked the &quot;</span> +$(<span class="built_in">this</span>).text()+<span class="string">&quot; buttons&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;You have clicked the &quot;</span> +$(<span class="built_in">this</span>).text()+<span class="string">&quot; buttons&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例二：查找鼠标被按下时的屏幕坐标</span></span><br><span class="line"><span class="comment">// screenX ：指定事件发生时相对于屏幕原点的横坐标</span></span><br><span class="line"><span class="comment">// screenX ：指定事件发生时相对于屏幕原点的纵坐标</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;img&quot;</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;p&quot;</span>).text(<span class="string">&#x27;Mouse is clicked at horizontal coordinate: &#x27;</span> +event.screenX+ <span class="string">&quot; and at vertical coordinate: &quot;</span>+event.screenY);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例三：随着鼠标移动使图像变明亮或模糊</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;img&#x27;</span>).css(<span class="string">&#x27;opacity&#x27;</span>,<span class="number">0.4</span>);</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).bind(<span class="string">&#x27;mouseover&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).css(<span class="string">&#x27;opacity&#x27;</span>,<span class="number">1.0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).bind(<span class="string">&#x27;mouseout&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;img&#x27;</span>).css(<span class="string">&#x27;opacity&#x27;</span>,<span class="number">0.4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).bind(<span class="string">&#x27;mousedown&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;img&#x27;</span>).css(<span class="string">&#x27;width&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $(<span class="built_in">this</span>).width()+<span class="number">50</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&#x27;img&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $(<span class="built_in">this</span>).height()+<span class="number">30</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例四：切换class类</span></span><br><span class="line"><span class="comment">// toggleClass() 方法对添加和移除被选元素的一个或多个类进行切换。</span></span><br><span class="line"><span class="comment">// 该方法检查每个元素中指定的类。</span></span><br><span class="line"><span class="comment">// 如果不存在则添加类，如果已设置则删除之。这就是所谓的切换效果。</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.buttons&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).toggleClass(<span class="string">&#x27;hover&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul>
<li><p>submit事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	该事件只适用于 &lt;form&gt; 元素。</span></span><br><span class="line"><span class="comment">	submit() 方法触发 submit 事件，或规定当发生 submit 事件时运行的函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    界面元素</span></span><br><span class="line"><span class="comment">    &lt;form action=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">        First name: &lt;input type=&quot;text&quot; name=&quot;FirstName&quot; value=&quot;Mickey&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">        Last name: &lt;input type=&quot;text&quot; name=&quot;LastName&quot; value=&quot;Mouse&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;/form&gt; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;form&quot;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>change 当元素值发生改变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	当元素的值改变时发生 change 事件（仅适用于表单字段）。</span></span><br><span class="line"><span class="comment">	change() 方法触发 change 事件，或规定当发生 change 事件时运行的函数。</span></span><br><span class="line"><span class="comment">	注意：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text field 或 text area 时，change 事件会在元素失去焦点时发生。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    界面元素</span></span><br><span class="line"><span class="comment">    &lt;p&gt;点击按钮触发 change 事件 (即使元素没有改变)。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;button&gt;输入框中触发 change 事件&lt;/button&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;输入你的名字: &lt;input value=&quot;Runoob&quot; onchange=&quot;alert(this.value)&quot; type=&quot;text&quot;&gt;&lt;/p&gt; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    $(<span class="string">&quot;input&quot;</span>).change();</span><br><span class="line">	  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>focus() 聚焦</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &lt;style&gt;</span></span><br><span class="line"><span class="comment">      span&#123;</span></span><br><span class="line"><span class="comment">      display:none;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">  &lt;/style&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &lt;input&gt;</span></span><br><span class="line"><span class="comment">  &lt;span&gt;请输入你的电话号码?&lt;/span&gt;</span></span><br><span class="line"><span class="comment">  &lt;p&gt;点击输入框获取焦点。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	 $(<span class="string">&quot;input&quot;</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    $(<span class="string">&quot;span&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;inline&quot;</span>).fadeOut(<span class="number">2000</span>);</span><br><span class="line">	  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>blur() 失去焦点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入你的名字: &lt;input type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;p&gt;在输入框写些东西，然后点击输入框外，让其失去焦点。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	  $(<span class="string">&quot;input&quot;</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    alert(<span class="string">&quot;输入框失去了焦点&quot;</span>);</span><br><span class="line">	  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="阻止事件方法"><a href="#阻止事件方法" class="headerlink" title="阻止事件方法"></a>阻止事件方法</h4><p>​    event.preventDefault() 方法阻止元素发生默认的行为。</p>
<hr>
<h4 id="创建返回顶部链接"><a href="#创建返回顶部链接" class="headerlink" title="创建返回顶部链接"></a>创建返回顶部链接</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;&lt;a href=&quot;#topofpage&quot;&gt;Return to top&lt;/a&gt;&#x27;</span>).insertAfter(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">在HTML文档的每个段落元素后创建一个包含文本 Return to top 的链接，用户一旦选择该链接，就会导航到id为topofpage的元素。</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;&lt;a id=&quot;topofpage&quot; name=&quot;topofpage&quot;&gt;&lt;/a&gt;&#x27;</span>).prependTo(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">在HTML的body之前添加了锚点元素（name 和 id均为 topofpage）,换句话说在网页开头创建了id为topofpage的锚元素。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础4_常用表单验证</title>
    <url>/2020/06/28/jQuery-%E5%9F%BA%E7%A1%804-%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h4 id="确认必须字段不留空"><a href="#确认必须字段不留空" class="headerlink" title="确认必须字段不留空"></a>确认必须字段不留空</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="string">&#x27;.infobox&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">var</span> len = data.length;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">1</span> )&#123;</span><br><span class="line">            $(<span class="string">&quot;.error&quot;</span>).show();</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;.error&quot;</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="验证数字字段"><a href="#验证数字字段" class="headerlink" title="验证数字字段"></a>验证数字字段</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="string">&#x27;.infobox&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">var</span> len = data.length;</span><br><span class="line">        <span class="keyword">var</span> c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">            c = data.charAt(i).charCodeAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>( c &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;.error&quot;</span>).show();</span><br><span class="line">                event.preventDefault();</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="验证电话号码"><a href="#验证电话号码" class="headerlink" title="验证电话号码"></a>验证电话号码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="string">&#x27;.infobox&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(IsTelephone(data))&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsTelephone</span>(<span class="params">obj</span>)// 正则判断</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern=<span class="regexp">/(^[0-9]&#123;3,4&#125;\-[0-9]&#123;3,8&#125;$)|(^[0-9]&#123;3,8&#125;$)|(^\([0-9]&#123;3,4&#125;\)[0-9]&#123;3,8&#125;$)|(^0&#123;0,1&#125;13[0-9]&#123;9&#125;$)/</span>;</span><br><span class="line">    <span class="keyword">if</span>(pattern.test(obj))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="数字、字母或下划线组合验证"><a href="#数字、字母或下划线组合验证" class="headerlink" title="数字、字母或下划线组合验证"></a>数字、字母或下划线组合验证</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $(<span class="string">&#x27;.infobox&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(validate_userid(data))&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate_userid</span>(<span class="params">uid</span>)// 正则判断</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern= <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[a-z0-9_]+$/</span>);</span><br><span class="line">    <span class="keyword">return</span> pattern.test(uid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="验证日期"><a href="#验证日期" class="headerlink" title="验证日期"></a>验证日期</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;form id=&quot;signup&quot; method=&quot;post&quot; action=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;div&gt;</span></span><br><span class="line"><span class="comment">        &lt;span class=&quot;label&quot;&gt;Enter Date of Birth&lt;/span&gt;</span></span><br><span class="line"><span class="comment">        &lt;input type=&quot;text&quot; class=&quot;infobox&quot; name=&quot;dob&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;span class=&quot;error&quot;&gt;无效日期，正确格式是 mm/dd/yyyy 或者 mm-dd-yyyy&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/form&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> date = $(<span class="string">&#x27;.infobox&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(validate_date(date))&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate_date</span>(<span class="params">date</span>)// 正则判断</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern= <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\b\d&#123;1,2&#125;[\/-]\d&#123;1,2&#125;[\/-]\d&#123;4&#125;\b/</span>);</span><br><span class="line">    <span class="keyword">return</span> pattern.test(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="验证电子邮件"><a href="#验证电子邮件" class="headerlink" title="验证电子邮件"></a>验证电子邮件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> email = $(<span class="string">&#x27;.infobox&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(validate_email(email))&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate_email</span>(<span class="params">email</span>)// 正则判断</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern= <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-z]+$/</span>);</span><br><span class="line">    <span class="keyword">return</span> pattern.test(email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="验证复选框是否被选中"><a href="#验证复选框是否被选中" class="headerlink" title="验证复选框是否被选中"></a>验证复选框是否被选中</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;form id=&quot;signup&quot; method=&quot;post&quot; action=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;checkbox&quot; id=&quot;pizza&quot; name=&quot;pizza&quot; value=5 class=&quot;infobox&quot;&gt; Pizza 5$&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;checkbox&quot; id=&quot;hotdog&quot; name=&quot;hotdog&quot; value=2 class=&quot;infobox&quot;&gt; hotdog 2$&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;checkbox&quot; id=&quot;coke&quot; name=&quot;coke&quot; value=1 class=&quot;infobox&quot;&gt; coke 1$&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;checkbox&quot; id=&quot;fries&quot; name=&quot;fries&quot; value=3 class=&quot;infobox&quot;&gt; French Fries 3$&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;error&quot;&gt;至少选择一个&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;result&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/form&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> amt = <span class="number">0</span> ;</span><br><span class="line">        $(<span class="string">&#x27;form&#x27;</span>).find(<span class="string">&#x27;:checkbox&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>($(<span class="built_in">this</span>).is(<span class="string">&#x27;:checked&#x27;</span>))&#123;</span><br><span class="line">                count++;</span><br><span class="line">                amt = amt +<span class="built_in">parseInt</span>($(<span class="built_in">this</span>).val());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            $(<span class="string">&#x27;p .result&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).show();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).text(<span class="string">&#x27;You bill is $&#x27;</span>+ amt);</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>验证单选按钮是否被选中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;form id=&quot;signup&quot; method=&quot;post&quot; action=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;radio&quot; name=&quot;paymode&quot; value=&quot;MasterCard&quot; class=&quot;infobox&quot;&gt;MasterCard&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;radio&quot; name=&quot;paymode&quot; value=&quot;ANZ Grindlay Card&quot; class=&quot;infobox&quot;&gt;ANZ Grindlay Card&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;radio&quot; name=&quot;paymode&quot; value=&quot;Visa Card&quot; class=&quot;infobox&quot;&gt;Visa Card&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;error&quot;&gt;至少选择一个&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;result&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/form&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = $(<span class="string">&#x27;input:checked&#x27;</span>).length;</span><br><span class="line">        <span class="keyword">var</span> amt = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            $(<span class="string">&#x27;p .result&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).show();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).text(<span class="string">&#x27;You hava selected  &#x27;</span>+$(<span class="string">&#x27;input:checked&#x27;</span>).attr(<span class="string">&quot;value&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="验证select-选项是否被选中"><a href="#验证select-选项是否被选中" class="headerlink" title="验证select 选项是否被选中"></a>验证select 选项是否被选中</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = $(<span class="string">&#x27;select option:selected&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).show();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).text(<span class="string">&#x27;You hava selected  &#x27;</span>+$(<span class="string">&#x27;select option:selected&#x27;</span>).text());</span><br><span class="line">        &#125;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="把样式应用到选项和表格按钮"><a href="#把样式应用到选项和表格按钮" class="headerlink" title="把样式应用到选项和表格按钮"></a>把样式应用到选项和表格按钮</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">    $(<span class="string">&#x27;option:odd&#x27;</span>).addClass(<span class="string">&quot;meal&quot;</span>)</span><br><span class="line">    $(<span class="string">&#x27;.submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> selectedopts = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> count = $(<span class="string">&#x27;select option:selected&#x27;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;select option:selected&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                selectedopts += $(<span class="built_in">this</span>).text()+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&#x27;.error&#x27;</span>).hide();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).show();</span><br><span class="line">            $(<span class="string">&#x27;.result&#x27;</span>).text(<span class="string">&#x27;You hava selected  &#x27;</span>+selectedopts);</span><br><span class="line">        &#125;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础5_样式操作</title>
    <url>/2020/06/28/jQuery-%E5%9F%BA%E7%A1%805-%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="设置内容和属性"><a href="#设置内容和属性" class="headerlink" title="设置内容和属性"></a>设置内容和属性</h4><ul>
<li><p>test(text)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置或返回所选元素的文本内容</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#test1&quot;</span>).text(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>&#123;</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&quot;旧文本: &quot;</span> + origText + <span class="string">&quot; 新文本: Hello world! (index: &quot;</span> + i + <span class="string">&quot;)&quot;</span>; </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>tml(HTML)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置或返回所选元素的内容（包括 HTML 标记）</span></span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#test2&quot;</span>).html(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>&#123;</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&quot;旧 html: &quot;</span> + origText + <span class="string">&quot; 新 html: Hello &lt;b&gt;world!&lt;/b&gt; (index: &quot;</span> + i + <span class="string">&quot;)&quot;</span>; </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>val() 设置或返回表单字段的值</p>
</li>
<li><p>attr() </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法用于获取属性值</span></span><br><span class="line"><span class="comment">&lt;p&gt;&lt;a href=&quot;#&quot; id=&quot;runoob&quot;&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;显示 href 属性的值&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 示例1 - 获取属性</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    alert($(<span class="string">&quot;#runoob&quot;</span>).attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">	  &#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2 - 设置属性</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">	$(<span class="string">&quot;#runoob&quot;</span>).attr(&#123;</span><br><span class="line">		 <span class="string">&quot;href&quot;</span> : <span class="string">&quot;http://www.runoob.com/jquery&quot;</span>,</span><br><span class="line">		 <span class="string">&quot;title&quot;</span> : <span class="string">&quot;jQuery 教程&quot;</span> </span><br><span class="line">	&#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul>
<li><p>append()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 方法在被选元素的结尾插入内容（仍然该元素的内部）</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是另外一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;ol&gt;</span></span><br><span class="line"><span class="comment">&lt;li&gt;List item 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;li&gt;List item 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;li&gt;List item 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;/ol&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn1&quot;&gt;添加文本&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn2&quot;&gt;添加列表项&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;p&quot;</span>).append(<span class="string">&quot; &lt;b&gt;追加文本&lt;/b&gt;。&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;ol&quot;</span>).append(<span class="string">&quot;&lt;li&gt;追加列表项&lt;/li&gt;&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>prepend</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法在被选元素的开头插入内容</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是另外一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;ol&gt;</span></span><br><span class="line"><span class="comment">&lt;li&gt;列表 1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;li&gt;列表 2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;li&gt;列表 3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;/ol&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn1&quot;&gt;添加文本&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn2&quot;&gt;添加列表项&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;p&quot;</span>).prepend(<span class="string">&quot;&lt;b&gt;在开头追加文本&lt;/b&gt;。 &quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;ol&quot;</span>).prepend(<span class="string">&quot;&lt;li&gt;在开头添加列表项&lt;/li&gt;&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>after()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法在被选元素之后插入内容。</span></span><br><span class="line"><span class="comment">&lt;img src=&quot;/images/logo.png&quot; &gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn1&quot;&gt;之前插入&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn2&quot;&gt;之后插入&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;img&quot;</span>).before(<span class="string">&quot;&lt;b&gt;之前&lt;/b&gt;&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;img&quot;</span>).after(<span class="string">&quot;&lt;i&gt;之后&lt;/i&gt;&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>before()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在被选元素之前插入内容。</span></span><br><span class="line"><span class="comment">&lt;img src=&quot;/images/logo.png&quot; &gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn1&quot;&gt;之前插入&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;btn2&quot;&gt;之后插入&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;img&quot;</span>).before(<span class="string">&quot;&lt;b&gt;之前&lt;/b&gt;&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;img&quot;</span>).after(<span class="string">&quot;&lt;i&gt;之后&lt;/i&gt;&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul>
<li><p>remove()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除被选元素及其子元素</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div1&quot; style=&quot;height:100px;width:300px;border:1px solid black;background-color:yellow;&quot;&gt;</span></span><br><span class="line"><span class="comment">这是 div 中的一些文本。</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是在 div 中的一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是在 div 中的另外一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;移除div元素&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;#div1&quot;</span>).remove();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<ul>
<li><p>empty()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除被选元素的子元素。</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div1&quot; style=&quot;height:100px;width:300px;border:1px solid black;background-color:yellow;&quot;&gt;</span></span><br><span class="line"><span class="comment">这是 div 中的一些文本。</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是在 div 中的一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是在 div 中的另外一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;清空div元素&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).empty();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<h4 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a>css方法</h4><ul>
<li><p>addClass()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法向被选元素添加一个或多个类。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="comment">	.important</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		font-weight:bold;</span></span><br><span class="line"><span class="comment">		font-size:xx-large;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	.blue</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		color:blue;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
  <h1>标题 1</h1>
  <h2>标题 2</h2>
  <p>这是一个段落。</p>
  <p>这是另外一个段落。</p>
  <div>这是一些重要的文本!</div>
  <br>
  <button>为元素添加 class</button>
  */

  <script>
  $(document).ready(function(){
      $("button").click(function(){
          $("h1,h2,p").addClass("blue");
          $("div").addClass("important");
      });
  });
  </script>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ​</span><br><span class="line"></span><br><span class="line">- removeClass()</span><br><span class="line"></span><br><span class="line">  ```javascript</span><br><span class="line">  /*</span><br><span class="line">  方法从被选元素移除一个或多个类。</span><br><span class="line">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">  .important</span><br><span class="line">  &#123;</span><br><span class="line">  	font-weight:bold;</span><br><span class="line">  	font-size:xx-large;</span><br><span class="line">  &#125;</span><br><span class="line">  .blue</span><br><span class="line">  &#123;</span><br><span class="line">  	color:blue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &lt;h1 class=&quot;blue&quot;&gt;标题 1&lt;/h1&gt;</span><br><span class="line">  &lt;h2 class=&quot;blue&quot;&gt;标题 2&lt;/h2&gt;</span><br><span class="line">  &lt;p class=&quot;blue&quot;&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">  &lt;p class=&quot;important&quot;&gt;这是另外一个段落。&lt;/p&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;button&gt;从元素中移除 class&lt;/button&gt;</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  $(document).ready(function()&#123;</span><br><span class="line">    $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">      $(&quot;h1,h2,p&quot;).removeClass(&quot;blue&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>  ​</p>
<ul>
<li><p>css()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery css() 方法</span></span><br><span class="line"><span class="comment">// css() 方法设置或返回被选元素的一个或多个样式属性。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 CSS 属性</span></span><br><span class="line"><span class="comment">// 如需返回指定的 CSS 属性的值，请使用如下语法：</span></span><br><span class="line">css(<span class="string">&quot;propertyname&quot;</span>);</span><br><span class="line"><span class="comment">// 下面的例子将返回首个匹配元素的 background-color 值：</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 CSS 属性</span></span><br><span class="line"><span class="comment">// 如需设置指定的 CSS 属性，请使用如下语法：</span></span><br><span class="line">css(<span class="string">&quot;propertyname&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">// 下面的例子将为所有匹配元素设置 background-color 值：</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多个 CSS 属性</span></span><br><span class="line"><span class="comment">// 如需设置多个 CSS 属性，请使用如下语法：</span></span><br><span class="line">css(&#123;<span class="string">&quot;propertyname&quot;</span>:<span class="string">&quot;value&quot;</span>,<span class="string">&quot;propertyname&quot;</span>:<span class="string">&quot;value&quot;</span>,...&#125;);</span><br><span class="line"><span class="comment">// 下面的例子将为所有匹配元素设置 background-color 和 font-size：</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(&#123;<span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;200%&quot;</span>&#125;);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>toggleClass()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该方法对被选元素进行添加/删除类的切换操作：</span></span><br><span class="line"><span class="comment">&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="comment">	.blue</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">	color:blue;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;h1 class=&quot;blue&quot;&gt;标题 1&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;h2 class=&quot;blue&quot;&gt;标题 2&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">&lt;p class=&quot;blue&quot;&gt;这是一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;这是另外一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;切换 class&lt;/button&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;h1,h2,p&quot;</span>).toggleClass(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础6_效果操作</title>
    <url>/2020/06/28/jQuery-%E5%9F%BA%E7%A1%806-%E6%95%88%E6%9E%9C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h4><ul>
<li><p>show()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">show()方法</span></span><br><span class="line"><span class="comment">$(selector).show(speed,callback)</span></span><br><span class="line"><span class="comment">参数描述</span></span><br><span class="line"><span class="comment">speed	可选。规定元素从隐藏到完全可见的速度。默认为 &quot;0&quot;。</span></span><br><span class="line"><span class="comment">可能的值：</span></span><br><span class="line"><span class="comment">*毫秒 （比如 1500）</span></span><br><span class="line"><span class="comment">*&quot;slow&quot;</span></span><br><span class="line"><span class="comment">*&quot;normal&quot;</span></span><br><span class="line"><span class="comment">*&quot;fast&quot;</span></span><br><span class="line"><span class="comment">在设置速度的情况下，元素从隐藏到完全可见的过程中，会逐渐地改变其高度、宽度、外边距、内边距和透明度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">callback	可选。show 函数执行完之后，要执行的函数。</span></span><br><span class="line"><span class="comment">如需学习更多有关 callback 的内容，请访问我们的 jQuery Callback 这一章。</span></span><br><span class="line"><span class="comment">除非设置了 speed 参数，否则不能设置该参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>hide()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hide()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$(selector).hide(speed,easing,callback)</span></span><br><span class="line"><span class="comment">参数描述</span></span><br><span class="line"><span class="comment">speed	可选。规定隐藏效果的速度。可能的值：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*毫秒</span></span><br><span class="line"><span class="comment">*&quot;slow&quot;</span></span><br><span class="line"><span class="comment">*&quot;fast&quot;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">easing	可选。规定在动画的不同点上元素的速度。默认值为 &quot;swing&quot;。可能的值：</span></span><br><span class="line"><span class="comment">*&quot;swing&quot; - 在开头/结尾移动慢，在中间移动快</span></span><br><span class="line"><span class="comment">*&quot;linear&quot; - 匀速移动</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>toggle()</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">$(selector).toggle(speed,callback);</span><br><span class="line">参数描述</span><br><span class="line">speed	可选。规定隐藏效果的速度。可能的值：</span><br><span class="line"></span><br><span class="line">*毫秒</span><br><span class="line">*&quot;slow&quot;</span><br><span class="line">*&quot;fast&quot;</span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>隐藏/显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个文本段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另外一个文本段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;p&quot;</span>).toggle();</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<p>淡入淡出</p>
<ul>
<li> fadeOut()</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">fadeOut()</span><br><span class="line">方法逐渐改变被选元素的不透明度，从可见到隐藏（褪色效果）。</span><br><span class="line">$(selector).fadeOut(speed,easing,callback)</span><br><span class="line">参数描述</span><br><span class="line">speed	可选。规定褪色效果的速度。可能的值：</span><br><span class="line">*毫秒</span><br><span class="line">*&quot;slow&quot;</span><br><span class="line">*&quot;fast&quot;</span><br><span class="line"></span><br><span class="line">easing	可选。规定在动画的不同点上元素的速度。默认值为 &quot;swing&quot;。可能的值：</span><br><span class="line">*&quot;swing&quot; - 在开头/结尾移动慢，在中间移动快</span><br><span class="line">*&quot;linear&quot; - 匀速移动</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>以下实例演示了 fadeIn() 使用了不同参数的效果。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击淡入 div 元素。<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px;height:80px;display:none;background-color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px;height:80px;display:none;background-color:green;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px;height:80px;display:none;background-color:blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#div1&quot;</span>).fadeIn();</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#div2&quot;</span>).fadeIn(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#div3&quot;</span>).fadeIn(<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  ​</p>
<ul>
<li><p>fadeIn()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fadeIn()</span></span><br><span class="line"><span class="comment">方法逐渐改变被选元素的不透明度，从隐藏到可见（增色效果）。</span></span><br><span class="line"><span class="comment">$(selector).fadeIn(speed,easing,callback)</span></span><br><span class="line"><span class="comment">参数描述</span></span><br><span class="line"><span class="comment">speed	可选。规定褪色效果的速度。可能的值：</span></span><br><span class="line"><span class="comment">*毫秒</span></span><br><span class="line"><span class="comment">*&quot;slow&quot;</span></span><br><span class="line"><span class="comment">*&quot;fast&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">easing	可选。规定在动画的不同点上元素的速度。默认值为 &quot;swing&quot;。可能的值：</span></span><br><span class="line"><span class="comment">*&quot;swing&quot; - 在开头/结尾移动慢，在中间移动快</span></span><br><span class="line"><span class="comment">*&quot;linear&quot; - 匀速移动</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;p&gt;以下实例演示了 fadeOut() 使用了不同参数的效果。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;点击淡出 div 元素。&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div1&quot; style=&quot;width:80px;height:80px;background-color:red;&quot;&gt;&lt;/div&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div2&quot; style=&quot;width:80px;height:80px;background-color:green;&quot;&gt;&lt;/div&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div3&quot; style=&quot;width:80px;height:80px;background-color:blue;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    $(<span class="string">&quot;#div1&quot;</span>).fadeOut();</span><br><span class="line">	    $(<span class="string">&quot;#div2&quot;</span>).fadeOut(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">	    $(<span class="string">&quot;#div3&quot;</span>).fadeOut(<span class="number">3000</span>);</span><br><span class="line">	  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>fadeToggle()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">$(selector).fadeToggle(speed,callback);</span><br><span class="line">参数描述</span><br><span class="line">speed	可选。规定褪色效果的速度。可能的值：</span><br><span class="line">*毫秒</span><br><span class="line">*&quot;slow&quot;</span><br><span class="line">*&quot;fast&quot;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;实例演示了 fadeToggle() 使用了不同的 speed(速度) 参数。&lt;/p&gt;</span><br><span class="line">&lt;button&gt;点击淡入/淡出&lt;/button&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot; style=&quot;width:80px;height:80px;background-color:red;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot; style=&quot;width:80px;height:80px;background-color:green;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot; style=&quot;width:80px;height:80px;background-color:blue;&quot;&gt;&lt;/div&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">	$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">		$(&quot;#div1&quot;).fadeToggle();</span><br><span class="line">		$(&quot;#div2&quot;).fadeToggle(&quot;slow&quot;);</span><br><span class="line">		$(&quot;#div3&quot;).fadeToggle(3000);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>fadeTo()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$(selector).fadeTo(speed,opacity,callback);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;p&gt;演示 fadeTo() 使用不同参数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;button&gt;点我让颜色变淡&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div1&quot; style=&quot;width:80px;height:80px;background-color:red;&quot;&gt;&lt;/div&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div2&quot; style=&quot;width:80px;height:80px;background-color:green;&quot;&gt;&lt;/div&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;div3&quot; style=&quot;width:80px;height:80px;background-color:blue;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).fadeTo(<span class="string">&quot;slow&quot;</span>,<span class="number">0.15</span>);</span><br><span class="line">    $(<span class="string">&quot;#div2&quot;</span>).fadeTo(<span class="string">&quot;slow&quot;</span>,<span class="number">0.4</span>);</span><br><span class="line">    $(<span class="string">&quot;#div3&quot;</span>).fadeTo(<span class="string">&quot;slow&quot;</span>,<span class="number">0.7</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery_基础7_遍历</title>
    <url>/2020/06/28/jQuery-%E5%9F%BA%E7%A1%807-%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h4 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h4><ul>
<li><p>parent()直接父元素</p>
</li>
<li><p>parents()所有祖先元素</p>
</li>
<li><p>两个给定元素之间的所有祖先元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">返回介于两个给定元素之间的所有祖先元素。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.ancestors</span> *</span></span><br><span class="line"><span class="css">&#123; </span></span><br><span class="line"><span class="css">	<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">	<span class="attribute">border</span>: <span class="number">2px</span> solid lightgrey;</span></span><br><span class="line"><span class="css">	<span class="attribute">color</span>: lightgrey;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">margin</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;ancestors&quot;</span>&gt;</span> body (曾曾祖父元素)</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:500px;&quot;</span>&gt;</span>div (曾祖父元素)</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>ul (祖父元素)  </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>li (父元素)</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;/body</span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;span&quot;</span>).parentsUntil(<span class="string">&quot;div&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<span id="more"></span>

<h4 id="后代"><a href="#后代" class="headerlink" title="后代"></a>后代</h4><ul>
<li>children() 被选元素直接子元素</li>
</ul>
<ul>
<li>find() 被选元素的所有后代元素</li>
</ul>
<hr>
<h4 id="同胞"><a href="#同胞" class="headerlink" title="同胞"></a>同胞</h4><ul>
<li><p>siblings() 所有同胞元素</p>
</li>
<li><p>next()下一个同胞元素</p>
</li>
<li><p>nextAll() 所有跟随的同胞元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.siblings</span> *</span></span><br><span class="line"><span class="css">&#123; </span></span><br><span class="line"><span class="css">	<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">	<span class="attribute">border</span>: <span class="number">2px</span> solid lightgrey;</span></span><br><span class="line"><span class="css">	<span class="attribute">color</span>: lightgrey;</span></span><br><span class="line"><span class="css">	<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">margin</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;siblings&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>div (父元素)</span><br><span class="line">	  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;h2&quot;</span>).nextAll().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>两个给定参数之间的所有跟随的同胞元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.siblings</span> *</span></span><br><span class="line"><span class="css">	&#123; </span></span><br><span class="line"><span class="css">		<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>: <span class="number">2px</span> solid lightgrey;</span></span><br><span class="line"><span class="css">		<span class="attribute">color</span>: lightgrey;</span></span><br><span class="line"><span class="css">		<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">margin</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;siblings&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>div (父元素)</span><br><span class="line">	  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;h2&quot;</span>).nextUntil(<span class="string">&quot;h6&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><ul>
<li><p>first() 返回被选元素的首个元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	  $(<span class="string">&quot;div p&quot;</span>).first().css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎访问我的主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是 div 中的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另外一个 div 中的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>last() 方法返回被选元素的最后一个元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;div p&quot;</span>).last().css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎访问我的主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是 div 中的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另外一个 div 中的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<ul>
<li><p>eq() 方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">返回被选元素中带有指定索引号的元素。</span><br><span class="line">索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 <span class="tag">&lt;<span class="name">p</span>&gt;</span> 元素（索引号 1）：</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;p&quot;</span>).eq(<span class="number">1</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎访问我的主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>菜鸟教程 (index 0).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>http://www.runoob.com (index 1)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>google (index 2).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>http://www.google.com (index 3)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>filter() 方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	   $(<span class="string">&quot;p&quot;</span>).filter(<span class="string">&quot;.url&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎访问我的主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>(index 0).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;url&quot;</span>&gt;</span>http://www.runoob.com (index 1)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>google (index 2).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;url&quot;</span>&gt;</span>http://www.google.com (index 3)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<ul>
<li><p>not() 方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 方法返回不匹配标准的所有元素。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	   $(<span class="string">&quot;p&quot;</span>).not(<span class="string">&quot;.url&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎访问我的主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>(index 0).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;url&quot;</span>&gt;</span>http://www.runoob.com (index 1)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>google (index 2).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;url&quot;</span>&gt;</span>http://www.google.com (index 3)。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>jQuery基础</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka-入门1-kafka简介</title>
    <url>/2020/07/11/kafka-%E5%85%A5%E9%97%A81-kafka%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="kafka名词简介"><a href="#kafka名词简介" class="headerlink" title="kafka名词简介"></a>kafka名词简介</h4><ul>
<li><h5 id="zookeeper集群"><a href="#zookeeper集群" class="headerlink" title="zookeeper集群"></a>zookeeper集群</h5><p>Kafka系统强依赖的组件。其存储了Kafka核心元数据 (如topic信息配置、broker信息、 消费分组等等，相当于DB充当了Kafka的配置管理中心) 。 Kafka的leader选举(如coordinator选举、controller选举、partition leader选举等等)，同样也会借助于zookeeper。</p>
</li>
</ul>
<ul>
<li><h5 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h5><p>消息缓存代理，Kafka集群包含一个或多个服务器，这些服务器被称为Broker，负责消息的存储于转发，作为代理对外提供生产和消费服务。</p>
</li>
<li><h5 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h5><p>消息主题(类别)，逻辑上的概念，特指Kafka处理的消息源的不同分类，用户可以根据自己的业务形态将不同业务类别的消息分别存储到不同Topic。用户生产和消费时只需指定所关注的topic即可，不用关注该topic的数据存放的具体位置。<strong>主题的分区可以分布在不同服务器上</strong>，也就意味着主题是可以横跨多个服务器的。</p>
</li>
<li><h5 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h5><p>Topic物理上的分组，在创建Topic时可以指定分区的数量，每个partition是一个有序的队列，按生产顺序存储着每条消息，而且每条消息都会分配一个64bit的自增长的有序offset(相当于消息id)。Partition是整个Kafka可以平行扩展的关键因素。</p>
</li>
<li><h5 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h5><p>副本，topic级别的配置，可以理解为topic消息的副本数。Kafka 0.8版本加入的概念，主要目的就是提高系统的可用性。防止broker意外崩溃导致部分partition不可以服务。</p>
</li>
<li><h5 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h5><p>replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</p>
</li>
<li><h5 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h5><p>replica 中的一个角色，从 leader 中复制数据。</p>
</li>
<li><h5 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h5><p>Producer 生产者，采用Push方式进行消息发布生产。 Producer可以通过与zookeeper连接获取broker信息, topic信息等等元数据，然后再与broker交互进行消息发布。</p>
</li>
<li><h5 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h5><p>消费者，采用Pull方式，从Broker端拉取消息并进行处理。当采用订阅方式订阅感兴趣的Topic时，Consumer必须属于一个消费分组，而且Kafka保证同一个Topic的一条消息只能被同一个消费分组（GroupId）中的一个Consumer消费，但多个消费分组可以同时消费这一条消息</p>
<p>​</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="使用消息系统优势"><a href="#使用消息系统优势" class="headerlink" title="使用消息系统优势"></a>使用消息系统优势</h4><ul>
<li>数据持久化，数据缓冲，异步通信。保证数据不丢失，通过缓冲层来帮助任务最高效率的执行，可存储大量历史数据可以异步处理。</li>
<li>扩展性，解耦处理过程。增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。</li>
<li>灵活性，峰值处理能力。不会因为突发的超负荷的请求而完全崩溃。</li>
<li>可恢复性。系统的一部分组件失效时，不会影响到整个系统。加入队列中的消息仍然可以在系统恢复后被处理。</li>
<li>时序性。在大多使用场景下，数据处理的顺序都很重要。</li>
</ul>
<hr>
<h4 id="常用Message-Queue-对比"><a href="#常用Message-Queue-对比" class="headerlink" title="常用Message Queue 对比"></a>常用Message Queue 对比</h4><table>
<thead>
<tr>
<th></th>
<th>RabbitMQ</th>
<th>kafka</th>
</tr>
</thead>
<tbody><tr>
<td>模式</td>
<td>发布订阅</td>
<td>发布订阅</td>
</tr>
<tr>
<td>持久化</td>
<td>支持（内存/硬盘）</td>
<td>支持（磁盘）</td>
</tr>
<tr>
<td>事务</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>集群</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>负载均衡</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>堆积能力</td>
<td>磁盘容量+内存</td>
<td>磁盘容量（水平扩展，不同broker可以存储在不同磁盘上）</td>
</tr>
<tr>
<td>消息丢失</td>
<td>不会丢失</td>
<td>理论上不会丢失</td>
</tr>
<tr>
<td>消息重复</td>
<td>可以使用消息确认等机制控制</td>
<td>理论上会有重复</td>
</tr>
<tr>
<td>消息失败重试机制</td>
<td>消费失败支持定时重试</td>
<td>Kafka消费失败不支持重试</td>
</tr>
<tr>
<td>客户端支持语言</td>
<td>Java、C、C++、Python、 PHP、Perl 等</td>
<td>Java、C++等</td>
</tr>
<tr>
<td>最大吞吐量时cpu、内存占用</td>
<td>cpu占用非常高，内存占用根据配置（配置的太低对性能影响很大）</td>
<td>cpu占用不高，每个broker大概10%，内存1G左右</td>
</tr>
<tr>
<td>Producer吞吐量</td>
<td>1.8w/s(4个broker)，消费者消费对其吞吐量影响很大</td>
<td>13w/s(4个broker，11个分区)，消费者消费对其吞吐量影响很小</td>
</tr>
<tr>
<td>Consumer吞吐量</td>
<td>6千/s（3个消费者），峰值数据非常容易积压，一旦积压消费速度有很大影响，消费者增加速度成倍下降</td>
<td>2.7w/s（3个消费者，11个分区），能累积很多数据，累积不会对消费速度有影响，增加消费者对消费速度的影响没有rabbitmq那么大。</td>
</tr>
</tbody></table>
<hr>
<h4 id="kafka架构"><a href="#kafka架构" class="headerlink" title="kafka架构"></a>kafka架构</h4><p><img src="/2020/07/11/kafka-%E5%85%A5%E9%97%A81-kafka%E7%AE%80%E4%BB%8B/kafka%E6%9E%B6%E6%9E%84.png" alt="kafka架构"></p>
<hr>
<h4 id="kafka-启动和监控管理"><a href="#kafka-启动和监控管理" class="headerlink" title="kafka 启动和监控管理"></a>kafka 启动和监控管理</h4><ul>
<li><p>Zookeeper启动             </p>
<p>​cd /root/kafka/kafka-0.11.0.0-src/bin             </p>
<p>​zkServer.sh start /root/kafka/kafka-0.11.0.0-src/config/zoo.properties                 </p>
<p>​zkServer.sh start /root/kafka/kafka-0.11.0.0-src/config/zoo1.properties    </p>
</li>
<li><p>Kafka的brokers启动              </p>
<p>​cd /root/kafka/kafka-0.11.0.0-src/bin              </p>
<p>​cat config/server.properties             </p>
<p>​kafka-server-start.sh -daemon /root/kafka/kafka-0.11.0.0-src/config/server.properties</p>
</li>
<li><p>创建topic              </p>
<p>​kafka-topics.sh –create –zookeeper 192.168.158.132:2182,192.168.158.132:2183 –replication-factor 2 –partitions 11 –topic AIDEN_TEST</p>
<ul>
<li>监控</li>
</ul>
<p>由于kafka没有内置的dashborad目前有开源的kafka-eagle、kafka manage等。本次我们选去kafka-eagle</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka-入门2-kafka配置</title>
    <url>/2020/07/11/kafka-%E5%85%A5%E9%97%A82-kafka%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="Broker配置"><a href="#Broker配置" class="headerlink" title="Broker配置"></a>Broker配置</h4><p>Config文件夹下server.properties）</p>
<ul>
<li><p>broker.id</p>
<p>每一个 broker 都有一个标识符，使用 broker.id 来标记，默认值为0，可以被设置成任意整数，但是这个值在整个Kafka集群中必须是唯一。  </p>
</li>
<li><p>port（在配置文件中没有这个配置，但可以直接加入port=7777，重启生效）</p>
<p> broker服务启动端口，也是负责监听消息的端口。</p>
</li>
<li><p>zookeeper.connect</p>
<p>用于保存broker元数据的zookeeper地址，</p>
<p>默认设置 hostname:2181</p>
<p>hostname是zookeeper服务器的IP地址</p>
<p>2181是Zookeeper的客户端端口</p>
</li>
<li><p>log.dirs</p>
<p>kafka数据的存放地址，多个地址的话用逗号分割,多个目录分布在不同磁盘上可以提高读写性能。</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p>Config文件夹下server.properties</p>
<ul>
<li><p>num.partitions</p>
<p>每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖。（分区数要大于消费者数）</p>
</li>
<li><p>log.retention.ms</p>
<p>决定数据保存多久</p>
</li>
<li><p>log.retention.bytes</p>
<p>通过判断消息大小来，来决定消息是否过期，例如一个主题报刊8个分区，log.retention.bytes设置为1GB，则该主题最多可以保存8GB数据。</p>
</li>
<li><p>log.segment.bytes</p>
<p> topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖</p>
</li>
<li><p>message.max.bytes</p>
<p> 限制单个消息大小，默认1MB。</p>
</li>
</ul>
<hr>
<h4 id="生产者配置"><a href="#生产者配置" class="headerlink" title="生产者配置"></a>生产者配置</h4><ul>
<li><p>acks</p>
<p>acks参数指定了必须要多少个副本收到消息，生产者才会认为消息写入是成功的，这个参数对消息丢失的可能性有重要影响。</p>
<p>如果acks=0，生产者在写入消息之前不会等待任何来自服务器的响应。</p>
<p>如果acks=1，只要集群首领节点收到消息，生产者就会收到一个来自服务器的成功响应。</p>
<p>如过acks=all，只有当所有参与复制的节点全部收到消息时，生产者才会收到来自服务器的成功响应</p>
</li>
<li><p>buffer.memory</p>
<p>该参数用来设置生产者内存缓存区的大小，生产者内存缓存区</p>
</li>
<li><p>compression.type</p>
<p>该参数指定消息被发送给broker之前使用那一种压缩算法进行压缩。三种压缩方法：snappy、gzip 或 lz4。</p>
<p>snappy：占用比较少的CPU，却能提供较好的性能和相当可观的压缩比。</p>
<p>gzip：占用较多的CPU,但会提供更高的压缩比，所以如果带宽比较有限，可以采用这种算法。</p>
</li>
<li><p>retries</p>
<p>生产者重发消息的次数，</p>
</li>
<li><p>batch.size</p>
<p>该参数指定了一个批次可以使用的内存大小（一个批次最大使用内存大小）。</p>
</li>
<li><p>linger.ms</p>
<p>该参数指定了生产者在发送批次之前等待更多消息加入批次时间。（把批次填满或者达到linger.ms达到上限时把批次发送出去）。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka-入门4-生产者及消费者简单案例</title>
    <url>/2020/07/12/kafka-%E5%85%A5%E9%97%A84-%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%8A%E6%B6%88%E8%B4%B9%E8%80%85%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="生产者代码示例"><a href="#生产者代码示例" class="headerlink" title="生产者代码示例"></a>生产者代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;127.0.0.1:7777&quot;</span>);   <span class="comment">//指定broker地址，最好指定一个集群中两个broker，一个冗机也可以连接到集群上。</span></span><br><span class="line">        properties.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;retries&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">163</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                String msg = <span class="string">&quot;Message &quot;</span> + i;</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">&quot;HelloWorld&quot;</span>, msg));   <span class="comment">//指定主题(Topic)，和发送的消息。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Sent:&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line">Sent：Message <span class="number">989</span></span><br><span class="line">Sent：Message <span class="number">990</span></span><br><span class="line">Sent：Message <span class="number">991</span></span><br><span class="line">Sent：Message <span class="number">992</span></span><br><span class="line">Sent：Message <span class="number">993</span></span><br><span class="line">Sent：Message <span class="number">994</span></span><br><span class="line">Sent：Message <span class="number">995</span></span><br><span class="line">Sent：Message <span class="number">996</span></span><br><span class="line">Sent：Message <span class="number">997</span></span><br><span class="line">Sent：Message <span class="number">998</span></span><br><span class="line">Sent：Message <span class="number">999</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="消费者示例代码"><a href="#消费者示例代码" class="headerlink" title="消费者示例代码"></a>消费者示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;group-1&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;session.timeout.ms&quot;</span>, <span class="string">&quot;30000&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        kafkaConsumer.subscribe(Arrays.asList(<span class="string">&quot;HelloWorld&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, value = %s&quot;</span>, record.offset(), record.value());</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line">offset = <span class="number">3991</span>，value = Message <span class="number">9991</span></span><br><span class="line">offset = <span class="number">3992</span>，value = Message <span class="number">9992</span></span><br><span class="line">offset = <span class="number">3993</span>，value = Message <span class="number">9993</span></span><br><span class="line">offset = <span class="number">3994</span>，value = Message <span class="number">9994</span></span><br><span class="line">offset = <span class="number">3995</span>，value = Message <span class="number">9995</span></span><br><span class="line">offset = <span class="number">3996</span>，value = Message <span class="number">9996</span></span><br><span class="line">offset = <span class="number">3997</span>，value = Message <span class="number">9997</span></span><br><span class="line">offset = <span class="number">3998</span>，value = Message <span class="number">9998</span></span><br><span class="line">offset = <span class="number">3999</span>，value = Message <span class="number">9999</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka-入门4-生产者及消费者简单案例</title>
    <url>/2020/07/12/kafka-%E5%85%A5%E9%97%A84-%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%8A%E6%B6%88%E8%B4%B9%E8%80%85%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="生产者代码示例"><a href="#生产者代码示例" class="headerlink" title="生产者代码示例"></a>生产者代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;127.0.0.1:7777&quot;</span>);   <span class="comment">//指定broker地址，最好指定一个集群中两个broker，一个冗机也可以连接到集群上。</span></span><br><span class="line">        properties.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;retries&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">163</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                String msg = <span class="string">&quot;Message &quot;</span> + i;</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">&quot;HelloWorld&quot;</span>, msg));   <span class="comment">//指定主题(Topic)，和发送的消息。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Sent:&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            producer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line">Sent：Message <span class="number">989</span></span><br><span class="line">Sent：Message <span class="number">990</span></span><br><span class="line">Sent：Message <span class="number">991</span></span><br><span class="line">Sent：Message <span class="number">992</span></span><br><span class="line">Sent：Message <span class="number">993</span></span><br><span class="line">Sent：Message <span class="number">994</span></span><br><span class="line">Sent：Message <span class="number">995</span></span><br><span class="line">Sent：Message <span class="number">996</span></span><br><span class="line">Sent：Message <span class="number">997</span></span><br><span class="line">Sent：Message <span class="number">998</span></span><br><span class="line">Sent：Message <span class="number">999</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="消费者示例代码"><a href="#消费者示例代码" class="headerlink" title="消费者示例代码"></a>消费者示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;group-1&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;earliest&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;session.timeout.ms&quot;</span>, <span class="string">&quot;30000&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        kafkaConsumer.subscribe(Arrays.asList(<span class="string">&quot;HelloWorld&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, value = %s&quot;</span>, record.offset(), record.value());</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line">offset = <span class="number">3991</span>，value = Message <span class="number">9991</span></span><br><span class="line">offset = <span class="number">3992</span>，value = Message <span class="number">9992</span></span><br><span class="line">offset = <span class="number">3993</span>，value = Message <span class="number">9993</span></span><br><span class="line">offset = <span class="number">3994</span>，value = Message <span class="number">9994</span></span><br><span class="line">offset = <span class="number">3995</span>，value = Message <span class="number">9995</span></span><br><span class="line">offset = <span class="number">3996</span>，value = Message <span class="number">9996</span></span><br><span class="line">offset = <span class="number">3997</span>，value = Message <span class="number">9997</span></span><br><span class="line">offset = <span class="number">3998</span>，value = Message <span class="number">9998</span></span><br><span class="line">offset = <span class="number">3999</span>，value = Message <span class="number">9999</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka-入门3-生产者及消费者简单案例</title>
    <url>/2020/07/12/kafka-%E5%85%A5%E9%97%A83-%E6%B6%88%E8%B4%B9%E8%80%85%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="消费者消费消息机制"><a href="#消费者消费消息机制" class="headerlink" title="消费者消费消息机制"></a>消费者消费消息机制</h4><ul>
<li><p>Topic 有多分分区<strong>一个消费者</strong></p>
<p>描述：消费者会接收到这个Topic下所有分区的消息</p>
</li>
<li><p>Topic 有多个分区，多个消费者，<strong>消费者数小于分区数</strong></p>
<p>描述：每个分区只能被一个消费者读取，但是broker群组协调器，会指定消费者的分区所有权信息。将分区均衡的分配给可用的消费者</p>
</li>
<li><p>Topic 协议有多个分区，多个消费者，<strong>消费者数大于分区数</strong></p>
<p>描述：会有消费者被闲置，不会接收到任何消息</p>
</li>
<li><p>Topic 有多个分区，<strong>多个消费者群组，每个消费者群组有多个消费者</strong></p>
<p>描述：每个分区可以被多个消费者去读（但多个消费者必须在不同的消费者群组）但是broker群组协调器会指定消费者群组内消费者和分区的所有权信息。将分区均衡的分配给消费者群组内可用的消费者</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka-进阶1-数据流</title>
    <url>/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
    <content><![CDATA[<h4 id="Kafka-Replication的数据流"><a href="#Kafka-Replication的数据流" class="headerlink" title="Kafka Replication的数据流"></a>Kafka Replication的数据流</h4><p><img src="/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/%E6%95%B0%E6%8D%AE%E6%B5%81.png" alt="数据流"></p>
<hr>
<span id="more"></span>

<h4 id="producer-发布消息的过程"><a href="#producer-发布消息的过程" class="headerlink" title="producer 发布消息的过程"></a>producer 发布消息的过程</h4><p>Producer在发布消息到某个Partition时，先通过ZooKeeper找到该Partition的Leader，然后无论该Topic的Replication Factor为多少（也即该Partition有多少个Replica），Producer只将该消息发送到该Partition的Leader。Leader会将该消息写入其本地Log。每个Follower都从Leader pull数据。这种方式上，Follower存储的数据顺序与Leader保持一致。Follower在收到该消息并写入其Log后，向Leader发送ACK。一旦Leader收到了ISR中的所有Replica的ACK，该消息就被认为已经commit了，Leader将增加HW（俗称高水位）并且向Producer发送ACK。</p>
<p><img src="/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF%E8%BF%87%E7%A8%8B.png" alt="发布消息过程"></p>
<hr>
<h4 id="kafka副本同步队列（ISR）"><a href="#kafka副本同步队列（ISR）" class="headerlink" title="kafka副本同步队列（ISR）"></a>kafka副本同步队列（ISR）</h4><p>副本数对Kafka的吞吐率是有一定的影响，但极大的增强了可用性。默认情况下Kafka的replica数量为1，即每个partition都有一个唯一的leader，为了确保消息的可靠性，通常应用中将其值小设置为大于1，比如3。 所有的副本（replicas）统称为Assigned Replicas，即AR。ISR是AR中的一个子集，由leader维护ISR列表，follower从leader同步数据有一些延迟。</p>
<p><img src="/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/ISR.png" alt="ISR"></p>
<hr>
<h4 id="kafka数据可靠性和持久性保证"><a href="#kafka数据可靠性和持久性保证" class="headerlink" title="kafka数据可靠性和持久性保证"></a>kafka数据可靠性和持久性保证</h4><ul>
<li>当producer向leader发送数据时，可以通过request.required.acks参数来设置数据可靠性的级别：<ul>
<li>1（默认）：这意味着producer在ISR中的leader已成功收到的数据并得到确认后发送下一条message。如果leader宕机了，则会丢失数据。</li>
<li>0：这意味着producer无需等待来自broker的确认而继续发送下一批消息。这种情况下数据传输效率最高，但是数据可靠性确是最低的。</li>
<li>-1：producer需要等待ISR中的所有follower都确认接收到数据后才算一次发送完成，可靠性最高。但是这样也不能保证数据不丢失，比如当ISR中只有leader时（前面ISR那一节讲到，ISR中的成员由于某些情况会增加也会减少，最少就只剩一个leader），这样就变成了acks=1的情况。</li>
</ul>
</li>
</ul>
<h5 id="接下来对acks-1和-1的两种情况进行详细分析："><a href="#接下来对acks-1和-1的两种情况进行详细分析：" class="headerlink" title="接下来对acks=1和-1的两种情况进行详细分析："></a>接下来对acks=1和-1的两种情况进行详细分析：</h5><ul>
<li><p>request.required.acks=1      </p>
<p>producer发送数据到leader，leader写本地日志成功，返回客户端成功；此时ISR中的副本还没有来得及拉取该消息，leader就宕机了，那么此次发送的消息就会丢失。注：LEO（log end offset）。</p>
</li>
</ul>
<p><img src="/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/ASKS1.png" alt="acks=1"></p>
<ul>
<li><p>request.required.acks=-1</p>
<ul>
<li><p>同步（Kafka默认为同步，即producer.type=sync）的发送模式，replication.factor&gt;=2且min.insync.replicas&gt;=2的情况下，不会丢失数据。有两种典型情况。acks=-1的情况下，数据发送到leader, ISR的follower全部完成数据同步后，leader此时挂掉，那么会选举出新的leader，数据不会丢失。</p>
<p><img src="/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5.png" alt="acks=-1 第一种情况"></p>
</li>
<li><p>acks=-1的情况下，数据发送到leader后 ，部分ISR的副本同步，leader此时挂掉。比如follower1h和follower2都有可能变成新的leader, producer端会得到返回异常，producer端会重新发送数据，follower1被选举为新的leader的话，数据可能会重复。当然如果在leader crash的时候，follower2还没有同步到任何数据，而且follower2被选举为新的leader的话，这样消息就不会重复。</p>
<p><img src="/2021/10/21/kafka-%E8%BF%9B%E9%98%B61-%E6%95%B0%E6%8D%AE%E6%B5%81/%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5.png" alt="acks=-1 第二种情况"></p>
</li>
</ul>
<p>​</p>
<p>​    </p>
</li>
</ul>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf-基础=6-列表绑定</title>
    <url>/2020/08/13/thymeleaf-%E5%9F%BA%E7%A1%80-6-%E5%88%97%E8%A1%A8%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h4 id="列表绑定"><a href="#列表绑定" class="headerlink" title="列表绑定"></a>列表绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender&#125;==0?&#x27;女&#x27;:&#x27;男&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf_基础1_简介</title>
    <url>/2020/06/28/thymeleaf-%E5%9F%BA%E7%A1%801-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="Thymeleaf-简介"><a href="#Thymeleaf-简介" class="headerlink" title="Thymeleaf 简介"></a>Thymeleaf 简介</h4><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">Thymeleaf官方文档</a></p>
<ul>
<li><p>Thymeleaf是一个非常容易扩展的模板引擎(事实上，它可以被称为模板引擎框架)，允许您定义和定制模板将被处理到一个很好的细节水平的方式。</p>
</li>
<li><p>Thymeleaf的主要目标是将优雅的自然模板带到您的开发工作流程中—HTML能够在浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。Thymeleaf能够处理 <strong>HTML，XML，JavaScript，CSS</strong>甚至纯文本。</p>
</li>
<li><p>Thymeleaf的主要目标是提供一个优雅和高度可维护的创建模板的方式。 为了实现这一点，它建立在自然模板的概念之上，以不影响模板作为设计原型的方式将其逻辑注入到模板文件中。 这改善了设计沟通，弥合了前端设计和开发人员之间的理解偏差。</p>
</li>
<li><p>Thymeleaf也是从一开始就设计(特别是HTML5)允许创建完全验证的模板。</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="使用Thymeleaf属性需要注意的五点"><a href="#使用Thymeleaf属性需要注意的五点" class="headerlink" title="使用Thymeleaf属性需要注意的五点"></a>使用Thymeleaf属性需要注意的五点</h4><ul>
<li>若要使用Thymeleaf语法，首先要声明名称空间： xmlns:th=”<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a>“</li>
<li>设置文本内容 th:text，设置input的值 th:value，循环输出 th:each，条件判断 th:if，插入代码块 th:insert，定义代码块 th:fragment，声明变量 th:object</li>
<li>th:each 的用法需要格外注意，打个比方：如果你要循环一个div中的p标签，则th:each属性必须放在p标签上。若你将th:each属性放在div上，则循环的是将整个div。</li>
<li>变量表达式中提供了很多的内置方法，该内置方法是用#开头，请不要与#{}消息表达式弄混。</li>
<li>th:insert，th:replace，th:include 三种插入代码块的效果相似，但区别很大。</li>
</ul>
]]></content>
      <categories>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf_基础2_th属性</title>
    <url>/2020/06/28/thymeleaf-%E5%9F%BA%E7%A1%802-th%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<ul>
<li><p>th:text</p>
<p>设置当前元素的文本内容，相同功能的还有<strong>th:utext</strong>，两者的区别在于前者不会转义html标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;caidan.text&#125;&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>th:value</p>
<p>设置当前元素的value值，类似修改指定属性的还有<strong>th:src</strong>，<strong>th:href</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;m : $&#123;tsysRoleList&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkbox checkbox-primary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:id</span>=<span class="string">&quot;$&#123;m.id&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sqcheckbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;roles&quot;</span>  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;m.id&#125;&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:for</span>=<span class="string">&quot;$&#123;m.id&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;m.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>th:each</p>
<p>遍历循环元素，和th:text或th:value一起使用。注意该属性修饰的标签位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 第一种 循环遍历数组</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;m : $&#123;tsysRoleList&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkbox checkbox-primary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:id</span>=<span class="string">&quot;$&#123;m.id&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sqcheckbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;roles&quot;</span>  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;m.id&#125;&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:for</span>=<span class="string">&quot;$&#123;m.id&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;m.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 第二种 循环遍历map</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;caidan,caidanStat:$&#123;muen.nodes&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;caidan.visible == 0&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>th:if</p>
<p>条件判断，类似的还有<strong>th:unless</strong>，<strong>th:switch</strong>，<strong>th:case</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;muen.visible == 0&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-left:0px solid!important;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title-menu-left&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>   <span class="attr">th:text</span>=<span class="string">&quot;$&#123;muen.text&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">th:classappend</span>=<span class="string">&quot;$&#123;muen.icon&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pull-right config-wrap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>th:fragment</p>
<p><strong>th:fragment</strong>：定义代码块，方便被<strong>th:insert</strong>,<strong>th:replace</strong>，<strong>th:include</strong>引用</p>
<p>模板定义案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 第一种 不带参数模板</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>  //第二种  带参数模板<br>  <div th:fragment="title(title,parenttitle,isMsg,msgHTML)"><br>    <div class="row"><br>      <div id="paper-top"><br>          <!-- 标题 --><br>          <div class="col-lg-3"><br>              <h2 class="tittle-content-header"><br>                  <i class="icon-window"></i><br>                  <span th:text="${title}"></span><br>              </h2><br>          </div><br>    </div></div></div></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- th:insert</span><br><span class="line"></span><br><span class="line">  **th:insert**：代码块引入，类似的还有**th:replace**，**th:include**，三者的区别较大，若使用不恰当会破坏html结构，常用于公共代码块提取的场景</span><br><span class="line"></span><br><span class="line">  - `th:insert` 最简单：它将简单地将指定的片段作为其host标签的主体插入。</span><br><span class="line">  - `th:replace`实际上*将*其主机标签*替换*为指定的片段。</span><br><span class="line">  - `th:include`与相似`th:insert`，但是不插入片段，而是仅插入该片段的*内容*。</span><br><span class="line"></span><br><span class="line">  模板引用案例</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  // 第一种 引用无参模板</span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    // footer 为文件名，copy 为定义的模板名称</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  // 第二种 引用有参模板</span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	// admin/common/html/title 为模板的地址及文件名，从 static 目录下开始</span><br><span class="line">      // title($&#123;title&#125;,$&#123;parenttitle&#125;,$&#123;isMsg&#125;,$&#123;msgHTML&#125;) 模板名称及传入模板参数</span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;admin/common/html/title :: title($&#123;title&#125;,$&#123;parenttitle&#125;,$&#123;isMsg&#125;,$&#123;msgHTML&#125;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;admin/common/html/title :: title($&#123;title&#125;,$&#123;parenttitle&#125;,$&#123;isMsg&#125;,$&#123;msgHTML&#125;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;admin/common/html/title :: title($&#123;title&#125;,$&#123;parenttitle&#125;,$&#123;isMsg&#125;,$&#123;msgHTML&#125;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  // 第三种 动态判断引用</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: ($&#123;user.isAdmin&#125;? #&#123;footer.admin&#125; : #&#123;footer.normaluser&#125;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  // 第四种 引用片段不带 th:fragment</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;copy-section&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: #copy-section&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>th:object</p>
<p>声明变量，一般和*{}一起配合使用，达到偷懒的效果</p>
</li>
<li><p>th:attr</p>
<p>修改任意属性，实际开发中用的较少，因为有丰富的其他th属性帮忙，类似的还有th:attrappend，th:attrprepend</p>
</li>
</ul>
]]></content>
      <categories>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf_基础3_标准语法表达式</title>
    <url>/2020/06/28/thymeleaf-%E5%9F%BA%E7%A1%803-%E6%A0%87%E5%87%86%E8%AF%AD%E6%B3%95%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="…-代码块表达式"><a href="#…-代码块表达式" class="headerlink" title="~{…}   代码块表达式"></a>~{…}   代码块表达式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 基本语法—代码块案例语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span></span><br><span class="line">      © 著作权归 老王 所有</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;about&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span></span><br><span class="line">      关于</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;links&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span></span><br><span class="line">      CCTV</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 基本语法—代码块案例语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--三种不同的引入方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copyright&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copyright&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #ffffff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: about&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;background: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: links&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;background: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><code>#&#123;...&#125;   消息表达式</code></p>
<hr>
<span id="more"></span>

<h4 id="…-链接表达式"><a href="#…-链接表达式" class="headerlink" title="@{…}  链接表达式"></a>@{…}  链接表达式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">链接表达式好处</span><br><span class="line">	不管是静态资源的引用，form表单的请求，凡是链接都可以用@&#123;...&#125; 。这样可以动态获取项目路径，即便项目名变了，依然可以正常访问</span><br><span class="line"></span><br><span class="line">	#修改项目名，链接表达式会自动修改路径，避免资源文件找不到 server.context-path=/itdragon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">链接表达式结构</span><br><span class="line">	无参：@&#123;/xxx&#125;</span><br><span class="line">	</span><br><span class="line">	有参：@&#123;/xxx(k1=v1,k2=v2)&#125; 对应url结构：xxx?k1=v1&amp;k2=v2</span><br><span class="line">	</span><br><span class="line">	引入本地资源：@&#123;/项目本地的资源路径&#125;</span><br><span class="line">	</span><br><span class="line">	引入外部资源：@&#123;/webjars/资源在jar包中的路径&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 案例</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main/css/itdragon.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-login&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="attr">th:method</span>=<span class="string">&quot;post&quot;</span> &gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="…-变量表达式"><a href="#…-变量表达式" class="headerlink" title="${…}   变量表达式"></a>${…}   变量表达式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量表达式有丰富的内置方法，使其更强大，更方便。</span><br><span class="line"></span><br><span class="line">变量表达式功能</span><br><span class="line">一、可以获取对象的属性和方法</span><br><span class="line">二、可以使用ctx，vars，locale，request，response，session，servletContext内置对象</span><br><span class="line">三、可以使用dates，numbers，strings，objects，arrays，lists，sets，maps等内置方法（重点介绍）</span><br><span class="line"></span><br><span class="line">常用的内置对象</span><br><span class="line">一、ctx ：上下文对象。</span><br><span class="line">二、vars ：上下文变量。</span><br><span class="line">三、locale：上下文的语言环境。</span><br><span class="line">四、request：（仅在web上下文）的 HttpServletRequest 对象。</span><br><span class="line">五、response：（仅在web上下文）的 HttpServletResponse 对象。</span><br><span class="line">六、session：（仅在web上下文）的 HttpSession 对象。</span><br><span class="line">七、servletContext：（仅在web上下文）的 ServletContext 对象</span><br><span class="line">这里以常用的Session举例，用户刊登成功后，会把用户信息放在Session中，Thymeleaf通过内置对象将值从session中获取。</span><br><span class="line">	// java 代码将用户名放在session中 </span><br><span class="line">	session.setAttribute(&quot;userinfo&quot;,username); </span><br><span class="line">	// Thymeleaf通过内置对象直接获取 </span><br><span class="line">	th:text=&quot;$&#123;session.userinfo&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="常用的内置方法"><a href="#常用的内置方法" class="headerlink" title="常用的内置方法"></a>常用的内置方法</h4><ol>
<li>strings：字符串格式化方法，常用的Java方法它都有。比如：equals，equalsIgnoreCase，length，trim，toUpperCase，toLowerCase，indexOf，substring，replace，startsWith，endsWith，contains，containsIgnoreCase等</li>
<li>numbers：数值格式化方法，常用的方法有：formatDecimal等</li>
<li>bools：布尔方法，常用的方法有：isTrue，isFalse等</li>
<li>arrays：数组方法，常用的方法有：toArray，length，isEmpty，contains，containsAll等</li>
<li>lists，sets：集合方法，常用的方法有：toList，size，isEmpty，contains，containsAll，sort等</li>
<li>maps：对象方法，常用的方法有：size，isEmpty，containsKey，containsValue等</li>
<li>dates：日期方法，常用的方法有：format，year，month，hour，createNow等</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--名称空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 基本语法—变量语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ITDragon Thymeleaf 内置方法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#strings <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(itdragonStr)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Old Str : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;itdragonStr&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>toUpperCase : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toUpperCase(itdragonStr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>toLowerCase : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toLowerCase(itdragonStr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>equals : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.equals(itdragonStr, &#x27;itdragonblog&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>equalsIgnoreCase : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.equalsIgnoreCase(itdragonStr, &#x27;itdragonblog&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>indexOf : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.indexOf(itdragonStr, &#x27;r&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>substring : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.substring(itdragonStr, 2, 8)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>replace : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.replace(itdragonStr, &#x27;it&#x27;, &#x27;IT&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>startsWith : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.startsWith(itdragonStr, &#x27;it&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>contains : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.contains(itdragonStr, &#x27;IT&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#numbers <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>formatDecimal 整数部分随意，小数点后保留两位，四舍五入: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatDecimal(itdragonNum, 0, 2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>formatDecimal 整数部分保留五位数，小数点后保留两位，四舍五入: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatDecimal(itdragonNum, 5, 2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#bools <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#bools.isTrue(itdragonBool)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;itdragonBool&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#arrays <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #arrays.isEmpty(itdragonArray)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>length : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#arrays.length(itdragonArray)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>contains : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#arrays.contains(itdragonArray, 5)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>containsAll : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#arrays.containsAll(itdragonArray, itdragonArray)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#lists <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(itdragonList)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>size : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.size(itdragonList)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>contains : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.contains(itdragonList, 0)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>sort : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.sort(itdragonList)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#maps <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #maps.isEmpty(itdragonMap)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>size : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#maps.size(itdragonMap)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>containsKey : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#maps.containsKey(itdragonMap, &#x27;thName&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>containsValue : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#maps.containsValue(itdragonMap, &#x27;#maps&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#dates <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>format : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>custom format : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(itdragonDate, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>day : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.day(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>month : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.month(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>monthName : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.monthName(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>year : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.year(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>dayOfWeekName : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.dayOfWeekName(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hour : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.hour(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>minute : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.minute(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>second : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.second(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>createNow : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.createNow()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">java 向页面传参</span><br><span class="line">public String variable_expression(ModelMap map) &#123;</span><br><span class="line">map.put(&quot;itdragonStr&quot;, &quot;itdragonBlog&quot;);</span><br><span class="line">map.put(&quot;itdragonBool&quot;, true);</span><br><span class="line">map.put(&quot;itdragonArray&quot;, new Integer[]&#123;1,2,3,4&#125;);</span><br><span class="line">map.put(&quot;itdragonList&quot;, Arrays.asList(1,3,2,4,0));</span><br><span class="line">Map itdragonMap = new HashMap();</span><br><span class="line">itdragonMap.put(&quot;thName&quot;, &quot;$&#123;#...&#125;&quot;);</span><br><span class="line">itdragonMap.put(&quot;desc&quot;, &quot;变量表达式内置方法&quot;);</span><br><span class="line">map.put(&quot;itdragonMap&quot;, itdragonMap);</span><br><span class="line">map.put(&quot;itdragonDate&quot;, new Date());</span><br><span class="line">map.put(&quot;itdragonNum&quot;, 888.888D);</span><br><span class="line">return &quot;varexpressions&quot;;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf_基础4_内置方法</title>
    <url>/2020/06/28/thymeleaf-%E5%9F%BA%E7%A1%804-%E5%AE%9E%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h4 id="实用表达式对象"><a href="#实用表达式对象" class="headerlink" title="实用表达式对象"></a>实用表达式对象</h4><ul>
<li>dates: java.util的实用方法。对象:日期格式、组件提取等.</li>
<li>calendars: 类似于#日期,但对于java.util。日历对象</li>
<li>numbers: 格式化数字对象的实用方法。</li>
<li>strings:字符串对象的实用方法:包含startsWith,将/附加等。</li>
<li>objects: 实用方法的对象。</li>
<li>bools: 布尔评价的实用方法。</li>
<li>arrays: 数组的实用方法。</li>
<li>lists: list集合。</li>
<li>sets:set集合。</li>
<li>maps: map集合。</li>
<li>aggregates: 实用程序方法用于创建聚集在数组或集合.</li>
<li>messages: 实用程序方法获取外部信息内部变量表达式,以同样的方式,因为他们将获得使用# {…}语法</li>
<li>ids: 实用程序方法来处理可能重复的id属性(例如,由于迭代)。</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="内置方法简单案例"><a href="#内置方法简单案例" class="headerlink" title="内置方法简单案例"></a>内置方法简单案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--名称空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 基本语法—变量语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ITDragon Thymeleaf 内置方法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#strings <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(itdragonStr)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Old Str : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;itdragonStr&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>toUpperCase : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toUpperCase(itdragonStr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>toLowerCase : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toLowerCase(itdragonStr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>equals : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.equals(itdragonStr, &#x27;itdragonblog&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>equalsIgnoreCase : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.equalsIgnoreCase(itdragonStr, &#x27;itdragonblog&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>indexOf : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.indexOf(itdragonStr, &#x27;r&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>substring : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.substring(itdragonStr, 2, 8)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>replace : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.replace(itdragonStr, &#x27;it&#x27;, &#x27;IT&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>startsWith : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.startsWith(itdragonStr, &#x27;it&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>contains : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.contains(itdragonStr, &#x27;IT&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#numbers <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>formatDecimal 整数部分随意，小数点后保留两位，四舍五入: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatDecimal(itdragonNum, 0, 2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>formatDecimal 整数部分保留五位数，小数点后保留两位，四舍五入: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatDecimal(itdragonNum, 5, 2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#bools <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#bools.isTrue(itdragonBool)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;itdragonBool&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#arrays <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #arrays.isEmpty(itdragonArray)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>length : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#arrays.length(itdragonArray)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>contains : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#arrays.contains(itdragonArray, 5)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>containsAll : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#arrays.containsAll(itdragonArray, itdragonArray)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#lists <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(itdragonList)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>size : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.size(itdragonList)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>contains : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.contains(itdragonList, 0)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>sort : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.sort(itdragonList)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#maps <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #maps.isEmpty(itdragonMap)&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>size : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#maps.size(itdragonMap)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>containsKey : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#maps.containsKey(itdragonMap, &#x27;thName&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>containsValue : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#maps.containsValue(itdragonMap, &#x27;#maps&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>#dates <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>format : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>custom format : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(itdragonDate, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>day : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.day(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>month : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.month(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>monthName : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.monthName(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>year : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.year(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>dayOfWeekName : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.dayOfWeekName(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hour : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.hour(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>minute : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.minute(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>second : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.second(itdragonDate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>createNow : <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.createNow()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf-基础5-模板</title>
    <url>/2020/08/13/thymeleaf-%E5%9F%BA%E7%A1%805-%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h4 id="模板案例"><a href="#模板案例" class="headerlink" title="模板案例"></a>模板案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--topbar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;topbar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand col-sm-3 col-md-2 mr-0&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>[[$&#123;session.loginUser&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--sidebar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--引入抽取的topbar--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--模板名：会使用thymeleaf的前后缀配置规则进行解析--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::topbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--引入侧边栏--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">               2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">               3、创建一个input项，name=&quot;_method&quot;;值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">               --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;emp!=null&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan@atguigu.com&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;depts&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>thymeleaf</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础10-自定义过滤器</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%8010-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vue动画的理解</span><br><span class="line">1）操作css的 trasition 或 animation</span><br><span class="line">2）vue 会目标元素 添加/移除 特定的class</span><br><span class="line">3）过渡的相关类名</span><br><span class="line">	xxx-enter-active：指定显示 transition</span><br><span class="line">	xxx-leave-active：指定隐藏的 transition</span><br><span class="line">	xxx-enter/xxx-leave-to：指定隐藏时的样式</span><br><span class="line">	</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>过渡与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/*显示时样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.xxx-enter-active</span>, <span class="selector-class">.xxx-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏时样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.xxx-enter</span>, <span class="selector-class">.xxx-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*显示的过渡效果*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.fade-enter-active</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏的过渡效果 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">3s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*vue官网案例*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>)</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.bounce-enter-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.bounce-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="keyword">@keyframes</span> bounce-in &#123;</span></span><br><span class="line"><span class="css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>Toggle show<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span>Lorem ipsum dolor sit amet<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;, </span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo2&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;, </span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm3 =<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础1-基本语法</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%801-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>o1_HelloWord<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1、引入Vue</span></span><br><span class="line"><span class="comment">            2、创建Vue对象</span></span><br><span class="line"><span class="comment">                el : 指定根element(选择器)</span></span><br><span class="line"><span class="comment">                data : 初始化数据(页面可以访问)</span></span><br><span class="line"><span class="comment">            3、双向数据绑定 : v-model</span></span><br><span class="line"><span class="comment">            4、显示数据 ：&#123;&#123;xxx&#125;&#125;</span></span><br><span class="line"><span class="comment">            5、理解Vue的mvvm实现</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.双大括号表达式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--textContent--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--innerHTML--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.指令一 强制绑定数据类型<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imageUrl&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageUrl&quot;</span>&gt;</span><span class="comment">&lt;!--强制绑定--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;img :src=&quot;imageUrl&quot;&gt;强制绑定的缩写 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.指令二 绑定事件监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test2(msg)&quot;</span>&gt;</span>事件绑定输出VM（MVVM）的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!--事件监听的缩写--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="comment">&lt;!--双向绑定--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--双向绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;<span class="comment">//配置对象</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#test&#x27;</span>,<span class="comment">//element ： 选择器（查找vue管理的区域）</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;<span class="comment">//数据（model）</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span> : <span class="string">&#x27;mark&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">imageUrl</span> : <span class="string">&#x27;https://cn.vuejs.org/images/logo.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg</span> : <span class="string">&#x27;&lt;a href=&quot;http://www.atguigu.com&quot;&gt;I Will Back!&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span> : &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;first click&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test2</span>(<span class="params">text</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;first click&quot;</span>+text)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        vm.username = <span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础11-指令</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%8011-%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">常用内置指令</span><br><span class="line">	1）v:text	更新元素的 textContent</span><br><span class="line">	2）v:html	更新元素的 innerHTML</span><br><span class="line">	3)  v-if	如果为true，当前标签才会输出到界面</span><br><span class="line">	4）v-else	如果为false，当前标签才会输出到界面，和 v-if 配合使用</span><br><span class="line">	5）v-show	通过控制 display 样式来控制显示/隐藏</span><br><span class="line">	6）v-for	遍历数组/对象</span><br><span class="line">	7）v-on	绑定事件监听，一般简写为 @</span><br><span class="line">	8）v-bind	强制绑定解析表达式，可以省略 v-bind ，简写  ：</span><br><span class="line">	9）v-model	双向数据绑定</span><br><span class="line">	10）ref	指定唯一标识，vue对象通过 $els 属性访问这个元素属性</span><br><span class="line">	11）v-clock	防止闪现，与css配合：[v-clock]&#123;display:none&#125;</span><br><span class="line">	</span><br><span class="line">自定义全局指令</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/moment.js/2.24.0/moment.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义全局指令</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// el:指令属性所在的标签</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// binding：包含指令相关的数据属性</span></span></span><br><span class="line"><span class="javascript">        Vue.directive(<span class="string">&#x27;upper-text&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(el,binding)</span></span><br><span class="line"><span class="javascript">            el.textContent = binding.value.toUpperCase()</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Vue.directive(&#x27;lower-text&#x27;,function(el,binding)&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     console.log(el,binding)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     el.textContent = binding.value.toLowerCase()</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg1</span>:<span class="string">&quot;SSSDSAFSAaaaadfsfsafda&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;, </span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo2&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg2</span>:<span class="string">&quot;SSSDSAFSAaaaadfsfsafda&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">directives</span> : &#123;<span class="comment">//注册局部指令 </span></span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;lower-text&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(el,binding)</span></span><br><span class="line"><span class="javascript">                    el.textContent = binding.value.toLowerCase()</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础12-封装插件</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%8012-%E5%B0%81%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="插件封装"><a href="#插件封装" class="headerlink" title="插件封装"></a>插件封装</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*vue 的插件库*/</span><br><span class="line">(function()&#123;</span><br><span class="line">    //MyPlugin 是我们需要暴露的插件对象</span><br><span class="line">    const MyPlugin = &#123;&#125;</span><br><span class="line">    MyPlugin.install = function (Vue, options) &#123;</span><br><span class="line">        // 1. 添加全局方法或属性</span><br><span class="line">        Vue.myGlobalMethod = function () &#123;</span><br><span class="line">          console.log(&#x27;vue对象的方法myGlobalMethod&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        // 2. 添加全局资源</span><br><span class="line">        Vue.directive(&#x27;my-directive&#x27;,function(el,binding)&#123;</span><br><span class="line">            el.textContent = binding.value.toUpperCase()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // 4. 添加实例方法</span><br><span class="line">        Vue.prototype.$myMethod = function () &#123;</span><br><span class="line">          // 逻辑...</span><br><span class="line">            console.log(&#x27;Vue实例对象的方法$myMethod()&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    //向外暴露</span><br><span class="line">    window.MyPlugin = MyPlugin</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义插件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-my-directive</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/moment.js/2.24.0/moment.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;vue-myplugins.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//声明使用插件</span></span></span><br><span class="line"><span class="javascript">        Vue.use(MyPlugin) <span class="comment">//内部会执行 MyPlugin.install(Vue)</span></span></span><br><span class="line"><span class="javascript">        Vue.myGlobalMethod()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg1</span>:<span class="string">&quot;SSSDSAFSAaaaadfsfsafda&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        vm.$myMethod()</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础2-计算属性和监视</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%802-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E8%A7%86/</url>
    <content><![CDATA[<h3 id="计算机属性和监视"><a href="#计算机属性和监视" class="headerlink" title="计算机属性和监视"></a>计算机属性和监视</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>计算属性和监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         1. 计算属性</span></span><br><span class="line"><span class="comment">            在computed属性对象中定义计算属性的方法，在页面中使用&#123;&#123;方法名&#125;&#125;来显示计算的结果</span></span><br><span class="line"><span class="comment">         2.监视属性：</span></span><br><span class="line"><span class="comment">            通过vm 对象的$wach() 或 watch 配置来监视指定的属性，当属性变化时，或吊函数自动调用，在函数内部进行计算</span></span><br><span class="line"><span class="comment">         3.计算属性高级</span></span><br><span class="line"><span class="comment">            计算属性存在缓存，多次读取值执行一次getter计算</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">          姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;First Name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Last Name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          姓名1（单向）：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Full Name1&quot;</span> <span class="attr">v-model</span> = <span class="string">&quot;fullName1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          姓名2（单向）：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Full Name2&quot;</span> <span class="attr">v-model</span> = <span class="string">&quot;fullName2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          姓名3（双向）：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Full Name3&quot;</span> <span class="attr">v-model</span> = <span class="string">&quot;fullName3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span> : <span class="string">&quot;A&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">lastName</span> : <span class="string">&quot;B&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//fullName1 : &quot;&quot;,</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName2</span> : <span class="string">&quot;A B&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>:&#123;<span class="comment">//计算属性</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//什么时候执行：初始化显示/相关的data属性数据发生变化</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">fullName1</span>(<span class="params"></span>)</span>&#123;<span class="comment">//计算属性的一个方法，方法的返回值作为属性值</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName  + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName3</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//回调函数，当需要读取当前属性值时回调，根据相关的数据计算并返回当前属性值</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//回到函数，当属性值发生改变时回调，更新相关的属性数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;<span class="comment">//value 就是fullName3 的最新属性</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> names = value.split(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.lastName = names[<span class="number">1</span>]</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//监视你的属性变化，属性发生变化触发回调函数</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span> : <span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;<span class="comment">//传入单个参数（新的值）、两个参数（新的值,老的值）</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//就是vm对象</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.fullName2 = newVal + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// lastName : function(newVal,oldVal)&#123;//传入单个参数（新的值）、两个参数（新的值,老的值）</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     console.log(this) //就是vm对象</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     this.fullName2 = this.firstName + &#x27; &#x27; + newVal</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        vm.$watch(<span class="string">&#x27;lastName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;<span class="comment">//传入单个参数（新的值）、两个参数（新的值,老的值）</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//就是vm对象</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.fullName2 = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + newVal</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础3-class与style绑定</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%803-class%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础4-条件渲染</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%804-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础5-列表操作</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%805-%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试：v-for 遍历数组<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                   &#123;&#123;index&#125;&#125; --- &#123;&#123;p.name&#125;&#125; --- &#123;&#123;p.age&#125;&#125;</span><br><span class="line">                   ---<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                   ---<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update(index,&#123;name:&#x27;cat&#x27;,age:100&#125;)&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试：v-for 遍历对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in persons[1]&quot;</span>&gt;</span></span><br><span class="line">                   &#123;&#123;value&#125;&#125; --- &#123;key&#125;&#125;</span><br><span class="line">                   ---<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                   ---<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update(index,&#123;name:&#x27;cat&#x27;,age:100&#125;)&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">              <span class="attr">persons</span>:[ <span class="comment">//vue 本身只是监视了persons的改变，没有监视数组内部数据的变化</span></span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;teddy&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;rain&#x27;</span>,<span class="attr">age</span>:<span class="number">14</span> &#125;,</span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;mark&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span> &#125;,</span></span><br><span class="line"><span class="javascript">              ]</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">del</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;删除：&quot;</span>+index)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.persons.splice(index,<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">update</span>(<span class="params">index,newP</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//this.persons[index] = newP; 并没有改变person本身，</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.persons.splice(index,<span class="number">1</span>,newP)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h3 id="列表搜索和排序"><a href="#列表搜索和排序" class="headerlink" title="列表搜索和排序"></a>列表搜索和排序</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表搜索和排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           1.列表过滤</span></span><br><span class="line"><span class="comment">           2.列表排序</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;searchName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in filterPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   &#123;&#123;index&#125;&#125; --- &#123;&#123;p.name&#125;&#125; --- &#123;&#123;p.age&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateOrderType(1)&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateOrderType(2)&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateOrderType(0)&quot;</span>&gt;</span>原本顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">              <span class="attr">persons</span>:[ <span class="comment">//vue 本身只是监视了persons的改变，没有监视数组内部数据的变化</span></span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;teddy&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;rain&#x27;</span>,<span class="attr">age</span>:<span class="number">14</span> &#125;,</span></span><br><span class="line"><span class="javascript">                  &#123;<span class="attr">name</span>:<span class="string">&#x27;mark&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span> &#125;,</span></span><br><span class="line"><span class="javascript">              ],</span></span><br><span class="line"><span class="javascript">              <span class="attr">searchName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              <span class="attr">orderType</span>:<span class="number">0</span>,<span class="comment">//0代表原本，1代表升序，2代表降序</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">filterPersons</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//取出所有相关数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> &#123;searchName,persons,orderType&#125; = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//过滤后最终显示的数组</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> fpersons;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//对persions进行过滤</span></span></span><br><span class="line"><span class="javascript">                    fpersons = persons.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.name.indexOf(searchName)!==-<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(orderType!==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        fpersons.sort(<span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;<span class="comment">//如果返回负数p1在前面，如果返回正数p2在前面</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//1代表升序，2代表降序</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(orderType===<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> p2.age-p1.age</span></span><br><span class="line"><span class="javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> p1.age-p2.age</span></span><br><span class="line"><span class="javascript">                            &#125;                         </span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> fpersons</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">updateOrderType</span>(<span class="params">ordertype</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.orderType = ordertype</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础6-事件处理</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%806-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           1.绑定监听</span></span><br><span class="line"><span class="comment">           2.事件修饰符</span></span><br><span class="line"><span class="comment">           3.按键修饰符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.绑定监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test2(&#x27;ceshi_test2&#x27;)&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test3($event)&quot;</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test4(123,$event)&quot;</span>&gt;</span>test4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.事件修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px;background-color: red;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;test5&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- @click.stop  绑定事件并阻止事件冒泡 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background-color: blue;&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;test6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- @click.stop  绑定事件并阻止事件冒泡 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;test7&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3.按键修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- @keyup.enter 为键盘内的按键绑定事件（a、enter、del、esc。。。。（space 就没有）） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;test8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;test1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test2</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(msg)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test3</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(event.target.innerHTML)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test4</span>(<span class="params">NUM,event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(NUM + <span class="string">&#x27;-----&#x27;</span> + event.target.innerHTML)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;out&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test6</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//event.stopPropagation()//阻止事件冒泡</span></span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;inner&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test7</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//event.preventDefault()//阻止事件默认行为</span></span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;点击了&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">test8</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//if(event.key)</span></span></span><br><span class="line"><span class="javascript">                    alert(event.target.value)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础8-vue生命周期</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%808-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1.vue生命周期</span></span><br><span class="line"><span class="comment">            1)初始化阶段</span></span><br><span class="line"><span class="comment">                beforeCreate()</span></span><br><span class="line"><span class="comment">                create()</span></span><br><span class="line"><span class="comment">                beforeMount()</span></span><br><span class="line"><span class="comment">                mounted()</span></span><br><span class="line"><span class="comment">            2)更新显示(更新data时触发)：this.x</span></span><br><span class="line"><span class="comment">                beforeUpdate()</span></span><br><span class="line"><span class="comment">                updated</span></span><br><span class="line"><span class="comment">            3)销毁vue实例：vm.$destory</span></span><br><span class="line"><span class="comment">                beforeStory()</span></span><br><span class="line"><span class="comment">                destoryed()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.常用的生命周期方法</span></span><br><span class="line"><span class="comment">            mounted() 发送ajax请求，启动定时器等异步任务</span></span><br><span class="line"><span class="comment">            beforeStory() 做收尾工作，如：清除定时器</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;destroyVm&quot;</span>&gt;</span>destory vm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">destroyVm</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//干掉vm</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$destroy()</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//初始化阶段</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;beforeCreate&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">create</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;create&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;beforeMounted&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;<span class="comment">//挂载，初始化显示之后立即调用(1次)</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.IntervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;----------&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow </span></span><br><span class="line"><span class="javascript">                &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//更新阶段</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;beforeUpdate&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;update&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//死亡阶段 </span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;<span class="comment">//vm 死亡之前调用(1次)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//清除定时器</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;beforeDestroy&quot;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.IntervalId)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;destroy&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础7-表单数据自动收集</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%807-%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h3 id="表单数据自动收集"><a href="#表单数据自动收集" class="headerlink" title="表单数据自动收集"></a>表单数据自动收集</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>自动收集保单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           1.自动收集表单数据</span></span><br><span class="line"><span class="comment">            使用 v-model （双向数据绑定）自动收集数据</span></span><br><span class="line"><span class="comment">            text/textarea</span></span><br><span class="line"><span class="comment">            checkbox</span></span><br><span class="line"><span class="comment">            radio</span></span><br><span class="line"><span class="comment">            select</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;handleSubmit&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.自动收集表单数据<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;basket&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basket&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;basket&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">value</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pingpang&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pingpang&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>城市：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selectCityId&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>未选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;city.id&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(city,index) in allCitys&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;city.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>介绍：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span> : <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">pwd</span> : <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">likes</span>:[<span class="string">&#x27;foot&#x27;</span>,<span class="string">&#x27;pingpang&#x27;</span>],</span></span><br><span class="line"><span class="javascript">                <span class="attr">allCitys</span>:[&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;苏州&#x27;</span>&#125;],</span></span><br><span class="line"><span class="javascript">                <span class="attr">selectCityId</span> : <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">info</span>:<span class="string">&quot;测试文本信息&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handleSubmit</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.username,<span class="built_in">this</span>.pwd,<span class="built_in">this</span>.sex,<span class="built_in">this</span>.likes,<span class="built_in">this</span>.selectCityId,<span class="built_in">this</span>.info)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-基础9-过渡与动画</title>
    <url>/2020/08/13/vue-%E5%9F%BA%E7%A1%809-%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vue动画的理解</span><br><span class="line">1）操作css的 trasition 或 animation</span><br><span class="line">2）vue 会目标元素 添加/移除 特定的class</span><br><span class="line">3）过渡的相关类名</span><br><span class="line">	xxx-enter-active：指定显示 transition</span><br><span class="line">	xxx-leave-active：指定隐藏的 transition</span><br><span class="line">	xxx-enter/xxx-leave-to：指定隐藏时的样式</span><br><span class="line">	</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>过渡与动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/*显示时样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.xxx-enter-active</span>, <span class="selector-class">.xxx-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏时样式*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.xxx-enter</span>, <span class="selector-class">.xxx-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*显示的过渡效果*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.fade-enter-active</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏的过渡效果 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">3s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/*vue官网案例*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>)</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.bounce-enter-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.bounce-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="keyword">@keyframes</span> bounce-in &#123;</span></span><br><span class="line"><span class="css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>Toggle show<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;&quot;</span>&gt;</span>Lorem ipsum dolor sit amet<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue-master/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;, </span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo2&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;, </span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm3 =<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-进阶1-脚手架创建项目</title>
    <url>/2020/08/13/vue-%E8%BF%9B%E9%98%B61-%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="脚手架构建项目"><a href="#脚手架构建项目" class="headerlink" title="脚手架构建项目"></a>脚手架构建项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">说明</span><br><span class="line">	vue-cli 是 vue 官方提供的脚手架工具</span><br><span class="line">	github：https://github.com/vuejs/vue-cli</span><br><span class="line">	作用：从 https://github.com/vuejs-templates 下载模板项目</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">创建vue项目</span><br><span class="line">	npm install -g vue-cli</span><br><span class="line">	vue init webpack vue-demo</span><br><span class="line">	cd vue_demo</span><br><span class="line">	npm install</span><br><span class="line">	npm run dev</span><br><span class="line">	访问: http://localhost:8080/</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">模板项目结构</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-进阶2-组件化编码</title>
    <url>/2020/08/13/vue-%E8%BF%9B%E9%98%B62-%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h3 id="组件化编码"><a href="#组件化编码" class="headerlink" title="组件化编码"></a>组件化编码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">组件化编码流程</span><br><span class="line">	1、拆分组件</span><br><span class="line">	2、实现静态组件（显示数据是固定的，没有交互）</span><br><span class="line">	3、动态组件（初始化显示，交互数据）</span><br><span class="line">	</span><br><span class="line">App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;site-header jumbotron&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请发表对Vue的评论<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Add</span>  <span class="attr">:addComment</span>=<span class="string">&quot;addComment&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">List</span> <span class="attr">:comments</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">:delComment</span>=<span class="string">&quot;delComment&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span>  Add <span class="keyword">from</span> <span class="string">&#x27;./components/Add.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span>  List <span class="keyword">from</span> <span class="string">&#x27;./components/List.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            Add,</span></span><br><span class="line"><span class="javascript">            List</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">comments</span>:[</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;BOB&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">content</span> : <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;cat&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">content</span> : <span class="string">&#x27;vue so easy&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                      &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;BZ&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">content</span> : <span class="string">&#x27;vue so so&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//添加评论</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">addComment</span>(<span class="params">comment</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.comments.unshift(comment)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//删除指定下标评论</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">delComment</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.comments.splice(index,<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Add.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;6&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;评论内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default pull-right&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">     <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">addComment</span>:&#123;<span class="comment">//指定属性名/属性值的类型/必要性</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="built_in">Function</span>,<span class="comment">//类型</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">required</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span> : <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span> : <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> name = <span class="built_in">this</span>.name</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> content = <span class="built_in">this</span>.content</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(!name || !content)&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;姓名和内容不能为空&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> comment = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;name&quot;</span>:<span class="built_in">this</span>.name,</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;content&quot;</span>:<span class="built_in">this</span>.content</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.addComment(comment)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.content = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">List.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;reply&quot;</span>&gt;</span>评论回复：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#x27;display: none&#x27;</span>&gt;</span>暂无评论，点击左侧添加评论！！！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Item</span> <span class="attr">v-for</span>=<span class="string">&quot;(comment,index) in comments&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:comment</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">:delComment</span>=<span class="string">&quot;delComment&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&#x27;./Item.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//声明接受属性，这个属性就会成为组件对象的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&quot;comments&quot;</span>,<span class="string">&quot;delComment&quot;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            Item</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.reply</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Item.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;handle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delItem&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> &gt;</span>&#123;&#123;comment.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>说:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;centence&quot;</span>&gt;</span>&#123;&#123;comment.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>:&#123;<span class="comment">//指定属性名和属性值的类型</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">comment</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">delComment</span>: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">index</span>: <span class="built_in">Number</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">delItem</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123;comment&#125; = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">`确认删除<span class="subst">$&#123;comment.name&#125;</span>的评论吗？`</span>))&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.delComment(<span class="built_in">this</span>.index)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">transition</span>: .<span class="number">5s</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.handle</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.handle</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.list-group-item</span> <span class="selector-class">.centence</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.user</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门1-基础知识</title>
    <url>/2020/07/11/websocket-%E5%85%A5%E9%97%A81-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h4 id="什么是Websocket"><a href="#什么是Websocket" class="headerlink" title="什么是Websocket"></a>什么是Websocket</h4><p>​    Websocket 是一种网络通信协议。</p>
<hr>
<h4 id="和-Http-协议有什么区别"><a href="#和-Http-协议有什么区别" class="headerlink" title="和 Http 协议有什么区别"></a>和 Http 协议有什么区别</h4><p>​    Http 协议只能由客户端发起</p>
<p>​    Websocket提供过一种在单个TCP连接上进行双工通讯的协议，允许服务器向客户端推送数据。在WebsocketApi中，浏览器和服务器之需要完成一次握手，两者之间就直接可以创建持久性连接，并进行双向数据传输。</p>
<hr>
<span id="more"></span>

<h4 id="Websocket-特点"><a href="#Websocket-特点" class="headerlink" title="Websocket 特点"></a>Websocket 特点</h4><ul>
<li>建立在TCP协议上，服务器端的实现比较容易</li>
<li>于Http 协议有良好的兼容性，默认端口也是 80 和 443，并且握手阶段采用Http 协议，因此握手时不容易屏蔽，能通过各种Http代理</li>
<li>数据格式比较轻量，性能开销小，通信高效</li>
<li>可以发送文本，也可以发送二进制数据</li>
<li>没有同源限制，客户端可以与任意服务器进行通信</li>
<li>协议标识符是 ws （如果加密，则为 wss ），服务网址就是URL</li>
</ul>
]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门2-客户端简介</title>
    <url>/2020/07/12/websocket-%E5%85%A5%E9%97%A82-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>WebSocket()构造函器会返回一个 WebSocket 对象</p>
<p>语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var aWebSocket = new WebSocket(url [, protocols]);</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">url   </span></span><br><span class="line"><span class="comment">	要连接的URL；这应该是WebSocket服务器将响应的URL。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">protocols </span></span><br><span class="line"><span class="comment">	可选	一个协议字符串或者一个包含协议字符串的数组。这些字符串用于指定子协议，这样单个服务器可以实现多个WebSocket子协议（例如，您可能希望一台服务器能够根据指定的协议（protocol）处理不同类型的交互）。如果不指定协议字符串，则假定为空字符串。</span></span><br><span class="line"><span class="comment">--!&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><table>
<thead>
<tr>
<th>Constant</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>WebSocket.CONNECTING</td>
<td>0</td>
</tr>
<tr>
<td>WebSocket.OPEN</td>
<td>1</td>
</tr>
<tr>
<td>WebSocket.CLOSING</td>
<td>2</td>
</tr>
<tr>
<td>WebSocket.CLOSED</td>
<td>3</td>
</tr>
</tbody></table>
<hr>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li><p><strong>WebSocket.close()</strong> 方法关闭  WebSocket  连接或连接尝试（如果有的话）。 如果连接已经关闭,则此方法不执行任何操作。</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">WebSocket.close();</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">code   可选</span></span><br><span class="line"><span class="comment">	一个数字状态码，它解释了连接关闭的原因。如果没有传这个参数，默认使用1005。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">reason	可选</span></span><br><span class="line"><span class="comment">	它解释了连接关闭的原因。这个UTF-8编码的字符串不能超过123个字节。</span></span><br><span class="line"><span class="comment">--!&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p> <strong>WebSocket.send()</strong> 方法将需要通过 WebSocket 链接传输至服务器的数据排入队列，并根据所需要传输的data bytes的大小来增加 <code>bufferedAmount</code>的值 。若数据无法传输（例如数据需要缓存而缓冲区已满）时，套接字会自行关闭。</p>
</li>
</ul>
<p>  语法：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">WebSocket.send(&quot;Hello server!&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">data</span></span><br><span class="line"><span class="comment">	用于传输至服务器的数据。它必须是以下类型之一：</span></span><br><span class="line"><span class="comment">	USVString</span></span><br><span class="line"><span class="comment">		文本字符串。字符串将以 UTF-8 格式添加到缓冲区，并且 bufferedAmount 将加上该字符串以 UTF-8 格式编码时的字节数的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	ArrayBuffer</span></span><br><span class="line"><span class="comment">		您可以使用一有类型的数组对象发送底层二进制数据；其二进制数据内存将被缓存于缓冲区，bufferedAmount 将加上所需字节数的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Blob</span></span><br><span class="line"><span class="comment">	Blob 类型将队列 blob 中的原始数据以二进制中传输。 bufferedAmount 将加上原始数据的字节数的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	ArrayBufferView</span></span><br><span class="line"><span class="comment">	您可以以二进制帧的形式发送任何 JavaScript 类数组对象 ；其二进制数据内容将被队列于缓冲区中。值 bufferedAmount 将加上必要字节数的值。</span></span><br><span class="line"><span class="comment">--!&gt;</span></span><br></pre></td></tr></table></figure>

<p>  ​</p>
<hr>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul>
<li><p>open事件</p>
<p>一旦服务器响应了WebSocket请求，open事件触发，建立一个连接，open事件对应的回调函数为 onopen</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ws.onopen = function (e) &#123;</span><br><span class="line">	writeToScreen(&quot;Connected !&quot;);</span><br><span class="line">	doSend(textID.value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>message事件</p>
<p>message事件在接收消息时候触发，接收来自服务器的数据，回调函数为onmessage</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ws.onmessage = function (e) &#123;</span><br><span class="line">	console.log(&quot;Connection Open ......&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>error事件</p>
<p> 在响应故障时触发，回调函数onerror，错误还会导致WebSocket连接关闭</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ws.error = function (e) &#123;</span><br><span class="line">	console.log(&quot;WebSocket errror ......&quot;);</span><br><span class="line">	handerError();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>close事件</p>
<p>连接关闭时触发，回调函数onclose，一旦连接关闭，关闭的WebSocket服务不再接收和发送消息。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ws.onclose = function (e) &#123;</span><br><span class="line">	console.log(&quot;Connection Closed:&quot;,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门3-服务端端点创建</title>
    <url>/2020/07/12/websocket-%E5%85%A5%E9%97%A83-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%AB%AF%E7%82%B9%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="服务端端点创建"><a href="#服务端端点创建" class="headerlink" title="服务端端点创建"></a>服务端端点创建</h4><p>WebSocket 服务端主要为 客户端开放端点（相当于接口的概念）</p>
<p>WebSocket 开放端点有两种方式 </p>
<ul>
<li>注解式开放端点</li>
<li>编程式开放端点</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="注解式开放端点"><a href="#注解式开放端点" class="headerlink" title="注解式开放端点"></a>注解式开放端点</h4><p>注解式开放端点，使用  <strong>@ServerEndpoint</strong>(“path”) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解式开放端点</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/chatServer&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startChatChannel</span><span class="params">(EndpointConfig config, Session session)</span> </span>&#123;</span><br><span class="line"> 		System.out.println(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleChatMessage</span><span class="params">(ChatMessage message)</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;message: &quot;</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error: &quot;</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endChatChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;clost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>注解式开放端点扫描服务端端点配置（如没有，则服务端端点无法实例化成功）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="编程式开放端点"><a href="#编程式开放端点" class="headerlink" title="编程式开放端点"></a>编程式开放端点</h4><p>继承Endpoint，实现onOpen方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgrammaticEchoServer</span> <span class="keyword">extends</span> <span class="title">Endpoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, EndpointConfig endpointConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Session mySession = session;</span><br><span class="line">        mySession.addMessageHandler(<span class="keyword">new</span> MessageHandler.Whole&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String incomingMessage)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mySession.getBasicRemote().sendText(<span class="string">&quot;I got this (&quot;</span> + incomingMessage + <span class="string">&quot;) so I am sending it back.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;something went wrong:&quot;</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>为了给编程式端点分派路径，需要提供ServerApplicationConfig接口的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgrammaticEchoServerAppConfig</span> <span class="keyword">implements</span> <span class="title">ServerApplicationConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;ServerEndpointConfig&gt; <span class="title">getEndpointConfigs</span><span class="params">(Set&lt;Class&lt;? extends Endpoint&gt;&gt; set)</span> </span>&#123;</span><br><span class="line">        Set&lt;ServerEndpointConfig&gt; configSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        ServerEndpointConfig serverEndpointConfig = ServerEndpointConfig.Builder.create(ProgrammaticEchoServer.class, <span class="string">&quot;/pecho&quot;</span>).build();</span><br><span class="line">        configSet.add(serverEndpointConfig);</span><br><span class="line">        <span class="keyword">return</span> configSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getAnnotatedEndpointClasses(Set&lt;Class&lt;?&gt;&gt; set) &#123;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门4-生命周期灯</title>
    <url>/2020/07/12/websocket-%E5%85%A5%E9%97%A84-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%81%AF/</url>
    <content><![CDATA[<p>案例：生命周期灯</p>
<p>案例简介：</p>
<ul>
<li><p>websocket没有连接时 红灯</p>
<p><img src="/2020/07/12/websocket-%E5%85%A5%E9%97%A84-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%81%AF/1.png" alt="没有连接"></p>
</li>
<li><p>连接成功并可以发送消息时 绿灯亮</p>
<p><img src="/2020/07/12/websocket-%E5%85%A5%E9%97%A84-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%81%AF/2.png" alt="连接成功、发送消息成功"></p>
</li>
<li><p>发送错误消息（会导致连接断开，先调用了@OnClose注解方法，判断消息不和规范抛出异常调用@OnError注解方法，之后调用@Onclose注解方法） 黄灯亮</p>
<p><img src="/2020/07/12/websocket-%E5%85%A5%E9%97%A84-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%81%AF/3.png" alt="连接关闭"></p>
</li>
</ul>
<span id="more"></span>

<p><strong>案例分析</strong></p>
<p>调用服务端关闭和调用客户端关闭操作（本质上调用的都是@Onclose注解方法）</p>
<p>实际上流程</p>
<ul>
<li>服务端关闭：<ul>
<li>先调用了@OnMessage注解方法，</li>
<li>判断入参为Close ，标识需要服务端关闭连接，服务端调用当前Session.Close()</li>
<li>然后调用@OnClose注解方法关闭WebSocket连接</li>
</ul>
</li>
<li>客户端关闭<ul>
<li>调用@OnClose注解方法关闭WebSocket连接</li>
</ul>
</li>
</ul>
<p><strong>总结</strong></p>
<p>WebSocket声明周期</p>
<ul>
<li>开始：通过@OnOpen开始</li>
<li>通讯：通过@OnMessage进行通讯</li>
<li>中断：@OnError  和 @OnClose 都会导致中断。</li>
</ul>
<hr>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><ul>
<li><p>代码结构</p>
<p><img src="/2020/07/12/websocket-%E5%85%A5%E9%97%A84-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%81%AF/5.png" alt="代码结构"></p>
</li>
<li><p>maven依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>SpringBoot启动配置（配置完成直接运行此类就可以）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Develop;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        @SpringBootApplication</span></span><br><span class="line"><span class="comment">       标注启动配置入口，可以发现通过一个main方法启动。</span></span><br><span class="line"><span class="comment">       使用这个注解的类必须放置于最外层包中，因为默认扫描这个类以下的包。</span></span><br><span class="line"><span class="comment">       否则需要自己配置@ComponentScan。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>扫描服务端端点配置（如没有，则服务端端点无法实例化成功）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Develop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>服务端端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Develop.Lifecycle;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/lights&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEndpoint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String START_TIME = <span class="string">&quot;Start Time&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenOpening</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        session.getUserProperties().put(START_TIME, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">this</span>.sendMessage(<span class="string">&quot;3:Just opened&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGettingAMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息：&quot;</span>+message);</span><br><span class="line">        <span class="keyword">if</span> (message.indexOf(<span class="string">&quot;xxx&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;xxx not allowed !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.indexOf(<span class="string">&quot;close&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sendMessage(<span class="string">&quot;1:Server closing after &quot;</span> + <span class="keyword">this</span>.getConnectionSeconds() + <span class="string">&quot; s&quot;</span>);</span><br><span class="line">                session.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Error closing session &quot;</span> + ioe.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.sendMessage(<span class="string">&quot;3:Just processed a message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenSomethingGoesWrong</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sendMessage(<span class="string">&quot;2:Error: &quot;</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenClosing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Goodbye !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.getBasicRemote().sendText(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ioe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error sending message &quot;</span> + ioe.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getConnectionSeconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> millis = System.currentTimeMillis() -</span><br><span class="line">                ((Long) <span class="keyword">this</span>.session.getUserProperties().get(START_TIME));</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) millis / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>客户端页面（可以自行更改服务端连接地址）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Lifecycle&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 style=&quot;text-align: center;&quot;&gt;Lifecycle Lights&lt;/h1&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;table style=&quot;text-align: left; width: 50px; margin-left: auto;</span><br><span class="line">        margin-right: auto;&quot; border=&quot;0&quot; cellpadding=&quot;20&quot; cellspacing=&quot;0&quot;&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td style=&quot; text-align: center; vertical-align: top;&quot;&gt;</span><br><span class="line">                    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">                    &lt;form action=&quot;&quot;&gt;</span><br><span class="line">                        &lt;input onclick=&quot;open_connection()&quot; value=&quot;Open Connection&quot; type=&quot;button&quot; id=&quot;ocID&quot;&gt;</span><br><span class="line">                        &lt;input onclick=&quot;send_valid_message()&quot; value=&quot;Send Message&quot; type=&quot;button&quot; id=&quot;svmID&quot;&gt;</span><br><span class="line">                        &lt;input onclick=&quot;send_invalid_message()&quot; value=&quot;Send Bad Message&quot; type=&quot;button&quot; id=&quot;simID&quot;&gt;</span><br><span class="line">                        &lt;input onclick=&quot;request_close_connection()&quot; value=&quot;Server Close Connection&quot; type=&quot;button&quot;  id=&quot;rccID&quot;&gt;</span><br><span class="line">                        &lt;input onclick=&quot;close_connection()&quot; value=&quot;Client Close Connection&quot; type=&quot;button&quot; id=&quot;rcID&quot;&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;    </span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td style=&quot; text-align: center; vertical-align: top;&quot;&gt;</span><br><span class="line">                    &lt;canvas id=&quot;myDrawing&quot; width=&quot;200&quot; height=&quot;210&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">                    &lt;div id=&quot;traffic_light_display&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            var lifecycle_websocket;</span><br><span class="line">            </span><br><span class="line">            function init() &#123;</span><br><span class="line">                output = document.getElementById(&quot;output&quot;);</span><br><span class="line">                traffic_light_display = document.getElementById(&quot;traffic_light_display&quot;);</span><br><span class="line">                update_display(&quot;1&quot;, &quot;No connection&quot;);</span><br><span class="line">                update_buttons();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            function open_connection() &#123;</span><br><span class="line">                lifecycle_websocket = new WebSocket(&quot;ws://localhost:8080/lights&quot;);</span><br><span class="line">                lifecycle_websocket.onmessage = function (evt) &#123;</span><br><span class="line">                    update_for_message(evt.data);</span><br><span class="line">                    update_buttons();</span><br><span class="line">                &#125;;</span><br><span class="line">                lifecycle_websocket.onclose = function (evt) &#123;</span><br><span class="line">                    update_buttons();</span><br><span class="line">                &#125;; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function get_color(light_index, light_on_index) &#123;</span><br><span class="line">                if (light_index == 1 &amp;&amp; light_on_index == 1) &#123;</span><br><span class="line">                    return &quot;red&quot;</span><br><span class="line">                &#125; else if (light_index == 2 &amp;&amp; light_on_index == 2) &#123;</span><br><span class="line">                    return &quot;yellow&quot;</span><br><span class="line">                &#125; else if (light_index == 3 &amp;&amp; light_on_index == 3) &#123;</span><br><span class="line">                    return &quot;green&quot;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return &quot;grey&quot;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function get_light_index(message) &#123;</span><br><span class="line">                return message.substring(0, 1)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function get_display_message(message) &#123;</span><br><span class="line">                return message.substring(2, message.length)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function update_for_message(message) &#123;</span><br><span class="line">                var display_message = get_display_message(message);</span><br><span class="line">                var light_index = get_light_index(message);</span><br><span class="line">                update_display(light_index, display_message);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function update_display(light_index, display_message) &#123;</span><br><span class="line">                var old = traffic_light_display.firstChild;</span><br><span class="line">                var pre = document.createElement(&quot;pre&quot;);</span><br><span class="line">                pre.style.wordWrap = &quot;break-word&quot;; </span><br><span class="line">                pre.innerHTML = &quot;&lt;b&gt;&lt;font face=&#x27;Arial&#x27;&gt;&quot;+display_message+&quot;&lt;/font&gt;&lt;/b&gt;&quot;;</span><br><span class="line">                if (traffic_light_display.firstChild != null) &#123;</span><br><span class="line">                    traffic_light_display.replaceChild(pre, traffic_light_display.firstChild);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    traffic_light_display.appendChild(pre)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                var context = document.getElementById(&#x27;myDrawing&#x27;).getContext(&#x27;2d&#x27;);</span><br><span class="line">                context.beginPath();</span><br><span class="line">                context.fillStyle = &quot;black&quot;</span><br><span class="line">                context.fillRect(65,0,70,210);</span><br><span class="line">                context.fill();</span><br><span class="line">                </span><br><span class="line">                context.beginPath();</span><br><span class="line">                context.fillStyle = get_color(1, light_index); // grey</span><br><span class="line">                context.arc(100,35,25,0,(2*Math.PI), false)</span><br><span class="line">                context.fill();</span><br><span class="line">                </span><br><span class="line">                context.beginPath();</span><br><span class="line">                context.fillStyle = get_color(2, light_index);</span><br><span class="line">                context.arc(100,105,25,0,(2*Math.PI), false)</span><br><span class="line">                context.fill();</span><br><span class="line">                </span><br><span class="line">                context.beginPath();</span><br><span class="line">                context.fillStyle = get_color(3, light_index);</span><br><span class="line">                context.arc(100,175,25,0,(2*Math.PI), false)</span><br><span class="line">                context.fill(); </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function isOpen() &#123;</span><br><span class="line">                return lifecycle_websocket != null &amp;&amp; lifecycle_websocket.readyState == lifecycle_websocket.OPEN;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function update_buttons() &#123;</span><br><span class="line">                ocID.disabled = isOpen();</span><br><span class="line">                simID.disabled = !isOpen();</span><br><span class="line">                svmID.disabled = !isOpen();</span><br><span class="line">                rccID.disabled = !isOpen();</span><br><span class="line">                rcID.disabled = !isOpen();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function send_valid_message() &#123;</span><br><span class="line">                lifecycle_websocket.send(&quot;Hello&quot;)  </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function send_invalid_message() &#123;</span><br><span class="line">                lifecycle_websocket.send(&quot;Helxxxlo&quot;)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function request_close_connection() &#123;</span><br><span class="line">                lifecycle_websocket.send(&quot;close&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            function close_connection() &#123;</span><br><span class="line">                lifecycle_websocket.close();</span><br><span class="line">                update_display(&quot;1&quot;, &quot;Client closed connection&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            window.addEventListener(&quot;load&quot;, init, false);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门5-消息类型</title>
    <url>/2020/07/12/websocket-%E5%85%A5%E9%97%A85-%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="WebSocket实现通讯基础"><a href="#WebSocket实现通讯基础" class="headerlink" title="WebSocket实现通讯基础"></a>WebSocket实现通讯基础</h3><ul>
<li>消息类型</li>
<li>消息转码/解码</li>
</ul>
<hr>
<h4 id="WebSocket协议支持三种本地消息类型"><a href="#WebSocket协议支持三种本地消息类型" class="headerlink" title="WebSocket协议支持三种本地消息类型"></a>WebSocket协议支持三种本地消息类型</h4><ul>
<li>文本消息</li>
<li>二进制消息</li>
<li>Ping消息 和 Pong消息 <ul>
<li>两种消息通常被用来检查WebSocket连接的健康性，（连接是否有效）。</li>
<li>可以通过测量Ping和Pong消息所花费的时间来测算WebSocket连接的效率。</li>
</ul>
</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="WebSocket三种本地消息类型发送方法"><a href="#WebSocket三种本地消息类型发送方法" class="headerlink" title="WebSocket三种本地消息类型发送方法"></a>WebSocket三种本地消息类型发送方法</h4><p>RemoteEndPoint.Basic API 的提供方法</p>
<p><strong>发送字符串</strong></p>
<ul>
<li><p><strong>public</strong> **void **sendText(String var1) **throws **IOException;</p>
<p>该方法把传入的文本参数发送WebSocket文本信息发送，这意味着WebSocket连接的另一端将接受一个文本格式的信息，</p>
<p>只有在消息发送成功或者消息发送过程中抛出错误时，该方法才会返回（异常返回：发送过程中连接断开）</p>
</li>
<li><p>**public **Writer getSendWriter() **throws **IOException;</p>
<p>WebSocket提供了一种使用WriterAPI发送String消息的方式（用于将一些高层级的对象序列化String以便发送）</p>
</li>
<li><p>**public **void **sendText(String var1, **boolean **var2) **throws IOException; </p>
<p>WebSocket协议允许把大的WebSocket消息分解成多个小片段，使实现在整个消息被完全传送之前开始发送消息，并获得性能优化。（分片发送）//var2是消息结束标识，如果消息未结束则为false，如果消息为最后消息片段则为true。</p>
</li>
</ul>
<p><strong>发送二进制消息</strong></p>
<ul>
<li><p><strong>public</strong> **void **sendBinary(ByteBuffer var1) **throws **IOException;</p>
<p>和第一种发送字符串方法一样，一次发送完整信息，只有在消息完全发送成功，或者发送过程中抛出异常才会返回。</p>
</li>
<li><p><strong>public</strong> **void **sendBinary(ByteBuffer var1, **boolean **var2) **throws **IOException;</p>
<p>分片发送二进制消息</p>
</li>
<li><p><strong>public</strong> OutputStream getSendStream() **throws **IOException;</p>
<p>实现通过输出流来发送消息，如果直接将java对象写入Java I/O的API时，这种方式将变得非常有用。</p>
</li>
</ul>
<hr>
<h4 id="WebSocket支持两种类型消息发送方式"><a href="#WebSocket支持两种类型消息发送方式" class="headerlink" title="WebSocket支持两种类型消息发送方式"></a>WebSocket支持两种类型消息发送方式</h4><p>无论是注解式端点还是变成是端点，实现其发送消息的API都是相同的</p>
<ul>
<li>RemoteEndPoint.Basic(同步发送) </li>
<li>RemoteEndpoint.Async(异步发送) </li>
</ul>
<hr>
<h4 id="WebSocket三种本地消息接收方法"><a href="#WebSocket三种本地消息接收方法" class="headerlink" title="WebSocket三种本地消息接收方法"></a>WebSocket三种本地消息接收方法</h4><h5 id="文本类型消息接收"><a href="#文本类型消息接收" class="headerlink" title="文本类型消息接收"></a>文本类型消息接收</h5><ul>
<li>**public void **handleMessage(String Message) {}</li>
<li>**public void **handleMessage(String Message,boolean isLast) {}</li>
<li>**public void **handleMessage(Reader Message) {}</li>
</ul>
<h5 id="二进制信息接收"><a href="#二进制信息接收" class="headerlink" title="二进制信息接收"></a>二进制信息接收</h5><ul>
<li>**public void **handleMessage(byte[] data) {}</li>
<li>**public void **handleMessage(ByteBuffer data) {}</li>
<li>**public void **handleMessage(byte[] data,boolean isLast) {}</li>
<li>**public void **handleMessage(ByteBuffer data,boolean isLast) {}</li>
</ul>
<h5 id="Pong消息接收"><a href="#Pong消息接收" class="headerlink" title="Pong消息接收"></a>Pong消息接收</h5><ul>
<li> **public void **handleMessage(PongMessage Message) {}</li>
</ul>
]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门6-消息解码与编码</title>
    <url>/2020/07/12/websocket-%E5%85%A5%E9%97%A86-%E6%B6%88%E6%81%AF%E8%A7%A3%E7%A0%81%E4%B8%8E%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h4 id="WebSocket是怎么将对象变为WebSocket信息的？"><a href="#WebSocket是怎么将对象变为WebSocket信息的？" class="headerlink" title="WebSocket是怎么将对象变为WebSocket信息的？"></a>WebSocket是怎么将对象变为WebSocket信息的？</h4><ul>
<li><p>如果你传入的是一个java基本类型（等值于一个装箱类），WebSocket实际上会把数据转化成一个标准的Java字符串。</p>
</li>
<li><p>如果传入的是其他对象（除String类型），WebSocket会实现javax.websocket.Encoder.Text<T>   T 就是你想要发送的对象类型。</T></p>
<p>       当你使用WebSocket发送T类型的对象时，WebSocket会调用相应的解码器，发送给远端的实际上是encode()方法返回的字符串。</p>
<p>        当编码器无法进行转换时就会抛出EncodeException异常。</p>
<p> 传入其他对象（除String类型）实现：</p>
<ol>
<li>如果想把对象编码成WebSocket二进制信息，可以实现Encoder.Binary<T>接口。</T></li>
<li>如果想把对象编码成Java I/O流，可以实现Encoder.CharacterStream<T> 、Encoder.BinaryStream<T> </T></T></li>
</ol>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>要自己定义编码器，将信息编码为自己要传输的格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例： </span></span><br><span class="line"><span class="comment">// 编码器：将DrawingObject转化为String类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawingEncoder</span> <span class="keyword">implements</span> <span class="title">Encoder</span>.<span class="title">Text</span>&lt;<span class="title">DrawingObject</span>&gt; </span>&#123;&#125;   </span><br></pre></td></tr></table></figure></li>
<li><p>同时要在服务器端点配置定义的编码器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(</span></span><br><span class="line"><span class="meta">        value= &quot;/fruit_tree&quot;,</span></span><br><span class="line"><span class="meta">        encoders = &#123; DrawingEncoder.class &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="WebSocket-对消息的处理"><a href="#WebSocket-对消息的处理" class="headerlink" title="WebSocket 对消息的处理"></a>WebSocket 对消息的处理</h4><p>WebSocket 消息处理有非常严格的限定，每个注解式端点最多只有一个消息处理方法处理每种本地消息类型。</p>
<h5 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h5><table>
<thead>
<tr>
<th>接口类型</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Decoder.Text<T></T></td>
<td>T转换成String类型</td>
<td>T decode(String raw)</td>
</tr>
<tr>
<td>Decoder.TextStream<T></T></td>
<td>T转换成Writer</td>
<td>T decode(Reader raw)</td>
</tr>
<tr>
<td>Decoder.Binar<T></T></td>
<td>T转换成ByteBuffer</td>
<td>T decode(ByteBuffer raw)</td>
</tr>
<tr>
<td>Decoder.BinaryStream<T></T></td>
<td>T转换成OutputStream</td>
<td>T decode(InputStream raw)</td>
</tr>
</tbody></table>
<h5 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h5><table>
<thead>
<tr>
<th>接口类型</th>
<th>转换</th>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>Encoder.Text<T></T></td>
<td>T转换成String类型</td>
<td>String   encode(T object)</td>
</tr>
<tr>
<td>Encoder.TextStream<T></T></td>
<td>T转换成Writer</td>
<td>void     encode(T object,Writer writer)</td>
</tr>
<tr>
<td>Encoder.Binary<T></T></td>
<td>T转换成ByteBuffer</td>
<td>ByteBuffer encode(T object)</td>
</tr>
<tr>
<td>Encoder.BinaryStream<T></T></td>
<td>T转换成OutputStream</td>
<td>void     encode(T object,OutputStream os)</td>
</tr>
</tbody></table>
<p>案例类定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERLIST_UPDATE = <span class="string">&quot;ulupd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHAT_DATA_MESSAGE = <span class="string">&quot;ctmsg&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME_MESSAGE = <span class="string">&quot;unmsg&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGNOFF_REQUEST = <span class="string">&quot;sorq&quot;</span>;</span><br><span class="line">    String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ChatMessage</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicMessage</span> <span class="keyword">extends</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String dataString;</span><br><span class="line"></span><br><span class="line">    BasicMessage(String type, String dataString) &#123;</span><br><span class="line">        <span class="keyword">super</span>(type);</span><br><span class="line">        <span class="keyword">this</span>.dataString = dataString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dataString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewUserMessage</span> <span class="keyword">extends</span> <span class="title">BasicMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewUserMessage</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(USERNAME_MESSAGE, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatUpdateMessage</span> <span class="keyword">extends</span> <span class="title">StructuredMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatUpdateMessage</span><span class="params">(String username, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ChatMessage.CHAT_DATA_MESSAGE);</span><br><span class="line">        <span class="keyword">super</span>.dataList.add(username);</span><br><span class="line">        <span class="keyword">super</span>.dataList.add(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) <span class="keyword">super</span>.getList().get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) <span class="keyword">super</span>.getList().get(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSignoffMessage</span> <span class="keyword">extends</span> <span class="title">BasicMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserSignoffMessage</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(SIGNOFF_REQUEST, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解码器案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatDecoder</span> <span class="keyword">implements</span> <span class="title">Decoder</span>.<span class="title">Text</span>&lt;<span class="title">ChatMessage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(EndpointConfig config)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMessage <span class="title">decode</span><span class="params">(String s)</span> <span class="keyword">throws</span> DecodeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.startsWith(NewUserMessage.USERNAME_MESSAGE)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NewUserMessage(s.substring(NewUserMessage.USERNAME_MESSAGE.length()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.startsWith(ChatMessage.SIGNOFF_REQUEST)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UserSignoffMessage(s.substring(ChatMessage.SIGNOFF_REQUEST.length()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.startsWith(ChatMessage.CHAT_DATA_MESSAGE)) &#123;</span><br><span class="line">            List&lt;String&gt; usernameUpdate = ChatDecoder.parseDataString(s.substring(ChatMessage.CHAT_DATA_MESSAGE.length()));</span><br><span class="line">            String username = usernameUpdate.get(<span class="number">0</span>);</span><br><span class="line">            String message = usernameUpdate.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChatUpdateMessage(username, message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DecodeException(s, <span class="string">&quot;Unknown message type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">willDecode</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(UserSignoffMessage.SIGNOFF_REQUEST) ||</span><br><span class="line">                s.startsWith(NewUserMessage.USERNAME_MESSAGE) ||</span><br><span class="line">                s.startsWith(UserSignoffMessage.CHAT_DATA_MESSAGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">parseDataString</span><span class="params">(String dataString)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(dataString, ChatEncoder.SEPARATOR);</span><br><span class="line">        <span class="keyword">while</span> (st.hasMoreTokens()) &#123;</span><br><span class="line">            String next = st.nextToken();</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(next)) &#123;</span><br><span class="line">                dataList.add(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编码器案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatEncoder</span> <span class="keyword">implements</span> <span class="title">Encoder</span>.<span class="title">Text</span>&lt;<span class="title">ChatMessage</span>&gt;  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(EndpointConfig config)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(ChatMessage cm)</span> <span class="keyword">throws</span> EncodeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cm <span class="keyword">instanceof</span> StructuredMessage) &#123;</span><br><span class="line">            String dataString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (Iterator itr = ((StructuredMessage) cm).getList().iterator(); itr.hasNext(); ) &#123;</span><br><span class="line">                dataString = dataString + SEPARATOR + itr.next();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cm.getType() + dataString;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cm <span class="keyword">instanceof</span> BasicMessage) &#123;</span><br><span class="line">            <span class="keyword">return</span> cm.getType() + ((BasicMessage) cm).getData();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EncodeException(cm, <span class="string">&quot;Cannot encode messages of type: &quot;</span> + cm.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解码器和编码器应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/chatServer&quot;,</span></span><br><span class="line"><span class="meta">        decoders = &#123;ChatDecoder.class&#125;,</span></span><br><span class="line"><span class="meta">        encoders = &#123;ChatEncoder.class&#125;</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">public class ChatServer &#123;</span></span><br><span class="line"><span class="meta">    private static String USERNAME_KEY = &quot;username&quot;;</span></span><br><span class="line"><span class="meta">    private static String USERNAMES_KEY = &quot;usernames&quot;;</span></span><br><span class="line"><span class="meta">    private static Map&lt;String,Session&gt; sessionMap = new Hashtable&lt;&gt;();</span></span><br><span class="line"><span class="meta">    private String userName;</span></span><br><span class="line"><span class="meta">    private Session session;</span></span><br><span class="line"><span class="meta">    private ServerEndpointConfig endpointConfig;</span></span><br><span class="line"><span class="meta">    private Transcript transcript;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @OnOpen</span></span><br><span class="line"><span class="meta">    public void startChatChannel(EndpointConfig config, Session session) &#123;</span></span><br><span class="line"><span class="meta">        this.endpointConfig = (ServerEndpointConfig) config;</span></span><br><span class="line"><span class="meta">        ChatServerConfigurator csc = (ChatServerConfigurator) endpointConfig.getConfigurator();</span></span><br><span class="line"><span class="meta">        this.transcript = csc.getTranscript();</span></span><br><span class="line"><span class="meta">        this.session = session;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @OnMessage</span></span><br><span class="line"><span class="meta">    public void handleChatMessage(ChatMessage message) &#123;</span></span><br><span class="line"><span class="meta">        switch (message.getType())&#123;</span></span><br><span class="line"><span class="meta">            case NewUserMessage.USERNAME_MESSAGE:</span></span><br><span class="line"><span class="meta">                this.processNewUser((NewUserMessage) message,this.sessionMap);</span></span><br><span class="line"><span class="meta">                break;</span></span><br><span class="line"><span class="meta">            case ChatMessage.CHAT_DATA_MESSAGE:</span></span><br><span class="line"><span class="meta">                this.processChatUpdate((ChatUpdateMessage) message);</span></span><br><span class="line"><span class="meta">                break;</span></span><br><span class="line"><span class="meta">            case ChatMessage.SIGNOFF_REQUEST:</span></span><br><span class="line"><span class="meta">                this.processSignoffRequest((UserSignoffMessage) message);</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @OnError</span></span><br><span class="line"><span class="meta">    public void myError(Throwable t) &#123;</span></span><br><span class="line"><span class="meta">        System.out.println(&quot;Error: &quot; + t.getMessage());</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @OnClose</span></span><br><span class="line"><span class="meta">    public void endChatChannel() &#123;</span></span><br><span class="line"><span class="meta">        if (this.userName != null) &#123;</span></span><br><span class="line"><span class="meta">            this.sessionMap.remove(this.userName);</span></span><br><span class="line"><span class="meta">            this.addMessage(&quot; just left...without even signing out !&quot;);</span></span><br><span class="line"><span class="meta">            this.removeUser();</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    void processNewUser(NewUserMessage message,Map&lt;String,Session&gt; sessionMap) &#123;</span></span><br><span class="line"><span class="meta">        this.userName= this.validateUsername(message.getUsername());</span></span><br><span class="line"><span class="meta">        NewUserMessage uMessage = new NewUserMessage(this.userName);</span></span><br><span class="line"><span class="meta">        try &#123;</span></span><br><span class="line"><span class="meta">            session.getBasicRemote().sendObject(uMessage);</span></span><br><span class="line"><span class="meta">        &#125; catch (IOException | EncodeException ioe) &#123;</span></span><br><span class="line"><span class="meta">            System.out.println(&quot;Error signing &quot; + message.getUsername() + &quot; into chat : &quot; + ioe.getMessage());</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">        this.registerUser(this.userName,sessionMap);</span></span><br><span class="line"><span class="meta">        this.broadcastUserListUpdate();</span></span><br><span class="line"><span class="meta">        this.addMessage(&quot; just joined.&quot;);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    void processChatUpdate(ChatUpdateMessage message) &#123;</span></span><br><span class="line"><span class="meta">        this.addMessage(message.getMessage());</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    void processSignoffRequest(UserSignoffMessage drm) &#123;</span></span><br><span class="line"><span class="meta">        this.addMessage(&quot; just left.&quot;);</span></span><br><span class="line"><span class="meta">        this.removeUser();</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private void registerUser(String username,Map&lt;String,Session&gt; sessionMap) &#123;</span></span><br><span class="line"><span class="meta">        sessionMap.put(username, this.session);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private List&lt;String&gt; getUserList() &#123;</span></span><br><span class="line"><span class="meta">        ArrayList&lt;String&gt; userList = new ArrayList&lt;&gt;(this.sessionMap.keySet());</span></span><br><span class="line"><span class="meta">        return (userList == null) ? new ArrayList&lt;String&gt;() : userList;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String validateUsername(String newUsername) &#123;</span></span><br><span class="line"><span class="meta">        if (this.getUserList().contains(newUsername)) &#123;</span></span><br><span class="line"><span class="meta">            return this.validateUsername(newUsername + &quot;1&quot;);</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">        return newUsername;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private void broadcastUserListUpdate() &#123;</span></span><br><span class="line"><span class="meta">        UserListUpdateMessage ulum = new UserListUpdateMessage(this.getUserList());</span></span><br><span class="line"><span class="meta">        this.sessionMap.forEach((user,session) -&gt; &#123;</span></span><br><span class="line"><span class="meta">            try &#123;</span></span><br><span class="line"><span class="meta">                session.getBasicRemote().sendObject(ulum);</span></span><br><span class="line"><span class="meta">            &#125; catch (IOException | EncodeException ex) &#123;</span></span><br><span class="line"><span class="meta">                System.out.println(&quot;Error updating a client : &quot; + ex.getMessage());</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">        &#125;);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private void removeUser() &#123;</span></span><br><span class="line"><span class="meta">        try &#123;</span></span><br><span class="line"><span class="meta">            this.broadcastUserListUpdate();</span></span><br><span class="line"><span class="meta">            this.sessionMap.remove(this.userName);</span></span><br><span class="line"><span class="meta">            this.session.close(new CloseReason(CloseReason.CloseCodes.NORMAL_CLOSURE, &quot;User logged off&quot;));</span></span><br><span class="line"><span class="meta">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="meta">            System.out.println(&quot;Error removing user&quot;);</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private void broadcastTranscriptUpdate(Map&lt;String,Session&gt; sessionMap) &#123;</span></span><br><span class="line"><span class="meta">        sessionMap.forEach((user,session) -&gt;&#123;</span></span><br><span class="line"><span class="meta">            ChatUpdateMessage cdm = new ChatUpdateMessage(this.transcript.getLastUsername(), this.transcript.getLastMessage());</span></span><br><span class="line"><span class="meta">            try &#123;</span></span><br><span class="line"><span class="meta">                session.getBasicRemote().sendObject(cdm);</span></span><br><span class="line"><span class="meta">            &#125; catch (IOException | EncodeException ex) &#123;</span></span><br><span class="line"><span class="meta">                System.out.println(&quot;Error updating a client : &quot; + ex.getMessage());</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">        &#125;);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private void addMessage(String message) &#123;</span></span><br><span class="line"><span class="meta">        this.transcript.addEntry(this.userName, message);</span></span><br><span class="line"><span class="meta">        this.broadcastTranscriptUpdate(this.sessionMap);</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-入门7-URL路径映射</title>
    <url>/2020/07/12/websocket-%E5%85%A5%E9%97%A87-URL%E8%B7%AF%E5%BE%84%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h4 id="WebSocket-路径映射"><a href="#WebSocket-路径映射" class="headerlink" title="WebSocket 路径映射"></a>WebSocket 路径映射</h4><p>Java Api 有两种将服务器端点映射到路径的机制：</p>
<ul>
<li>精准URI映射</li>
<li>URI 模板映射</li>
</ul>
<hr>
<h4 id="精准URI映射"><a href="#精准URI映射" class="headerlink" title="精准URI映射"></a>精准URI映射</h4><p>案例(以下这两种都属于精准URI映射)：</p>
<ul>
<li><p>注解式端点 @ServerEndpoint(“/tools/chat”)</p>
</li>
<li><p>编程式端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerEndpointConfig set = ServerEndpointConfig.Builder.create(MyChatEndpoint.class,<span class="string">&quot;/tool/chat&quot;</span>).build();</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<span id="more"></span>

<h4 id="URI模板映射"><a href="#URI模板映射" class="headerlink" title="URI模板映射"></a>URI模板映射</h4><p>URI模板与URI类似，除非其URI的一部分已经被替换为变量之外</p>
<p>案例URI模板：<code>/travel/$&#123;access-level&#125;/flights</code></p>
<p>再次 URI  模板中，其中的一个路径片段由变量 access-level 表示。模板URI十分有用，因为将URI的片段表示为变量，所以一个URI模板实际上可以表示一系列的URI。</p>
<p>此URI模板等同于如下URI</p>
<p>当变量 <code>access-level</code> 是 vip时：    <code>/travel/vip/flights</code> </p>
<p>当变量 <code>access-level</code> 是 coach时：    <code>/travel/coach/flights</code></p>
<p>Java Api 提供两种方式来访问模板URI中变量信息</p>
<ul>
<li><p>session.getPathParameters()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(&quot;/travel/$&#123;access-level&#125;/flights&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookingService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processNewClient</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">    	Map&lt;String,String&gt; pathParameters = session.getPathParameters();</span><br><span class="line">    	String memberLevel = pathParameters.get(<span class="string">&quot;access-level&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>@PathParam</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ServerEndpoint(&quot;/travel/$&#123;access-level&#125;/flights&quot;)</span><br><span class="line">public class BookingService &#123;</span><br><span class="line">	@OnOpen</span><br><span class="line">    public void processNewClient(@PathParam(&quot;access-level&quot;) String memberLevel)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
<p>​</p>
</li>
</ul>
<hr>
<h4 id="URI映射规则"><a href="#URI映射规则" class="headerlink" title="URI映射规则"></a>URI映射规则</h4><p><strong>精准匹配规则</strong></p>
<ul>
<li><p>服务器 WebSocket端点的URI路径被Web服务器作为相对于部署Web应用的Web上下文来对待</p>
<p>如果你打 war 名字为 <code>test</code>，其内端点为 <code>/chat</code> 。则websocket初始化时应该为  <code>/test/chat</code> 来建立端点连接</p>
</li>
<li><p>两个拥有相同 URI 路径的端点不能部署在同一个 Web服务上</p>
</li>
<li><p>Web 服务器处理 URI路径是大小写敏感的</p>
</li>
</ul>
<p><strong>模板匹配规则</strong></p>
<ul>
<li>若打开阶段握手请求URI时URI模板有效扩展，则入站的打开阶段握手将匹配映射到此URI模板路径的服务器端点</li>
<li>对于服务器端点映射来说，Java WebSocket API 仅允许级别为 1的 URI模板（不包含任何保留字 + 、* 、/等）</li>
<li>仅当URI模板中的每个变量都可以使用非空的值进行拓展，并使得拓展结果与此URI精准一致，入站URI才匹配级别为1的URI模板。</li>
<li>两个拥有等价URI模板的端点不能部署在同一个Web应用中</li>
<li>查询字符串作为打开握手请求中，它不被用来判断匹配的端点</li>
</ul>
]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录</title>
    <url>/2020/07/12/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="202007"><a href="#202007" class="headerlink" title="202007"></a>202007</h4><ol>
<li>找出数组中重复的数字。<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">真题网址</a></li>
<li>二维数组查找。<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">真题网址</a></li>
<li>两数之和。<a href="https://leetcode-cn.com/problems/two-sum/">真题网址</a></li>
<li>移除元素。<a href="https://leetcode-cn.com/problems/remove-element/">真题网址</a></li>
<li>从头到尾打印链表。<a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">真题网址</a></li>
<li>替换空格。<a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">真题网址</a></li>
<li>用两个栈实现队列。<a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">真题网址</a></li>
</ol>
<hr>
<p>202008</p>
<ol>
<li>斐波那契数列<a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">真题网址</a></li>
<li>重建二叉树<a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">真题网址</a></li>
</ol>
]]></content>
      <tags>
        <tag>刷题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>博客系统搭建</title>
    <url>/2020/04/08/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h4><p><a href="https://www.jianshu.com/p/51617690f8ca">https://www.jianshu.com/p/51617690f8ca</a></p>
<p><a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>
<hr>
<h4 id="配置博客系统插入图片"><a href="#配置博客系统插入图片" class="headerlink" title="配置博客系统插入图片"></a>配置博客系统插入图片</h4><ul>
<li><p>安装插件，在hexo根目录打开Git Bash,执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li>
<li><p>打开hexo的配置文件_config.yml,找到 post_asset_folder，把这个选项从false改成true</p>
</li>
<li><p>打开  /node_modules/hexo-asset-image/index.js</p>
<span id="more"></span>

<p>将内容更换为下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>现在就可以插入图片了，比如hexo new post photo之后<br>就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">![这是代替图片的文字，随便写](head.jpeg)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法-冒泡排序</title>
    <url>/2020/05/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>实现思路：通过双重循环，对比数组中前后值大小，通过不断替换方式（冒泡）来进行排序</p>
<hr>
<h4 id="冒泡排序实现"><a href="#冒泡排序实现" class="headerlink" title="冒泡排序实现"></a>冒泡排序实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">1</span>, <span class="number">234</span>, <span class="number">664</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">845</span>, <span class="number">33</span>, <span class="number">656</span>, <span class="number">323</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7656</span>, <span class="number">43453</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;list.length-<span class="number">1</span>-i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[j] &gt; list[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = list[j];</span><br><span class="line">                    list[j] = list[j+<span class="number">1</span>];</span><br><span class="line">                    list[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.format(<span class="string">&quot;第 %d 遍的第%d 次交换：&quot;</span>, i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> count:list) &#123;</span><br><span class="line">                    System.out.print(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.format(<span class="string">&quot;第 %d 遍最终结果：&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> count:list) &#123;</span><br><span class="line">                System.out.print(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n#########################&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<span id="more"></span>

<h4 id="冒泡排序第一次优化版本"><a href="#冒泡排序第一次优化版本" class="headerlink" title="冒泡排序第一次优化版本"></a>冒泡排序第一次优化版本</h4><p>优化思路：去除排序成功后无用循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">1</span>, <span class="number">234</span>, <span class="number">664</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">845</span>, <span class="number">33</span>, <span class="number">656</span>, <span class="number">323</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7656</span>, <span class="number">43453</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        	<span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">//设置一个标志位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;list.length-<span class="number">1</span>-i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[j] &gt; list[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = list[j];</span><br><span class="line">                    list[j] = list[j+<span class="number">1</span>];</span><br><span class="line">                    list[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="number">0</span>;  <span class="comment">//发生交换，标志位置0</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.format(<span class="string">&quot;第 %d 遍的第%d 次交换：&quot;</span>, i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> count:list) &#123;</span><br><span class="line">                    System.out.print(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.format(<span class="string">&quot;第 %d 遍最终结果：&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> count:list) &#123;</span><br><span class="line">                System.out.print(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n#########################&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;<span class="comment">//如果没有交换过元素，则已经有序</span></span><br><span class="line">            	<span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="冒泡排序第二次优化版本"><a href="#冒泡排序第二次优化版本" class="headerlink" title="冒泡排序第二次优化版本"></a>冒泡排序第二次优化版本</h4><p>优化思路：排序第 i 趟时，i-1位或者更小的已经归位情况。采取记录最后一次改变位置来进行优化，避免无用循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">1</span>, <span class="number">234</span>, <span class="number">664</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">845</span>, <span class="number">33</span>, <span class="number">656</span>, <span class="number">323</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7656</span>, <span class="number">43453</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> len = list.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempPostion = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">//设置一个标志位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[j] &gt; list[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = list[j];</span><br><span class="line">                    list[j] = list[j+<span class="number">1</span>];</span><br><span class="line">                    list[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="number">0</span>;  <span class="comment">//发生交换，标志位置0</span></span><br><span class="line">                    tempPostion = j; <span class="comment">//记录交换的位置</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.format(<span class="string">&quot;第 %d 遍的第%d 次交换：&quot;</span>, i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> count:list) &#123;</span><br><span class="line">                    System.out.print(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            len = tempPostion; <span class="comment">//把最后一次交换的位置给len，来缩减内循环的次数</span></span><br><span class="line">            System.out.format(<span class="string">&quot;第 %d 遍最终结果：&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> count:list) &#123;</span><br><span class="line">                System.out.print(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n#########################&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;<span class="comment">//如果没有交换过元素，则已经有序</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法-快速排序</title>
    <url>/2020/05/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">19</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">            <span class="comment">//先从右边查找，到比基准位小的元素</span></span><br><span class="line">            <span class="keyword">while</span> (temp &lt;= arr[j] &amp;&amp; i&lt;j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从左边查找，比基准位大的元素</span></span><br><span class="line">            <span class="keyword">while</span> (temp &gt;= arr[i] &amp;&amp; i&lt;j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i&lt;j) &#123;</span><br><span class="line">                t = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将基准位元素与（i 和 j 交汇的元素）位置互换</span></span><br><span class="line">        arr[left] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; arr.length; m++) &#123;</span><br><span class="line">            System.out.print(arr[m]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//递归左侧元素列表</span></span><br><span class="line">        quickSort(arr, left, j-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归右侧元素列表</span></span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法-插入排序</title>
    <url>/2020/05/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>插入排序</p>
<ul>
<li><p>将n个待排序元素，看成一个有序表和一个无序表，</p>
</li>
<li><p>对比无序列表第一个元素和有序列表最后一个元素大小，</p>
</li>
<li><p>如果无序列表第一个元素小于有序列表最后一个元素</p>
</li>
<li><p>将无序列表的第一个元素依次和有序列表（从大到小）对比</p>
</li>
<li><p>如果小于有序列表元素那么相互替换位置，继续向前和有序列表元素进行对比</p>
</li>
<li><p>否则直接赋值到对比的有序列表位置</p>
<span id="more"></span></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">20</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        insertSort(a, a.length);</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">&quot;after  sort:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;a.length; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">//待排元素小于有序序列的最后一个元素时，向前插入</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i]&lt;arr[i-<span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                    <span class="comment">//对比前一位，如果小则互换位置，否则直接赋值为变动的元素</span></span><br><span class="line">                    <span class="keyword">if</span> (j&gt;<span class="number">0</span> &amp;&amp; arr[j-<span class="number">1</span>]&gt;temp) &#123;</span><br><span class="line">                        arr[j]=arr[j-<span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        arr[j]=temp;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式-常用案例</title>
    <url>/2020/08/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 校验基本日期格式</span><br><span class="line"><span class="keyword">var</span>  reg1 = <span class="regexp">/^\d&#123;4&#125;(\-|\/|\.)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span>  reg2 = <span class="regexp">/^(^(\d&#123;4&#125;|\d&#123;2&#125;)(\-|\/|\.)\d&#123;1,2&#125;\3\d&#123;1,2&#125;$)|(^\d&#123;4&#125;年\d&#123;1,2&#125;月\d&#123;1,2&#125;日$)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 校验密码强度</span><br><span class="line">密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="number">8</span>-<span class="number">10</span>之间。</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 校验中文字符串仅能是中文。</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/^[\\u4e00-\\u9fa5]&#123;0,&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 由数字、<span class="number">26</span>个英文字母或下划线组成的字符串</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\\w+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 校验E-Mail 地址   同密码一样，下面是E-mail地址合规性的正则检查语句。</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/[\\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 校验身份证号码</span><br><span class="line">下面是身份证号码的正则校验。<span class="number">15</span> 或 <span class="number">18</span>位。</span><br><span class="line"><span class="number">15</span>位： <span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$/</span>;</span><br><span class="line"><span class="number">18</span>位：<span class="keyword">var</span>  reg = <span class="regexp">/^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 校验日期 “yyyy-mm-dd” 格式的日期校验，已考虑平闰年。</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 校验金额金额校验，精确到<span class="number">2</span>位小数。</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/^[0-9]+(.[0-9]&#123;2&#125;)?$/</span>;</span><br><span class="line">	</span><br><span class="line"><span class="number">9.</span> 校验手机号</span><br><span class="line"></span><br><span class="line">下面是国内 <span class="number">13</span>、<span class="number">15</span>、<span class="number">18</span>开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$/</span>;</span><br><span class="line">	</span><br><span class="line"><span class="number">10.</span> 判断IE的版本IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\\/[5-9]\\.0).*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> 校验IP-v4地址</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> 校验IP-v6地址</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9]))/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> 检查URL的前缀</span><br><span class="line">应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</span><br><span class="line">	<span class="keyword">if</span>(!s.match(<span class="regexp">/^[a-zA-Z]+:\/\//</span>)) &#123;</span><br><span class="line">		s = <span class="string">&#x27;http://&#x27;</span>+ s;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="number">14.</span> 提取URL链接</span><br><span class="line">下面的这个表达式可以筛选出一段文本中的URL。</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(f|ht)&#123;1&#125;(tp|tps):\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&amp;=]*)?/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">15.</span> 文件路径及扩展名校验</span><br><span class="line">验证 windows下文件路径和扩展名（下面的例子中为.txt文件）</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z]\\:|\\\\)\\\\([^\\]+\\)*[^\\/:*?&quot;&lt;&gt;|]+\\.txt(l)?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> 提取Color Hex Codes</span><br><span class="line">有时需要抽取网页中的颜色代码，可以使用下面的表达式。</span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">17.</span> 提取网页图片假若你想提取网页中所有图片信息，可以利用下面的表达式。</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\\&lt; *[img][^\\&gt;]*[src] *= *[\\&quot;\&#x27;]&#123;0,1&#125;([^\\&quot;\&#x27;\ &gt;]*)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">18.</span> 提取页面超链接 提取html中的超链接。</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(&lt;a\\s*(?!.*\\brel=)[^&gt;]*)(href=&quot;https?:\/\/)((?!(?:(?:www\\.)?&#x27;.implode(&#x27;|(?:www\\.)?&#x27;, $follow_list).&#x27;))[^&quot; rel=&quot;external nofollow&quot; ]+)&quot;((?!.*\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">19.</span> 查找CSS属性</span><br><span class="line">通过下面的表达式，可以搜索到相匹配的CSS属性。</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\\s*[a-zA-Z\\-]+\\s*[:]&#123;1&#125;\\s[a-zA-Z0-9\\s.#]+[;]&#123;1&#125;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">20.</span> 抽取注释</span><br><span class="line">如果你需要移除HMTL中的注释，可以使用如下的表达式。</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;!--(.*?)--&gt;/</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="number">21</span> 只能为字母加数字组合</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg =  <span class="regexp">/^[0-9a-zA-Z]+$/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/08/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<p>例如：</p>
<ul>
<li><strong>runoo+b</strong>，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</li>
<li><strong>runoo*b</strong>，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li>
<li><strong>colou?r</strong> 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</li>
</ul>
<span id="more"></span>

<h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\cx</td>
<td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody></table>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table>
<thead>
<tr>
<th>特别字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td>( )</td>
<td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td>[</td>
<td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td>\</td>
<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td>{</td>
<td>标记限定符表达式的开始。要匹配 {，请使用 {。</td>
</tr>
<tr>
<td>|</td>
<td>指明两项之间的一个选择。要匹配 |，请使用 |。</td>
</tr>
</tbody></table>
<hr>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p>
<p>正则表达式的定位符有：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个字边界，即字与空格间的位置。</td>
</tr>
<tr>
<td>\B</td>
<td>非字边界匹配。</td>
</tr>
</tbody></table>
<p>注意：不能将限定符与定位符一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p>
<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p>
<p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?=</strong> 和 **?!**，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>
<hr>
<h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 <strong>?:<strong>、</strong>?=</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p>
<h1 id="正则表达式-元字符"><a href="#正则表达式-元字符" class="headerlink" title="正则表达式 - 元字符"></a>正则表达式 - 元字符</h1><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>?</td>
<td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.|\n)”的模式。</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td>
</tr>
<tr>
<td>(?=pattern)</td>
<td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td>(?&lt;=pattern)</td>
<td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td>
</tr>
<tr>
<td>(?&lt;!pattern)</td>
<td>反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td>\cx</td>
<td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>
</tr>
<tr>
<td>\num</td>
<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td>
</tr>
<tr>
<td>\nml</td>
<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
</tr>
<tr>
<td>\un</td>
<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>​    确保一个类只有一个实例，并提供一个全局访问点</p>
<p>单例模式的多种实现方式</p>
<ul>
<li>饿汉模式</li>
<li>懒汉模式</li>
<li>双重锁模式</li>
<li>静态内置类实现</li>
<li>static代码块实现</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="饿汉模式-线程安全的"><a href="#饿汉模式-线程安全的" class="headerlink" title="饿汉模式(线程安全的)"></a>饿汉模式(线程安全的)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton singleton1 = Singleton.getSingleton();</span><br><span class="line">        Singleton singleton2 = Singleton.getSingleton();</span><br><span class="line">        System.out.println(singleton1 == singleton2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="懒汉模式-线程不安全"><a href="#懒汉模式-线程不安全" class="headerlink" title="懒汉模式(线程不安全)"></a>懒汉模式(线程不安全)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="双重锁模式"><a href="#双重锁模式" class="headerlink" title="双重锁模式"></a>双重锁模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private volatile static Singleton singleton;</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    publics static Singleton getSingleton()&#123;</span><br><span class="line">    	synchronized (Singleton.Class)&#123;</span><br><span class="line">          	if (singleton == null) &#123;</span><br><span class="line">            	singleton = new Singleton();</span><br><span class="line">        	&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="静态内置类实现（在序列化时仍然是线程不安全的）"><a href="#静态内置类实现（在序列化时仍然是线程不安全的）" class="headerlink" title="静态内置类实现（在序列化时仍然是线程不安全的）"></a>静态内置类实现（在序列化时仍然是线程不安全的）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHandler</span></span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function">publics <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> SingletonHandler.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="static代码块实现"><a href="#static代码块实现" class="headerlink" title="static代码块实现"></a>static代码块实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  	<span class="keyword">static</span> &#123;</span><br><span class="line">    	singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">  	&#125;</span><br><span class="line">    <span class="function">publics <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-工厂模式</title>
    <url>/2020/05/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>定义：所有的工厂模式都是用来封装对象的创建。</p>
<p>工厂模式又分为以下几种，在实际中可根据场景进行使用</p>
<ul>
<li>简单工厂模式：通过向工厂传递类型来指定要创建的对象</li>
<li>多方法静态工厂模式（常用）：简单工厂模式的一种思路的转变。</li>
<li>工厂方法模式：工厂方法模式将生成具体类型对象交给具体的工程</li>
<li>抽象工厂模式：通过在抽象类中增加创建产品的接口，并在具体子工厂中实现新加产品的创建。前提子工厂支持生产该产品。</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>不足之处</p>
<ul>
<li>拓展性差</li>
<li>拓展不同产品，需要不同额外参数</li>
</ul>
<p>简单工厂案例：我喜欢吃饺子，但是饺子又分为很多种馅。吃饺子时候要根据自己当时想法决定做什么馅的饺子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步：抽象一个饺子的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述需要创建的饺子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猪肉馅水饺</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Z_Dumplings</span> <span class="keyword">extends</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猪肉水饺，猪肉芹菜馅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 牛肉馅水饺</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">N_Dumplings</span> <span class="keyword">extends</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;牛肉水饺，牛肉洋葱馅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 萝卜馅水饺</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">L_Dumplings</span> <span class="keyword">extends</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;萝卜馅水饺&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDumplingsFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_Z = <span class="number">1</span>;<span class="comment">//猪肉馅水饺</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_N = <span class="number">2</span>;<span class="comment">//牛肉馅水饺</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_L = <span class="number">3</span>;<span class="comment">//萝卜馅水饺</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDumplings <span class="title">createDumplings</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> TYPE_Z:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Z_Dumplings();</span><br><span class="line">            <span class="keyword">case</span> TYPE_N:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> N_Dumplings();</span><br><span class="line">            <span class="keyword">case</span> TYPE_L:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> L_Dumplings();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后调用简单工厂创建对应水饺</span></span><br><span class="line">IDumplings dumplings = SimpleDumplingsFactory.createDumplings(SimpleDumplingsFactory.TYPE_Z);</span><br><span class="line">dumplings.creat();</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">猪肉水饺，猪肉芹菜馅</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="多方法静态工厂模式（常用）"><a href="#多方法静态工厂模式（常用）" class="headerlink" title="多方法静态工厂模式（常用）"></a>多方法静态工厂模式（常用）</h4><p>优点：</p>
<ul>
<li>使用方便</li>
<li>业务逻辑简单易懂</li>
<li>​</li>
</ul>
<p>不足之处:</p>
<ul>
<li>工厂类集中了所有实例的创建逻辑，一旦这个工厂不能工作，整个系统都会受到影响</li>
<li>违背 “ 开放 - 关闭原则” ，一旦添加了新产品就不得不修改工厂类的逻辑，会造成工厂类过于复杂</li>
<li>简单工厂使用的是静态工厂方法，静态方法不能被重写和继承。</li>
</ul>
<p>多方法静态工厂案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步：抽象一个饺子的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述需要创建的饺子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猪肉馅水饺</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Z_Dumplings</span> <span class="keyword">extends</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猪肉水饺，猪肉芹菜馅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 牛肉馅水饺</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">N_Dumplings</span> <span class="keyword">extends</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;牛肉水饺，牛肉洋葱馅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 萝卜馅水饺</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">L_Dumplings</span> <span class="keyword">extends</span> <span class="title">IDumplings</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;萝卜馅水饺&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂方法类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDumplings <span class="title">create_Z_Dumplings</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Z_Dumplings();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDumplings <span class="title">create_N_Dumplings</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> N_Dumplings();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IDumplings <span class="title">create_L_Dumplings</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> L_Dumplings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际使用</span></span><br><span class="line">IDumplings zdumplings = FunctionFactory.create_Z_Dumplings();</span><br><span class="line">zdumplings.create();</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>优点：</p>
<ul>
<li>更符合开-闭原则</li>
<li>符合单一职责原则</li>
<li>不使用静态工厂方法，可以形成基于继承的等级结构</li>
<li>工厂模式可以说是简单工厂模式的进一步抽象和拓展，在保留了简单工厂的封装优点的同时，让扩展变得简单，让继承变得可行，增加了多态性的体现</li>
</ul>
<p>缺点</p>
<ul>
<li>添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；</li>
<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>
<li>虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类；</li>
<li>一个具体工厂只能创建一种具体产品</li>
</ul>
<p>应用场景</p>
<ul>
<li>当一个类不知道它所需要的对象的类时</li>
<li>在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可；</li>
<li>当一个类希望通过其子类来指定创建对象时</li>
<li>在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li>
<li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li>
</ul>
<p>工厂方法模式案例</p>
<ul>
<li>背景：小成有一间塑料加工厂（仅生产A类产品）；随着客户需求的变化，客户需要生产B类产品；</li>
<li>冲突：改变原有塑料加工厂的配置和变化非常困难，假设下一次客户需要再发生变化，再次改变将增大非常大的成本；</li>
<li>解决方案：小成决定置办塑料分厂B来生产B类产品；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">Manufacture</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductA</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//具体产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductB</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂A类 - 生产A类产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">Manufacture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//具体工厂B类 - 生产B类产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">Manufacture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际调用</span></span><br><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        FactoryA mFactoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        mFactoryA.Manufacture().Show();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        FactoryB mFactoryB = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        mFactoryB.Manufacture().Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>抽象工厂：非常适合解决两个维度的组合产品的构造问题，取其中一个维度作为产品族，另外一个维度作为产品族中具体的多个产品。</p>
<p>何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p>
<p>优点：能够从多个产品族的多个产品中，简洁的获取想要的具体产品。解决了工厂模式中的不符合开闭原则的问题（增加新的产品时候，不修改工厂，而是增加工厂）。</p>
<p>缺点：产品族扩展比较困难，要增加一个系列的某一产品，要增加具体的产品类，还要增加对应的工厂类（或者修改对应产品族的工厂类）。<strong>产品族难扩展，产品等级易扩展</strong> </p>
<p>抽象工厂案例</p>
<ul>
<li><p>举买车的例子。</p>
</li>
<li><p>某客户想要购买一辆车，他要联系4S店，首先得有4S店（抽象工厂）的电话。</p>
</li>
<li><p>客户上网查询（建造工厂），发现了宝马4S店（具体工厂）的电话和奔驰4S店（具体工厂）的电话。</p>
</li>
<li><p>客户拨通了宝马4S店的电话（获取具体工厂），发现目前店里可以提供（生产）多款车型（具体产品）供客户选择（BMW 320、BMW 530，BMW 740）。</p>
</li>
<li><p>客户拨通了奔驰4S店的电话（获取具体工厂），发现目前店里可以提供（生产）多款车型（具体产品）供客户选择（BenzC200、BenzE300）。<br>​</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最高级抽象产品，用于抽象工厂的建造方法的返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宝马产品类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BMWCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品BMW320</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW320</span> <span class="keyword">extends</span> <span class="title">BMWCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW320，运动酷炫。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品BMW530</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW530</span> <span class="keyword">extends</span> <span class="title">BMWCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW530，时不我待。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品BMW740</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW740</span> <span class="keyword">extends</span> <span class="title">BMWCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW740，高端商务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 奔驰产品类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品C200</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzC200</span> <span class="keyword">extends</span> <span class="title">BenzCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BenzC200,实惠有面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品E300</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzE300</span> <span class="keyword">extends</span> <span class="title">BenzCar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BenzE300,商务气派&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title">getCar</span><span class="params">(String type)</span> <span class="keyword">throws</span> ClassNotFoundException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, InstantiationException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰工厂，覆盖所有奔驰车型的构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String type)</span> <span class="keyword">throws</span> ClassNotFoundException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, InstantiationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Class cl = Class.forName(type);</span><br><span class="line">        <span class="keyword">return</span> (BenzCar)cl.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宝马工厂，覆盖所有宝马车型的构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMWFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String type)</span> <span class="keyword">throws</span> ClassNotFoundException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, InstantiationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Class cl = Class.forName(type);</span><br><span class="line">        <span class="keyword">return</span> (BMWCar)cl.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超级工厂类，建造工厂的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String type)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Class cl = Class.forName(type);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建工厂&quot;</span>+type);</span><br><span class="line">        <span class="keyword">return</span> (AbstractFactory)cl.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, </span></span><br><span class="line"><span class="function">        InstantiationException, ClassNotFoundException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AbstractFactory abstractFactory = FactoryProducer.getFactory(<span class="string">&quot;BMWFactory&quot;</span>);</span><br><span class="line">        Car bmwCar = abstractFactory.getCar(<span class="string">&quot;BMW320&quot;</span>);</span><br><span class="line">        bmwCar.drive();</span><br><span class="line"> </span><br><span class="line">        Car bmwCar1 = abstractFactory.getCar(<span class="string">&quot;BMW530&quot;</span>);</span><br><span class="line">        bmwCar1.drive();</span><br><span class="line"> </span><br><span class="line">        Car bmwCar2 = abstractFactory.getCar(<span class="string">&quot;BMW740&quot;</span>);</span><br><span class="line">        bmwCar2.drive();</span><br><span class="line"> </span><br><span class="line">        AbstractFactory abstractFactory1 = FactoryProducer.getFactory(<span class="string">&quot;BenzFactory&quot;</span>);</span><br><span class="line">        Car benzCar = abstractFactory1.getCar(<span class="string">&quot;BenzC200&quot;</span>);</span><br><span class="line">        benzCar.drive();</span><br><span class="line"> </span><br><span class="line">        Car benzCar1 = abstractFactory1.getCar(<span class="string">&quot;BenzE300&quot;</span>);</span><br><span class="line">        benzCar1.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略者模式</title>
    <url>/2020/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="设计模式-策略者模式"><a href="#设计模式-策略者模式" class="headerlink" title="设计模式-策略者模式"></a>设计模式-策略者模式</h4><p>​    定义：策略模式定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
<p>​    策略者模式定义一个算法接口，并由其实现类去实现，使得每一个算法都得到封装，并让他们可以相互替换。这是一种行为型模式。策略者模式降低了算法行为和环境角色的耦合度，使得算法可以独立发生变化。</p>
<hr>
<span id="more"></span>

<h5 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a><strong>设计原则：</strong></h5><p>​    多用组合，少用继承</p>
<hr>
<h5 id="策略者模式的优缺点"><a href="#策略者模式的优缺点" class="headerlink" title="策略者模式的优缺点"></a>策略者模式的优缺点</h5><p>优点：</p>
<ul>
<li>策略类之间可以自由切换，由于策略类都实现同一个接口，可以使他们之间可以自由切换</li>
<li>易于扩展。增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码</li>
<li>避免使用多重条件选择语句，充分体现面向对象设计思想</li>
</ul>
<p>缺点</p>
<ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类，这点可以考虑使用IOC容器和依赖注入的方式来解决</li>
<li>策略模式会造成很多策略类</li>
</ul>
<hr>
<h5 id="策略模式适用场景"><a href="#策略模式适用场景" class="headerlink" title="策略模式适用场景"></a>策略模式适用场景</h5><ul>
<li>一个系统需要动态地在几种算法中选择一种的情况下。那么这些算法可以包装到一个个具体的算法类里面吗，并为这些集体的算法类提供一个统一的接口。</li>
<li>如果一个对象有很多的行为，如果不使用合适的模式，这些行为就只好使用多重的if-else语句来实现，此时，可以使用策略模式，把这些行为转移到响应的具体策略类里面，就可以避免使用难以维护的多重条件选择语句，并体现面向对象涉及的概念。</li>
</ul>
<hr>
<h5 id="策略者模式案例"><a href="#策略者模式案例" class="headerlink" title="策略者模式案例"></a>策略者模式案例</h5><p>​    举个实际点的例子吧，比如在一个系统中，所有对系统的操作都要有日志记录，而且这个日志还需要有管理界面，这种情况下通常会把日志记录在数据库里面，方便后续的管理，但是在记录日志到数据库的时候，可能会发生错误，比如暂时连不上数据库了，那就先记录在文件里面，然后在合适的时候把文件中的记录再转录到数据库中。</p>
<p>​    对于这样的功能的设计，就可以采用策略模式，把日志记录到数据库和日志记录到文件当作两种记录日志的策略，然后在运行期间根据需要进行动态的切换。在这个例子的实现中，要示范由上下文来选择具体的策略算法，前面的例子都是由客户端选择好具体的算法，然后设置到上下文中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义日志策略接口，很简单，就是一个记录日志的方法，示例代码如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LogStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 记录日志</span></span><br><span class="line"><span class="comment">    * @param msg 需要记录的日志信息</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现记录日志策略接口，日志记录到数据库中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbStrategy</span>  <span class="keyword">implements</span> <span class="title">LogStrategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制造错误</span></span><br><span class="line">        <span class="keyword">if</span>(msg != <span class="keyword">null</span> &amp;&amp; msg.trim().length() &gt;<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a  = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;现在把&quot;</span>+msg+<span class="string">&quot;记录到数据库中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现记录日志策略接口，日志记录到文件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileStrategy</span> <span class="keyword">implements</span> <span class="title">LogStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;现在把&quot;</span>+msg+<span class="string">&quot;记录到文件中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义使用这些策略的上下文，注意这次是在上下文里面实现具体策略算法的选择，所以不需要客户端来指定具体的策略算法了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">//在上下文里面，自行实现对具体策略的选择</span></span><br><span class="line">        <span class="comment">//有限使用策略,记录到数据库</span></span><br><span class="line">        LogStrategy strategy = <span class="keyword">new</span> DbStrategy();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            strategy.log(msg);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//出错了，那就记录到文件中</span></span><br><span class="line">            strategy = <span class="keyword">new</span> FileStrategy();</span><br><span class="line">            strategy.log(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        LogContext logContext = <span class="keyword">new</span> LogContext();</span><br><span class="line">        logContext.log(<span class="string">&quot;记录日志&quot;</span>);</span><br><span class="line">        logContext.log(<span class="string">&quot;再次记录日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">现在把记录日志记录到数据库中</span><br><span class="line">现在把再次记录日志记录到文件中</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰者模式</title>
    <url>/2020/05/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在不改变原代码结构的情况下，动态地拓展一个对象的功能，相比继承有更灵活的实现方式。在需要增强功能的对象上包装一层代码，达到增强功能的效果。</p>
<hr>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>动态地将责任附加到对象上。想要拓展功能，装饰者有别于继承的另一种选择。</p>
<hr>
<span id="more"></span>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fan_rc@suixingpay.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 饮料抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String description = <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cost方法是用来返回饮料的价钱（需在具体类中自己实现）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> BigDecimal <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深焙咖啡类（一种具体的饮料）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说明他是DarkRoast饮料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DarkRoast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">&quot;DarkRoast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现cost方法，用来返回DarkRoast（深焙咖啡）的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="string">&quot;3.00&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低咖啡因咖啡类（一种具体的饮料）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decaf</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说明他是Decaf饮料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">&quot;Decaf&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现cost方法，用来返回Decaf（低咖啡因咖啡）的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="string">&quot;4.00&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浓缩咖啡类（一种具体饮料）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说明他是Espresso饮料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">&quot;Espresso&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现cost方法，用来返回Espresso（浓缩咖啡）的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="string">&quot;2.00&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fan_rc@suixingpay.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 调料装饰着抽象类（继承自饮料抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的调料装饰者都必须重新实现getDescription()方法</span></span><br><span class="line"><span class="comment">     * 这样才能够用递归的方式来得到所选饮料的整体描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 摩卡调料类（继承自CondimentDecorator）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用一个实例变量记录饮料，也就是被装饰者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器初始化饮料变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来饮料的基础上添加上Mocha描述（原来的饮料加入Mocha调料，被Mocha调料装饰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;,Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来饮料的基础上加上Mocha的价格（原来的饮料加入Mocha调料，被Mocha调料装饰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.2&quot;</span>).add(beverage.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 豆浆调料类（继承自CondimentDecorator））</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用一个实例变量记录饮料，也就是被装饰者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器初始化饮料变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来饮料的基础上添加上Soy描述（原来的饮料加入Soy调料，被Soy调料装饰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;,Soy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来饮料的基础上加上Soy的价格（原来的饮料加入Soy调料，被Soy调料装饰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.3&quot;</span>).add(beverage.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奶泡调料类（继承自CondimentDecorator）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whip</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用一个实例变量记录饮料，也就是被装饰者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器初始化饮料变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Whip</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来饮料的基础上添加上Whip描述（原来的饮料加入Whip调料，被Whip调料装饰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;,Whip&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在原来饮料的基础上加上Whip的价格（原来的饮料加入Whip调料，被Whip调料装饰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.4&quot;</span>).add(beverage.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡馆（供应咖啡）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarbuzzCoffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//订一杯Espresso(2.00)，不需要调料，打印出它的描述与价钱。</span></span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        System.out.println(<span class="string">&quot;Description: &quot;</span> + beverage.getDescription() + <span class="string">&quot; $&quot;</span> + beverage.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制造出一个DarkRoast(3.00)对象,用Mocha(0.2)装饰它,用第二个Mocha(0.2)装饰它,用Whip(0.4)装饰它，打印出它的描述与价钱。</span></span><br><span class="line">        Beverage beverage2 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</span><br><span class="line">        System.out.println(<span class="string">&quot;Description: &quot;</span> + beverage2.getDescription() + <span class="string">&quot; $&quot;</span> + beverage2.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再来一杯调料为豆浆(Soy 0.3)、摩卡(Mocha 0.2)、奶泡(Whip 0.4)的Decaf（低咖啡因咖啡 4.00），打印出它的描述与价钱。</span></span><br><span class="line">        Beverage beverage3 = <span class="keyword">new</span> Decaf();</span><br><span class="line">        beverage3 = <span class="keyword">new</span> Soy(beverage3);</span><br><span class="line">        beverage3 = <span class="keyword">new</span> Mocha(beverage3);</span><br><span class="line">        beverage3 = <span class="keyword">new</span> Whip(beverage3);</span><br><span class="line">        System.out.println(<span class="string">&quot;Description: &quot;</span> + beverage3.getDescription() + <span class="string">&quot; $&quot;</span> + beverage3.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-观察者模式</title>
    <url>/2020/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="设计模式-观察者模式（Observer）"><a href="#设计模式-观察者模式（Observer）" class="headerlink" title="设计模式-观察者模式（Observer）"></a>设计模式-观察者模式（Observer）</h4><p>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
<p>设计原则：为了交互对象之间的松耦合设计而努力</p>
<p> 要点：</p>
<ul>
<li>观察者模式定义了对象之间的一对多关系</li>
<li>主题（也可以是观察者），用一个共同的接口来更新观察者</li>
<li>观察者和可观察者之间用松耦合方式结合，可观察者不知道观察者细节，只知道观察者实现了观察者接口</li>
<li>使用此模式时，你可以从被观察者处 推/拉 数据（推的方式 被认为是正确的）</li>
<li>有多个观察者时，不可以依靠特定的通知次序</li>
<li>Java有多种观察者模式的实现，包括通用的 java.util.Observable</li>
<li>注意  java.util.Observable 实现上带来的一些问题</li>
<li>Swing 大量使用了观察者模式，许多GUI框架也是如此</li>
<li>此模式也被应用在许多地方：JavaBean、RMI</li>
</ul>
<hr>
<span id="more"></span>

<h4 id="程序中的观察者模式"><a href="#程序中的观察者模式" class="headerlink" title="程序中的观察者模式"></a>程序中的观察者模式</h4><p>​    观察者模式描述的是一种一对多的关系，当被观察者的状态发生改变时，所有的观察者会得到通知。通俗的理解：观察者模式就是在特定的时刻【被观察者发送通知】干特定的事【观察者收到通知处理自己响应的事件】</p>
<p><strong>观察者模式三要素</strong>：观察者、被观察者、事件【订阅】</p>
<p><strong>观察者模式的结构</strong></p>
<table>
<thead>
<tr>
<th>角色</th>
<th>类别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Subject</td>
<td>接口或抽象类</td>
<td>主题也叫被观察者</td>
</tr>
<tr>
<td>RealSubject</td>
<td>真实的类</td>
<td>具体的被观察者，内部维护了观察者列表</td>
</tr>
<tr>
<td>IObserver</td>
<td>观察者接口或抽象类</td>
<td>抽象出观察者的接口</td>
</tr>
<tr>
<td>RealObserver</td>
<td>具体的观察者</td>
<td>被观察者有更新，观察者立马响应更新</td>
</tr>
</tbody></table>
<hr>
<h4 id="案例一-针对上方观察者模式的结构"><a href="#案例一-针对上方观察者模式的结构" class="headerlink" title="案例一(针对上方观察者模式的结构)"></a>案例一(针对上方观察者模式的结构)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标抽象类 Subject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;     </span><br><span class="line">    <span class="keyword">protected</span> ArrayList observers=<span class="keyword">new</span> ArrayList&lt;&gt;();     </span><br><span class="line"></span><br><span class="line">    <span class="comment">//把观察者对象添加到观察者集合中     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;           </span><br><span class="line">        observers.add(observer);     </span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">    <span class="comment">//把观察者对象剔除到观察者集合中     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;           </span><br><span class="line">        observers.remove(observer);     </span><br><span class="line">    &#125;                         </span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明抽象方法     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体被观察类 ConcreteSubject.java 继承抽象类并实现通知观察者的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;     </span><br><span class="line">    <span class="comment">//实现通知的方法     </span></span><br><span class="line">    <span class="meta">@Override</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;           </span><br><span class="line">        System.out.println(<span class="string">&quot;目标对象状态已变化......发送通知给观察者中&quot;</span>);           </span><br><span class="line">        <span class="keyword">for</span>(Object object:observers)&#123;                   </span><br><span class="line">            ((Observer)object).update();           </span><br><span class="line">        &#125;                 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;     </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的观察者1 ConcreteSubject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;     </span><br><span class="line">    <span class="keyword">private</span> String observerName;     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(String observerName)</span> </span>&#123;           </span><br><span class="line">    <span class="keyword">this</span>.observerName=observerName;     </span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">    <span class="meta">@verride</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;           </span><br><span class="line">    System.out.println(observerName+<span class="string">&quot;我要更新一下我的状态了......&quot;</span>);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的观察者2 ConcreteOberverOther.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteOberverOther</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;     </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String observerName;    </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteOberverOther</span><span class="params">(String observerName)</span> </span>&#123;           </span><br><span class="line">    <span class="keyword">this</span>.observerName=observerName;     </span><br><span class="line">    &#125;             </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;           </span><br><span class="line">    System.out.println(observerName+<span class="string">&quot;我要更新一下我的状态了......&quot;</span>);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyMain</span> </span>&#123;     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;           </span><br><span class="line">        Subject subject=<span class="keyword">new</span> ConcreteSubject();     </span><br><span class="line">      </span><br><span class="line">        Observer observer=<span class="keyword">new</span> ConcreteObserver(<span class="string">&quot;观察者一号&quot;</span>);         </span><br><span class="line">        Observer observer2=<span class="keyword">new</span> ConcreteOberverOther(<span class="string">&quot;观察者二号&quot;</span>);           </span><br><span class="line"></span><br><span class="line">        subject.attach(observer);           </span><br><span class="line">        subject.attach(observer2);           </span><br><span class="line">        subject.notifyObserver();     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="案例二（Head-First经典案例）"><a href="#案例二（Head-First经典案例）" class="headerlink" title="案例二（Head First经典案例）"></a>案例二（Head First经典案例）</h4><p>气象监测应用</p>
<p>​    概况：建立一个应用，有三种布告板，分别显示目前的气象状况、气象统计、简单预报。当 WeatherData 气象对象数据发生变化时，三个布告板必须实时更新。</p>
<p>简单分析：此系统中的三个部分是 气象站（收集并更新WeaterData）、WeaterData对象（管理需要通知的布告板，当数据发生更新时候通知布告板）、布告板（接收来自WeaterData的通知，展示自己应该展示的信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nitifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanges</span><span class="params">()</span></span>&#123;</span><br><span class="line">        nitifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanges();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span>( i&gt;=<span class="number">0</span> )&#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nitifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o : observers) &#123;</span><br><span class="line">            o.update(<span class="keyword">this</span>.temperature,<span class="keyword">this</span>.humidity,<span class="keyword">this</span>.pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>,<span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current conditions: &quot;</span> + temperature + <span class="string">&quot;F degrees and &quot;</span> + humidity + <span class="string">&quot;% humidity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        CurrentConditionsDisplay currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>,<span class="number">65</span>,<span class="number">30.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>,<span class="number">70</span>,<span class="number">20.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">78</span>,<span class="number">90</span>,<span class="number">29.2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">Current conditions: <span class="number">80.0F</span> degrees and <span class="number">65.0</span>% humidity</span><br><span class="line">Current conditions: <span class="number">82.0F</span> degrees and <span class="number">70.0</span>% humidity</span><br><span class="line">Current conditions: <span class="number">78.0F</span> degrees and <span class="number">90.0</span>% humidity</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
